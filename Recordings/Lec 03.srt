1
00:00:00,000 --> 00:00:09,160
where instead of doing what you see here, every block is encrypted with a different key.

2
00:00:11,520 --> 00:00:16,380
Now, you start with the same key, but for every block that you encrypt,

3
00:00:16,700 --> 00:00:23,640
you derive a unique key based on the master key and the block number, the position of the block.

4
00:00:23,640 --> 00:00:32,740
So that makes sure that every block knows its place and cannot be moved around or deleted, okay?

5
00:00:37,140 --> 00:00:42,180
So there are other modes that I'm not going to go into here, but if you're in, because that's crypto, right,

6
00:00:42,240 --> 00:00:48,440
then we're trying to kind of bulldoze for crypto fairly quickly because you should know something about it.

7
00:00:48,440 --> 00:00:55,800
Now, as you also know, there's two types of crypto, symmetric or conventional, and public key or asymmetric.

8
00:00:56,900 --> 00:01:00,560
All right, and the differences are fairly obvious.

9
00:01:00,980 --> 00:01:05,300
In a symmetric crypto, both parties, assuming there are two parties to communicate,

10
00:01:05,640 --> 00:01:08,260
both parties need to know the same key, okay?

11
00:01:09,320 --> 00:01:12,460
And the biggest problem there is how to distribute that key,

12
00:01:12,460 --> 00:01:18,580
how to, who comes up with the key, and how does the other party learn the key, right?

13
00:01:18,660 --> 00:01:20,280
So it's key distribution or key management.

14
00:01:21,640 --> 00:01:25,660
In a public key crypto, you have this radically, totally different approach, right,

15
00:01:25,700 --> 00:01:30,640
where the public key is known for everybody, but private keys are not, right?

16
00:01:30,720 --> 00:01:35,840
So, typical situation, I put my public key on my webpage or on Canvas.

17
00:01:35,840 --> 00:01:42,680
As enrolled students, you will see it as public, and then any one of you can send me a secure message

18
00:01:42,680 --> 00:01:44,180
using my public key.

19
00:01:45,120 --> 00:01:50,080
As long as you trust that it is mine, okay, you can send me a secure message,

20
00:01:50,300 --> 00:01:54,820
and none of you can interfere with other people's messages or read them, right, or anything like that, right?

21
00:01:55,180 --> 00:01:59,560
So only I can decrypt because I have, I am the only one who has a private key.

22
00:01:59,560 --> 00:02:03,460
So that kind of solves, sort of, kind of the distribution problem,

23
00:02:03,640 --> 00:02:12,460
because my public key is not secret, so there's no, like, headache of how do I distribute it, right?

24
00:02:12,500 --> 00:02:13,400
I just post it somewhere.

25
00:02:15,580 --> 00:02:15,820
Yeah?

26
00:02:20,500 --> 00:02:25,840
So in public key crypto, the plain text message goes for the encryption algorithm,

27
00:02:25,840 --> 00:02:28,020
which is computed with the message itself.

28
00:02:29,560 --> 00:02:35,360
It must be allergies.

29
00:02:36,180 --> 00:02:38,800
Ah, Bob's public key is known to Alice.

30
00:02:38,940 --> 00:02:42,340
Alice uses the message, and Bob's public key to produce the ciphertext.

31
00:02:42,640 --> 00:02:45,220
That's the notation we use in this lecture.

32
00:02:45,820 --> 00:02:47,020
I'm borrowing from the book.

33
00:02:48,780 --> 00:02:52,980
And then Bob, who knows a private key, not the same as the public key, okay,

34
00:02:52,980 --> 00:02:58,520
that's the whole point, will somehow compute a transformation on the ciphertext

35
00:02:58,520 --> 00:03:03,240
that will negate the effects of encryption and spit out the same message.

36
00:03:03,240 --> 00:03:05,140
That's where magic happens.

37
00:03:05,140 --> 00:03:15,340
In order for this magic to work, you need to have some functions, right?

38
00:03:16,000 --> 00:03:23,680
Encrypt and decrypt functions, where essentially these operations with two different keys reverse each other.

39
00:03:23,680 --> 00:03:28,400
And this is different from symmetric crypto, where you can say, well, XOR, for example, right?

40
00:03:28,400 --> 00:03:37,680
They use one-time path, XOR with a key encrypts the plaintext, and, again, XORing the ciphertext with a key decrypts,

41
00:03:37,680 --> 00:03:43,280
because XOR of something with something, the same cancels it out.

42
00:03:44,280 --> 00:03:51,880
But here, we have two different keys, and so, in addition, if you know the public key,

43
00:03:52,240 --> 00:03:56,960
like in my example, I'm the instructor, I post my public key on the bulletin board somewhere,

44
00:03:57,960 --> 00:04:02,380
that public key should not allow you to let my secret key, or my private key.

45
00:04:02,380 --> 00:04:06,080
If that was the case, it would be useless, right?

46
00:04:06,340 --> 00:04:12,800
So, it's not impossible, because obviously there is some relationship between my public key and my private key, right?

47
00:04:13,780 --> 00:04:16,960
So, by saying impossible, that's a high bar.

48
00:04:17,200 --> 00:04:22,040
I'm not saying it's impossible, but it should be computationally very hard for you to learn my private key.

49
00:04:22,040 --> 00:04:31,040
Right? An example of that, well, Diffie-Hellman, but it's not truly an encryption scheme, it's more of a key management scheme.

50
00:04:31,600 --> 00:04:34,020
The best known example is RSA, right?

51
00:04:34,140 --> 00:04:35,160
Rivest-Chemeyer Edelman.

52
00:04:41,980 --> 00:04:49,720
Dating back to 1978, the public key as a concept was actually invented in 1974 by a guy who doesn't get enough credit,

53
00:04:49,720 --> 00:04:55,980
partially because he's super weird, even for a computer scientist, his name is Ralph Merkle.

54
00:04:57,040 --> 00:05:01,020
And if you study computer security, you probably come across his name because there's something called Merkle-Hastries,

55
00:05:01,620 --> 00:05:07,640
and if you haven't heard of him, you should know his name, Merkle, M-E-R-K-L-E, Ralph Merkle.

56
00:05:07,640 --> 00:05:11,940
He invented the very first public key method that at least was published, right?

57
00:05:12,420 --> 00:05:13,920
That he doesn't get credit for, for some reason.

58
00:05:13,920 --> 00:05:23,500
Anyway, RSA, how it works, you first, to set up the system, you have to choose two large prime numbers.

59
00:05:24,400 --> 00:05:30,380
By large, I mean, while it says 2048 bits each, probably even 1,000 bits is okay.

60
00:05:31,140 --> 00:05:35,240
So, you pick two large numbers, let's say they are 1,044 bits long.

61
00:05:35,240 --> 00:05:42,380
When you multiply them together, which you should, you get another large integer, which is no longer prime, right,

62
00:05:42,440 --> 00:05:44,600
because it's a multiplication of two prime numbers.

63
00:05:44,940 --> 00:05:50,980
It is a composite number, but it has an interesting property that it can only be factored in one way, right, with two primes.

64
00:05:51,780 --> 00:05:53,760
And prime numbers, as you know, have no factors.

65
00:05:55,200 --> 00:06:00,040
So, you come up with this giant number, which is a product of two large primes.

66
00:06:00,440 --> 00:06:02,480
The large primes must be about the same in length.

67
00:06:02,480 --> 00:06:12,080
They are not the same, same is bad, they are different, but they are about the same length, in terms of, like, digits of bits.

68
00:06:13,700 --> 00:06:14,680
And there is a good reason for that.

69
00:06:15,200 --> 00:06:18,940
So, you compute the product, which is not difficult, just another huge number.

70
00:06:19,400 --> 00:06:23,580
And then you compute another product, which is called Z, which is a P-1 times Q-1.

71
00:06:25,320 --> 00:06:25,720
Okay?

72
00:06:26,080 --> 00:06:28,200
P-1 times U-1.

73
00:06:28,200 --> 00:06:36,240
Notice, if P and Q are prime, there's no way P-1 is prime or Q-1 is prime, right, in fact, you'll know they are even.

74
00:06:38,340 --> 00:06:38,620
Yeah?

75
00:06:39,060 --> 00:06:39,340
Right.

76
00:06:39,340 --> 00:06:43,780
So, that product is not, is not a product of two prime.

77
00:06:44,940 --> 00:06:45,300
All right.

78
00:06:45,420 --> 00:06:48,900
Then, you choose a number E.

79
00:06:49,960 --> 00:06:51,360
That E is very important.

80
00:06:52,640 --> 00:06:57,140
Of course, that E is less than N, making greater than N makes absolutely zero sense.

81
00:06:57,140 --> 00:07:00,420
And it must have no common factors with Z.

82
00:07:02,340 --> 00:07:08,900
But P, but N, Z, must have no common factors with Z.

83
00:07:09,580 --> 00:07:14,120
When two numbers have no common factors, they are called, in mathematics, relatively prime.

84
00:07:14,120 --> 00:07:18,880
Which means, E and Z must be relatively prime for each other.

85
00:07:19,680 --> 00:07:22,600
To be relatively prime, the numbers don't need to be prime.

86
00:07:23,360 --> 00:07:23,600
Right?

87
00:07:24,000 --> 00:07:24,720
Are you following me?

88
00:07:24,760 --> 00:07:25,300
I'm waking up.

89
00:07:25,420 --> 00:07:25,580
Right?

90
00:07:26,340 --> 00:07:27,420
They don't need to be prime.

91
00:07:27,600 --> 00:07:29,720
They just need to have no common factors.

92
00:07:29,720 --> 00:07:37,340
Now, if you choose E to be prime, that helps.

93
00:07:37,500 --> 00:07:42,420
Because then, it obviously has no common factors with Z minus 1, sorry, with Z.

94
00:07:42,860 --> 00:07:43,040
Right?

95
00:07:43,960 --> 00:07:44,540
That's okay.

96
00:07:44,660 --> 00:07:46,640
You can, in fact, choose E to be 3.

97
00:07:48,560 --> 00:07:50,080
If it helps you think about it.

98
00:07:50,360 --> 00:07:51,260
It doesn't have to be large.

99
00:07:51,840 --> 00:07:52,860
Can't be, but it doesn't have to be.

100
00:07:54,480 --> 00:07:57,500
Then, so these 3 and 4 are the crucial steps.

101
00:07:57,500 --> 00:08:01,160
If you've never heard of it, then I see your eyes are not glazing over,

102
00:08:01,280 --> 00:08:02,920
which means some of you have probably never heard of this.

103
00:08:03,480 --> 00:08:03,880
Amazing.

104
00:08:05,820 --> 00:08:06,780
You pick a D.

105
00:08:08,640 --> 00:08:09,660
Another number, D.

106
00:08:09,900 --> 00:08:10,940
But D, you don't pick.

107
00:08:11,020 --> 00:08:11,960
Actually, you compute it.

108
00:08:12,240 --> 00:08:18,480
You compute it that it must be the case that E times D minus 1 is divisible by Z.

109
00:08:20,840 --> 00:08:22,340
So it's not like you actually pick.

110
00:08:22,540 --> 00:08:22,660
Right?

111
00:08:22,780 --> 00:08:23,480
E you pick.

112
00:08:24,420 --> 00:08:25,380
D you compute.

113
00:08:27,500 --> 00:08:30,960
So it must be the case, in other words, so if this doesn't make sense, think of this.

114
00:08:31,160 --> 00:08:36,880
E times D must be 1 mod Z.

115
00:08:42,500 --> 00:08:43,620
Remember the mod operator?

116
00:08:43,780 --> 00:08:45,140
Everybody loves mod operators, right?

117
00:08:45,140 --> 00:08:53,360
So, in other words, they are called inverses of each other mod Z.

118
00:08:55,440 --> 00:09:01,060
Now, there's a whole number theoretic background that goes into this, which, again, the 134 slides

119
00:09:01,060 --> 00:09:03,960
that I thought you should go in excruciating detail.

120
00:09:03,960 --> 00:09:10,840
So, if you really love this stuff, and you really want to understand, go there, okay?

121
00:09:10,840 --> 00:09:16,800
But there's, like, a whole mathematical foundation about why this works and why this is important.

122
00:09:16,800 --> 00:09:20,980
So, okay, at the end, step five, what is your public key?

123
00:09:21,060 --> 00:09:28,020
Your public key is N, modulus, the product of T and Q, and E, that number you pick.

124
00:09:29,320 --> 00:09:31,240
Together, N and E are your public key.

125
00:09:31,240 --> 00:09:34,540
You throw them on your web page, you put them on your canvas, whatever.

126
00:09:35,860 --> 00:09:37,100
You are free to give it away.

127
00:09:39,840 --> 00:09:43,820
But your private key, well, it says N and D, that's actually incorrect.

128
00:09:45,240 --> 00:09:48,260
D, P, and Q are your private key.

129
00:09:48,260 --> 00:09:51,860
Because N is public.

130
00:09:52,700 --> 00:09:54,620
So, if you really want to know, it's D.

131
00:09:54,840 --> 00:09:57,340
That D is the one you're going to use to be the private key.

132
00:09:59,820 --> 00:10:07,680
And the whole trick with the RSA is that it seems, we believe, right?

133
00:10:08,800 --> 00:10:10,480
You're not the mathiest, you understand.

134
00:10:10,480 --> 00:10:17,400
We believe that knowing E, N, and E, it is really, really hard

135
00:10:17,400 --> 00:10:18,860
to compute a D.

136
00:10:21,180 --> 00:10:22,300
We don't have a proof.

137
00:10:23,280 --> 00:10:25,300
We, what I mean, the world, at least.

138
00:10:26,500 --> 00:10:28,560
The math, the mathematicians, the computer scientists.

139
00:10:28,640 --> 00:10:31,840
There is no formal proof that it is computationally difficult.

140
00:10:32,960 --> 00:10:38,140
But there has been no evidence to the contrary.

141
00:10:39,040 --> 00:10:40,660
Proof by hundreds of demons, right?

142
00:10:40,820 --> 00:10:44,880
It's, yes, proof by repetition and trial, repetition and trial.

143
00:10:45,240 --> 00:10:46,720
People like me keep repeating it.

144
00:10:46,720 --> 00:10:48,840
We think it's hard, and we think it's hard.

145
00:10:49,220 --> 00:10:52,800
And other people try, and other people try and break it, and yet they fail.

146
00:10:53,400 --> 00:10:54,920
One day somebody might succeed.

147
00:10:56,000 --> 00:10:58,260
In which case, we're screwed.

148
00:10:59,580 --> 00:11:00,380
At least a little bit.

149
00:11:01,200 --> 00:11:08,120
Because a lot of today's secure communications are sort of based on RSA problem.

150
00:11:08,120 --> 00:11:10,140
Okay?

151
00:11:10,140 --> 00:11:16,040
Any questions?

152
00:11:20,120 --> 00:11:21,000
Just an anecdote.

153
00:11:21,400 --> 00:11:27,540
Until 2002, everybody thought that primality testing, does everybody know what primality

154
00:11:27,540 --> 00:11:28,120
testing means?

155
00:11:28,120 --> 00:11:31,300
I'll give you an integer, tell me if it's primed.

156
00:11:32,040 --> 00:11:33,340
I don't mean like 17.

157
00:11:34,300 --> 00:11:36,940
I mean like a thousand digit integer.

158
00:11:36,940 --> 00:11:41,660
I'll give you a huge integer, and I'll tell you, is it primed?

159
00:11:43,200 --> 00:11:45,060
That problem is called primality testing.

160
00:11:45,140 --> 00:11:48,080
Until 2002, it was believed to be computationally hard.

161
00:11:48,080 --> 00:11:58,400
Well, then in 2002, there was a paper by two very bright Indian students, and a no-good professor.

162
00:11:58,540 --> 00:11:59,940
We just tagged them along.

163
00:12:00,500 --> 00:12:01,460
But the students did the work.

164
00:12:01,540 --> 00:12:02,120
I know it's for a fact.

165
00:12:02,120 --> 00:12:08,740
And they proved, formally, mathematically, that primality testing is, in fact, polynomial.

166
00:12:10,380 --> 00:12:13,900
So, the entire math world was super surprised.

167
00:12:14,760 --> 00:12:15,840
So, these things happen.

168
00:12:17,600 --> 00:12:19,640
That's why we can never be absolutely sure.

169
00:12:21,520 --> 00:12:22,000
Right.

170
00:12:22,380 --> 00:12:22,660
Okay.

171
00:12:22,780 --> 00:12:23,740
So, RSA encryption.

172
00:12:23,920 --> 00:12:24,500
How does it work?

173
00:12:25,160 --> 00:12:27,020
Given modulus N.

174
00:12:27,200 --> 00:12:28,060
N is called the modulus.

175
00:12:28,060 --> 00:12:28,560
Okay?

176
00:12:28,560 --> 00:12:30,340
And that exponent E.

177
00:12:30,720 --> 00:12:34,080
E is called E because it's exponent, and also because it's for encryption.

178
00:12:35,360 --> 00:12:35,520
Right?

179
00:12:35,640 --> 00:12:35,860
E.

180
00:12:37,040 --> 00:12:38,700
And D is for decryption.

181
00:12:38,860 --> 00:12:38,980
Right?

182
00:12:39,020 --> 00:12:40,140
So, that's why we call it D.

183
00:12:40,800 --> 00:12:45,560
To encrypt a message, you simply compute, take a message, raise it to the power E, mod N.

184
00:12:48,100 --> 00:12:50,380
Everybody should know how the mod operator works, right?

185
00:12:50,880 --> 00:12:53,860
So, N to the E, mod N.

186
00:12:54,520 --> 00:12:55,920
The mod part is a crucial one.

187
00:12:55,920 --> 00:13:02,000
If you don't do mod, if you simply take a message and exponentiate to E, first, you'll

188
00:13:02,000 --> 00:13:02,580
have an expansion.

189
00:13:03,380 --> 00:13:03,560
Right?

190
00:13:03,640 --> 00:13:05,420
Because exponentiation expands.

191
00:13:07,060 --> 00:13:07,280
Right?

192
00:13:07,780 --> 00:13:08,560
The message will grow.

193
00:13:08,660 --> 00:13:10,900
And if E is a large number, the message will grow out of bounds.

194
00:13:11,060 --> 00:13:11,860
Way out of bounds.

195
00:13:12,820 --> 00:13:13,520
That's one problem.

196
00:13:13,640 --> 00:13:14,880
The other problem would be insecure.

197
00:13:14,880 --> 00:13:20,080
Because even given a very large number, to take a discrete, sorry, to create a log, not

198
00:13:20,080 --> 00:13:24,000
a discrete one, a log of a number, okay, is easy.

199
00:13:24,640 --> 00:13:26,400
Or take a square root of an number, it's easy.

200
00:13:26,640 --> 00:13:28,140
Take a cube root of a number, it's easy.

201
00:13:28,780 --> 00:13:29,920
And E is public, right?

202
00:13:29,920 --> 00:13:37,120
So, if I give you M to the E, and I say, can you take an E root of that and give me M?

203
00:13:37,840 --> 00:13:38,800
That's not a hard problem.

204
00:13:40,000 --> 00:13:40,680
That's polynomial.

205
00:13:42,140 --> 00:13:49,960
But if I give you M to the E mod N, and ask you to take an E root of that, that's a hard

206
00:13:49,960 --> 00:13:50,260
problem.

207
00:13:50,260 --> 00:13:52,580
So, again, we believe.

208
00:13:55,160 --> 00:13:56,440
So, the magic is here.

209
00:13:57,580 --> 00:13:57,840
Right?

210
00:13:58,020 --> 00:14:08,720
It's difficult, apparently, to take an E root of the cypertext, which is M to the E mod N.

211
00:14:09,200 --> 00:14:15,900
But also, and this is real magic, if you take M to the E mod N, and then raise it to the

212
00:14:15,900 --> 00:14:17,940
power D, you get back M.

213
00:14:17,940 --> 00:14:20,560
Even though E and D are different.

214
00:14:23,080 --> 00:14:23,440
Okay?

215
00:14:26,260 --> 00:14:27,460
There is a reason for this.

216
00:14:28,300 --> 00:14:31,800
So, if you've never, now, to be honest, there's no penalty.

217
00:14:31,960 --> 00:14:35,620
Is anybody here who has not really seen the guts of the public kicker therapy before?

218
00:14:37,120 --> 00:14:37,880
One, two.

219
00:14:38,200 --> 00:14:38,720
Anybody else?

220
00:14:39,400 --> 00:14:39,820
I'm guessing.

221
00:14:40,040 --> 00:14:40,200
Okay.

222
00:14:40,740 --> 00:14:42,960
So, the way you think about public kicker therapy is like this.

223
00:14:43,460 --> 00:14:44,780
This is like what I tell the guts.

224
00:14:44,780 --> 00:14:49,920
Anybody use a U.S. Postal mailbox recently?

225
00:14:50,740 --> 00:14:51,760
Remember those blue boxes?

226
00:14:52,260 --> 00:14:54,580
You touch one inappropriately.

227
00:14:55,260 --> 00:14:55,980
You molest it.

228
00:14:56,260 --> 00:14:57,040
It's a federal offense.

229
00:14:57,640 --> 00:14:58,700
You'll go to federal prison.

230
00:14:59,380 --> 00:14:59,680
But don't.

231
00:15:00,160 --> 00:15:03,160
Now, the interface that the box gives you is what?

232
00:15:03,300 --> 00:15:03,800
A hole.

233
00:15:04,060 --> 00:15:04,860
A slit.

234
00:15:05,120 --> 00:15:05,240
Right?

235
00:15:05,240 --> 00:15:06,340
Open it.

236
00:15:06,460 --> 00:15:09,540
You stick your mail in.

237
00:15:09,700 --> 00:15:10,180
You close it.

238
00:15:10,820 --> 00:15:13,440
Once you throw it in, you can't.

239
00:15:13,560 --> 00:15:14,020
You can't.

240
00:15:14,060 --> 00:15:14,220
Right?

241
00:15:14,320 --> 00:15:16,500
You try to do anything, federal prison.

242
00:15:17,540 --> 00:15:19,540
And if you're not a citizen these days, God knows.

243
00:15:19,660 --> 00:15:19,960
God help.

244
00:15:20,600 --> 00:15:20,720
Yeah.

245
00:15:21,080 --> 00:15:21,520
So.

246
00:15:22,300 --> 00:15:22,780
Bad joke.

247
00:15:22,880 --> 00:15:23,100
I don't know.

248
00:15:23,520 --> 00:15:24,220
Too soon.

249
00:15:24,220 --> 00:15:28,740
So, the thing is, anybody can use a mailbox, right?

250
00:15:30,420 --> 00:15:33,120
You can just come up, open, slide letter in.

251
00:15:33,980 --> 00:15:36,960
To get things out, you need to be a postman with a key.

252
00:15:37,540 --> 00:15:38,480
That's a public decryptor.

253
00:15:39,100 --> 00:15:40,080
Anybody can encrypt.

254
00:15:40,980 --> 00:15:41,180
Right?

255
00:15:41,240 --> 00:15:42,540
The public key interface is public.

256
00:15:43,260 --> 00:15:45,420
But to decrypt, you need to have a private key.

257
00:15:45,420 --> 00:15:48,600
So, this is a trickery with RSA.

258
00:15:50,500 --> 00:15:51,500
Let's look at an example.

259
00:15:51,800 --> 00:15:52,440
You can trust me.

260
00:15:52,500 --> 00:15:52,920
It works.

261
00:15:53,180 --> 00:15:55,620
You can verify in your favorite calculator.

262
00:15:56,200 --> 00:15:57,720
If we pick toy example, right?

263
00:15:57,800 --> 00:15:58,540
P equals Q.

264
00:15:58,620 --> 00:16:00,020
You will never pick such strong numbers.

265
00:16:00,120 --> 00:16:00,360
First one.

266
00:16:00,460 --> 00:16:00,680
Ever.

267
00:16:01,280 --> 00:16:02,440
But this is just a toy example.

268
00:16:02,800 --> 00:16:05,560
If P equals Q, P equals 5, Q equals 7.

269
00:16:05,660 --> 00:16:06,340
These are prime numbers.

270
00:16:06,940 --> 00:16:10,180
P minus 1 times Q minus 1 is 24.

271
00:16:11,540 --> 00:16:12,860
And N is 35.

272
00:16:13,820 --> 00:16:14,580
Still correct?

273
00:16:14,640 --> 00:16:15,120
Of two primes.

274
00:16:15,960 --> 00:16:17,320
We pick E equals 5.

275
00:16:18,840 --> 00:16:19,120
Okay?

276
00:16:20,000 --> 00:16:21,620
I know, silly, but okay.

277
00:16:22,460 --> 00:16:29,540
Then, the inverse of P, mod 24, is 29.

278
00:16:31,540 --> 00:16:32,600
Is that possible?

279
00:16:36,760 --> 00:16:38,180
What's 29 times 5?

280
00:16:40,460 --> 00:16:41,180
145.

281
00:16:41,560 --> 00:16:41,820
Right?

282
00:16:41,820 --> 00:16:46,360
145, mod 24.

283
00:16:53,360 --> 00:16:53,840
Mod 24.

284
00:16:54,840 --> 00:16:55,400
1.

285
00:16:55,400 --> 00:16:59,440
Now, I didn't pick this example.

286
00:16:59,560 --> 00:17:01,320
This is from the Kuroza-Kuroza book.

287
00:17:02,760 --> 00:17:04,400
Why did I pick 29?

288
00:17:06,320 --> 00:17:08,800
I should have picked 5 there instead of 49.

289
00:17:10,560 --> 00:17:10,940
Right?

290
00:17:10,940 --> 00:17:13,960
Because 49 does not exist.

291
00:17:15,960 --> 00:17:17,100
It's greater than 24.

292
00:17:17,100 --> 00:17:20,980
So, actually, in this silly example, which I did not come up with, but I should have really

293
00:17:20,980 --> 00:17:23,680
corrected it, E and D are the same.

294
00:17:23,680 --> 00:17:26,580
It will never happen in real life.

295
00:17:28,580 --> 00:17:33,740
So, that's because 29 is actually 5 mod Z.

296
00:17:33,740 --> 00:17:36,500
So, let's look at the encryption, let's follow along.

297
00:17:36,500 --> 00:17:43,160
Yeah, I want to encrypt the letter I, that's not a 1, that's an M.

298
00:17:43,160 --> 00:17:48,620
And so, I is the 12th letter of the alphabet, so actually, what the message is, it's M is 12.

299
00:17:49,000 --> 00:17:51,900
So, then, you raise it to the power E, which is 29.

300
00:17:52,900 --> 00:17:53,700
Stupid.

301
00:17:53,700 --> 00:17:59,380
You get this number, which, actually, mod N is 17.

302
00:18:00,740 --> 00:18:01,860
So, that's the Cypher case.

303
00:18:03,380 --> 00:18:03,780
17.

304
00:18:04,660 --> 00:18:06,980
Then, when you raise it to the D, again, this is stupid.

305
00:18:07,540 --> 00:18:09,060
It should be, actually, 5.

306
00:18:09,780 --> 00:18:13,940
Raised to the 5, not 29, which, in that case, would be just about as long as that.

307
00:18:14,000 --> 00:18:15,440
Not that number, but as long as that.

308
00:18:15,780 --> 00:18:18,020
It will be 12, which is that.

309
00:18:18,980 --> 00:18:19,320
All right.

310
00:18:19,320 --> 00:18:27,900
So, the whole point is, to convince you, to demonstrate that encryption and decryption are inverses of each other.

311
00:18:28,320 --> 00:18:35,320
Even though you encrypt with one number and decrypt with another number, you get back the original plaintext.

312
00:18:36,340 --> 00:18:45,240
Not only that, but if you first apply the D, meaning that you first decrypt a plaintext,

313
00:18:45,760 --> 00:18:48,060
and then encrypt it, the same thing works.

314
00:18:49,320 --> 00:18:51,920
Which means that encryption and decryption are commutative.

315
00:18:53,780 --> 00:18:55,300
Why is that important?

316
00:18:56,340 --> 00:18:56,880
Anybody know?

317
00:18:59,380 --> 00:19:02,120
Why would you want to decrypt a message that's not encrypted?

318
00:19:04,600 --> 00:19:05,000
No idea?

319
00:19:05,480 --> 00:19:06,920
Do you have the same thing in decrypting?

320
00:19:08,980 --> 00:19:09,580
Yes.

321
00:19:10,580 --> 00:19:11,560
It's true.

322
00:19:12,020 --> 00:19:13,920
If you reverse those, yes.

323
00:19:13,920 --> 00:19:23,500
But on a more serious note, have you all ever heard of signatures?

324
00:19:25,480 --> 00:19:26,380
Digital signatures?

325
00:19:27,500 --> 00:19:36,100
Well, a digital signature is computed by taking a plaintext message, signing it with your private key,

326
00:19:36,100 --> 00:19:40,360
then releasing the message, then releasing the message, and the signature.

327
00:19:41,880 --> 00:19:46,820
Notice in that case, I said releasing the message, not hiding the message.

328
00:19:48,160 --> 00:19:50,020
Public key encryption is about hiding.

329
00:19:51,280 --> 00:19:53,820
Public key signatures are not about hiding the message.

330
00:19:53,960 --> 00:19:56,220
It's to prove that you generated the message.

331
00:19:56,220 --> 00:19:59,120
So let's come back to our classroom example.

332
00:19:59,640 --> 00:20:04,560
You went to my classroom page, a web page, and a canvas, and obtained my public key.

333
00:20:05,600 --> 00:20:07,300
Now you have nothing to tell me.

334
00:20:07,360 --> 00:20:08,560
You're not sending me anything.

335
00:20:08,660 --> 00:20:10,340
But I have something to tell you.

336
00:20:10,340 --> 00:20:13,880
And now what I have to tell you is this class is canceled.

337
00:20:15,400 --> 00:20:15,760
Okay?

338
00:20:16,100 --> 00:20:20,740
Due to low attendance and poor performance, the class is hereby canceled.

339
00:20:20,880 --> 00:20:22,320
Don't come to class next time.

340
00:20:23,420 --> 00:20:26,120
The message sounds a little weird, unhinged, bizarre.

341
00:20:26,380 --> 00:20:26,620
Okay?

342
00:20:27,540 --> 00:20:28,580
Is it really me?

343
00:20:28,900 --> 00:20:34,200
Or is it some hacker in Krakistan, you know, hiding in his mom's basement, sending this?

344
00:20:35,100 --> 00:20:39,520
Well, you verified my signature on the message.

345
00:20:40,340 --> 00:20:48,260
By using my public key to check that the signature was computed with my private key that only I could have known.

346
00:20:49,120 --> 00:20:49,700
Make sense?

347
00:20:50,740 --> 00:20:54,440
In that case, I'm not hiding the message to you all.

348
00:20:55,200 --> 00:20:58,940
You are verifying the origin of the message and its integrity.

349
00:21:00,520 --> 00:21:03,740
So that's where decrypting the plaintext, essentially, is useful.

350
00:21:04,180 --> 00:21:04,320
Yeah?

351
00:21:04,700 --> 00:21:09,060
So in theory, like, you always have had some trust with public key photography,

352
00:21:09,060 --> 00:21:11,400
because you have to have some trusted public key release.

353
00:21:12,400 --> 00:21:12,660
Ah.

354
00:21:13,460 --> 00:21:13,940
Okay.

355
00:21:14,860 --> 00:21:18,980
What you're talking about is how do you distribute public keys.

356
00:21:19,280 --> 00:21:19,460
Right.

357
00:21:19,960 --> 00:21:20,440
Okay.

358
00:21:21,160 --> 00:21:22,440
That's the new headache.

359
00:21:24,200 --> 00:21:27,660
Symmetric photography has this big headache of how do you distribute secret key.

360
00:21:27,840 --> 00:21:29,060
You have to distribute secret.

361
00:21:29,060 --> 00:21:32,060
A little bird has to sit on the shelf and tell you.

362
00:21:32,360 --> 00:21:33,460
God has to talk to you.

363
00:21:33,460 --> 00:21:33,840
I don't know.

364
00:21:33,900 --> 00:21:36,560
I have to meet you in physically, meet you, give you something.

365
00:21:36,840 --> 00:21:40,560
Our phones have to touch NFCs, right, in order to transmit the secret key.

366
00:21:41,080 --> 00:21:44,260
But with public key, the problem is not as bad, right?

367
00:21:44,720 --> 00:21:47,940
It's more like, do I trust this is your public key?

368
00:21:48,300 --> 00:21:48,480
Right.

369
00:21:48,480 --> 00:21:50,860
So, very good question.

370
00:21:51,120 --> 00:21:52,360
That is very true.

371
00:21:52,440 --> 00:21:54,140
It's called a public key distribution problem.

372
00:21:54,780 --> 00:21:59,640
Again, I emphasize, it is not nearly as nasty as the symmetric key distribution problem.

373
00:22:00,620 --> 00:22:04,740
Because what we're distributing here is not fundamentally secret, right?

374
00:22:05,320 --> 00:22:08,160
What we're distributing here has to be reliable.

375
00:22:08,320 --> 00:22:14,380
It has to be like, yes, it has to be my public key, not some other person's public key.

376
00:22:14,380 --> 00:22:17,300
So, well, we're coming to that.

377
00:22:17,540 --> 00:22:23,940
But to make a shortcut, you have to basically trust the place you give it from.

378
00:22:24,500 --> 00:22:30,340
So, of course, if I give it to you personally, yes, it's mine, but then how is this different from symmetric?

379
00:22:31,780 --> 00:22:39,240
If you trust the UCI ICS webpage, you go there and say my public key is there, yeah, fine.

380
00:22:39,240 --> 00:22:47,340
If you trust Canvas, right, and I post my public key there and you trust that I authenticate it, it all has to be like a chain of trust, right?

381
00:22:47,640 --> 00:22:58,400
That if the Canvas authenticated me based on my UCI credentials and blah, blah, blah, and therefore only I could have posted my public key and my Canvas page, et cetera, et cetera.

382
00:22:59,520 --> 00:23:01,960
It's only going to be as secure as the weakest link.

383
00:23:01,960 --> 00:23:06,180
So, there's no, like, protocol that exists that would not be.

384
00:23:06,360 --> 00:23:08,340
Ah, there are.

385
00:23:09,440 --> 00:23:10,880
There are protocols.

386
00:23:12,760 --> 00:23:13,680
There are.

387
00:23:15,920 --> 00:23:22,480
But ultimately, there's no, like, Big Bang, like some elegant description of how all this is done.

388
00:23:22,700 --> 00:23:23,760
Think about your browser.

389
00:23:24,320 --> 00:23:31,680
What happens when you install your browser on, let's say, you buy a new computer and it comes with some god-awful thing like Safari?

390
00:23:31,960 --> 00:23:37,960
I don't know, I don't know, or worse yet before you used to be an Internet Explorer, before you died in that time you got it.

391
00:23:38,500 --> 00:23:45,060
And, you know, and then you wanted to install Chrome, or Tor, perhaps, or Brave, I don't know.

392
00:23:45,580 --> 00:23:46,600
And what would you do?

393
00:23:47,060 --> 00:23:57,760
You went to that, you used a very crappy browser that you got there, right, to go somewhere and, like, download the code that did this game, I didn't try to package it, depending on what's that business.

394
00:23:57,760 --> 00:24:00,380
And you had to trust that place.

395
00:24:01,200 --> 00:24:09,360
And then, when you install the browser, assuming you're kind of like, okay, I trust that, it came with, like, some called roots of trust.

396
00:24:10,040 --> 00:24:21,120
With these kind of, what's called CAs, right, Certification Authority keys that certify all the other keys for all the websites that you deal with using HTTPS or TLS, right?

397
00:24:21,120 --> 00:24:30,480
So, you see, now, in operation today, when you use your browser, 99% of the time, you see HTTPS, if you pay attention.

398
00:24:31,220 --> 00:24:37,720
And that means you're using TLS with whatever web server you're talking to.

399
00:24:37,720 --> 00:24:46,040
But the original connection established, when you first went to that web server, had to have what's called a handshake, and we'll cover that later.

400
00:24:47,300 --> 00:24:50,540
And that handshake involved, public key, of that web server.

401
00:24:51,460 --> 00:24:52,100
Not of yours.

402
00:24:52,260 --> 00:24:53,660
Usually, you are not involved.

403
00:24:53,720 --> 00:24:55,320
You don't have a public key like HTTPS.

404
00:24:55,400 --> 00:24:55,920
I mean, you can't.

405
00:24:56,040 --> 00:24:56,700
It's obscure.

406
00:24:57,280 --> 00:24:58,960
Usually, you want to authenticate your web server.

407
00:24:58,960 --> 00:25:09,140
You want to go, I'm going to Wells Fargo, and not, you know, .com, and not whatfargo.cn, or .fargo.kr, I don't know, North Korea somewhere, right?

408
00:25:09,480 --> 00:25:11,320
So, that's important.

409
00:25:12,100 --> 00:25:19,680
And that's all based on the roots of trust that the original browser package came with, so, get that in?

410
00:25:20,080 --> 00:25:20,280
Yeah.

411
00:25:20,800 --> 00:25:21,020
Yeah.

412
00:25:22,700 --> 00:25:26,740
Anyway, so, back to RSA, where does it work?

413
00:25:26,740 --> 00:25:37,780
Well, there's lots of number-theoretic results, and I'm going to explore you with, but essentially, the reason, remember, we picked E and D, so they're inverses of each other, mod Z.

414
00:25:38,160 --> 00:25:42,640
Well, it turns out, when you do things, you're modular, mod N, right?

415
00:25:43,260 --> 00:25:52,660
So, if you say, take X to the Y, you raise X to the power of Y, mod N, in the exponent, things are also modular.

416
00:25:52,660 --> 00:25:56,760
But, not mod N, they're mod what's called phi of N, or Z.

417
00:25:57,780 --> 00:25:59,520
See, mod V minus 1 times Q minus 1.

418
00:25:59,700 --> 00:26:02,320
So, everything gets wrapped around in the exponent.

419
00:26:02,320 --> 00:26:12,780
And so, when you take X and raise it to the power of E, and then again raise it to the power of D, the two exponents multiplied, right?

420
00:26:12,980 --> 00:26:13,740
E times D.

421
00:26:14,560 --> 00:26:18,660
But, we pick them so that E times D, mod E minus 5 times Q minus 1 is 1.

422
00:26:19,840 --> 00:26:20,860
And that's the explanation.

423
00:26:21,920 --> 00:26:22,200
Right?

424
00:26:22,200 --> 00:26:30,120
To use RSA, you don't need to understand this.

425
00:26:31,300 --> 00:26:33,660
You just need to see the result, okay, that it works.

426
00:26:34,420 --> 00:26:38,580
And it's been working for the last 40 years, almost 40 years.

427
00:26:38,580 --> 00:26:51,320
So, this is what I alluded to before, is that you can use the encryption key, then decrypt, you know, using the private key.

428
00:26:51,380 --> 00:26:57,300
Or you can first use the private key, and then follow that by decryption, sort of decryption with a public key.

429
00:26:58,280 --> 00:27:02,740
But then, when you use RSA for digital signatures, that's exactly what happens.

430
00:27:02,740 --> 00:27:08,160
So, yes, I take a message, I apply the private key to the message.

431
00:27:08,900 --> 00:27:12,000
I take that result, right?

432
00:27:12,640 --> 00:27:14,980
This decryption of the message.

433
00:27:15,620 --> 00:27:19,760
And I send it to you, together with the actual plain text of the message.

434
00:27:20,680 --> 00:27:26,300
So, now you have a plain text of the message, and decryption of the message with my private key.

435
00:27:27,640 --> 00:27:27,920
Yeah?

436
00:27:28,100 --> 00:27:28,740
With me so far?

437
00:27:28,740 --> 00:27:32,720
Now, then what you do is to verify that it really comes from me.

438
00:27:34,000 --> 00:27:40,000
You take the decryption of the message, encrypt it using E.

439
00:27:41,240 --> 00:27:43,700
Remember, E reverses D, D reverses E.

440
00:27:44,000 --> 00:27:45,140
So, you should get back the message.

441
00:27:45,820 --> 00:27:47,040
You compare it to the plain text.

442
00:27:47,160 --> 00:27:47,800
Is it the same?

443
00:27:48,500 --> 00:27:50,600
If it's the same, only I could have sent it.

444
00:27:51,240 --> 00:27:52,800
And it has not been modified.

445
00:27:53,700 --> 00:27:53,900
Okay?

446
00:27:55,020 --> 00:27:58,040
So, that's the basics of digital signatures.

447
00:27:58,740 --> 00:28:02,420
So, and data integrity.

448
00:28:02,700 --> 00:28:08,660
So, typically, we need both data integrity and origin authentication.

449
00:28:09,300 --> 00:28:09,440
Right?

450
00:28:09,820 --> 00:28:13,420
These terms are trivial, right?

451
00:28:13,640 --> 00:28:16,620
Integrity means something has not been modified.

452
00:28:17,440 --> 00:28:18,740
It has integrity.

453
00:28:18,740 --> 00:28:23,580
So, and origin authentication means it comes from a place I think it comes from.

454
00:28:24,780 --> 00:28:28,340
Like, if GeneSutic sign it, well, then you know it comes from GeneSutic.

455
00:28:28,420 --> 00:28:28,840
I can verify.

456
00:28:28,840 --> 00:28:29,320
Okay?

457
00:28:29,320 --> 00:28:39,000
So, but what we don't do is we don't use digital signatures on messages.

458
00:28:39,000 --> 00:28:44,600
Because messages, files, can be very long.

459
00:28:45,880 --> 00:28:48,720
And digital signatures are based on public key cryptography.

460
00:28:48,720 --> 00:28:54,640
So, if we're going to exponentiate, and trust me, this is the problem with public key cryptography.

461
00:28:54,800 --> 00:29:00,540
Not only, I mean, there are other problems, but one of them is the usage problem is that it's slow.

462
00:29:00,540 --> 00:29:11,320
It does not use efficient primitives like XORs and SHIFTS and ORs and ANDs, like the symmetric cypress.

463
00:29:11,460 --> 00:29:13,860
It uses large number arithmetic.

464
00:29:14,980 --> 00:29:20,680
A large number arithmetic requires all kinds of tricks to be implemented efficiently in software.

465
00:29:20,680 --> 00:29:26,860
And so, anything that is in public key world can never match the speed of symmetric cryptography.

466
00:29:28,340 --> 00:29:28,740
No way.

467
00:29:29,000 --> 00:29:29,440
No chance.

468
00:29:30,540 --> 00:29:32,600
It's several orders of magnitude slow.

469
00:29:33,000 --> 00:29:39,980
So, using public key cryptography on bulk data is wasteful and senseless.

470
00:29:40,840 --> 00:29:41,720
So, we don't do that.

471
00:29:43,040 --> 00:29:49,140
So, in particular, when it comes to signing a message, or signing a file, or signing a video, right?

472
00:29:49,140 --> 00:29:57,400
Or signing a software distribution, which is, by the way, when you get, you know, your next software update for the operating system, it's signed.

473
00:29:58,480 --> 00:30:03,980
And the delay you experience often in, like, a pre-installation is the verification of the signature.

474
00:30:05,420 --> 00:30:10,520
So, we don't sign it directly with RSA or anything like that.

475
00:30:11,040 --> 00:30:14,340
What we do is compute a hash function over the thing.

476
00:30:14,340 --> 00:30:18,800
And a hash function is essentially like an integrity token.

477
00:30:20,100 --> 00:30:21,940
And then we sign the hash function.

478
00:30:23,260 --> 00:30:23,780
Make sense?

479
00:30:26,480 --> 00:30:27,840
Can I ask one question?

480
00:30:28,100 --> 00:30:28,280
Yeah.

481
00:30:28,420 --> 00:30:31,180
What output should be a fixed length value HM?

482
00:30:31,200 --> 00:30:31,540
The who?

483
00:30:32,020 --> 00:30:35,780
What output should be a fixed length value HM rather than...

484
00:30:35,780 --> 00:30:37,500
Ah, fixed length.

485
00:30:37,620 --> 00:30:44,660
Well, because we want to make sure that what we compute is a canonical length, right?

486
00:30:44,740 --> 00:30:52,700
If we vary the length, if, like, a very large input produces a larger output, you know, we cannot write standard code, right?

487
00:30:52,700 --> 00:30:53,240
It's harder.

488
00:30:53,240 --> 00:31:01,620
But it can also be, like, we hash a long value into a short value, like, if we have some...

489
00:31:01,620 --> 00:31:08,060
Well, remember, all of this is done because it's not humans who operate on this, right?

490
00:31:08,100 --> 00:31:12,220
It's software and no hardware that operates on these hash functions, computes them.

491
00:31:12,220 --> 00:31:21,700
So, in the implementation, that would compute variable length output would be much strictly less efficient than that that computes a standard length output.

492
00:31:22,420 --> 00:31:27,840
So, if we are not considering efficient, but purely security is a bad...

493
00:31:27,840 --> 00:31:31,360
Eh, purely security.

494
00:31:34,860 --> 00:31:38,400
Well, for pure security, you may not really need...

495
00:31:38,400 --> 00:31:40,120
You can just sign every block.

496
00:31:40,120 --> 00:31:42,120
Right?

497
00:31:42,120 --> 00:31:44,800
You can just sign every block using publicly crypto.

498
00:31:44,800 --> 00:31:46,000
You don't need a hash function.

499
00:31:46,000 --> 00:31:52,260
See, the hash function, the beauty of having a hash function is the function acts as a checksum of sort, right?

500
00:31:52,260 --> 00:31:57,220
As an integrity protector of the message.

501
00:31:57,220 --> 00:32:04,360
It allows you to detect manipulations of the message without having to inspect every block.

502
00:32:04,360 --> 00:32:13,920
Because what I think is that, for example, for some encrypto algorithm, for example, RSA, I think they encrypt information with different length, right?

503
00:32:13,920 --> 00:32:14,920
Yes.

504
00:32:14,920 --> 00:32:15,920
That's not a problem.

505
00:32:15,920 --> 00:32:16,920
Yes.

506
00:32:16,920 --> 00:32:17,920
That's not a problem.

507
00:32:17,920 --> 00:32:18,920
Block site, whether it's a symmetric key, crypto, or public key.

508
00:32:18,920 --> 00:32:20,920
But you never want to use public key more than absolutely necessary.

509
00:32:20,920 --> 00:32:21,920
Yes.

510
00:32:21,920 --> 00:32:28,920
Because it's several orders of magnitude slower.

511
00:32:28,920 --> 00:32:35,920
So, when you want to protect integrity of a message or a file of data, and that data is more than one block long, which is whatever the block is in the same order, you want it's much cheaper to compute a hash function.

512
00:32:35,920 --> 00:33:04,920
Standard length, standard length, standard size, where standard varies, right?

513
00:33:04,920 --> 00:33:05,920
Depending on what's that.

514
00:33:05,920 --> 00:33:08,920
20 years ago, 128 bits were okay.

515
00:33:08,920 --> 00:33:09,920
Right.

516
00:33:09,920 --> 00:33:10,920
Now, at least 256 bits.

517
00:33:10,920 --> 00:33:11,920
Okay?

518
00:33:11,920 --> 00:33:13,920
And that's a good reason for that.

519
00:33:13,920 --> 00:33:21,920
So, you want to agree on the implementation of a hash function that produces a fixed length

520
00:33:21,920 --> 00:33:25,920
output regardless of the length of the input, right?

521
00:33:25,920 --> 00:33:29,920
Because that facilitates faster, more efficient implementation.

522
00:33:29,920 --> 00:33:33,920
And also, the security level remains the same, right?

523
00:33:33,920 --> 00:33:40,920
Because what we don't have time to cover is hash functions that are chosen for many reasons.

524
00:33:40,920 --> 00:33:43,920
One of them is the length of the output.

525
00:33:43,920 --> 00:33:50,920
If the length of the output is too short, then functions become susceptible to something called the birthday paradox.

526
00:33:50,920 --> 00:33:53,920
Has anybody heard of the birthday paradox?

527
00:33:53,920 --> 00:33:54,920
Some of them have.

528
00:33:54,920 --> 00:33:55,920
Okay?

529
00:33:55,920 --> 00:34:07,920
Anyway, the common wisdom is the hash function has to be roughly double what an encryption should

530
00:34:07,920 --> 00:34:08,920
be for a block cipher.

531
00:34:08,920 --> 00:34:19,920
So, for example, today, we're okay using a 128-bit encryption key for a block cipher.

532
00:34:19,920 --> 00:34:27,920
But the minimum hash length we use today, I think, should be like 256 or so.

533
00:34:27,920 --> 00:34:28,920
Right?

534
00:34:28,920 --> 00:34:31,920
And that's one of the reasons is the birthday paradox.

535
00:34:31,920 --> 00:34:34,920
Which, if you all like, I could cover.

536
00:34:34,920 --> 00:34:37,920
Sounds like a lot of you don't know what it is.

537
00:34:37,920 --> 00:34:46,920
But anyway, so it is important to compute the canonical fixed length output regardless of the input.

538
00:34:46,920 --> 00:34:49,920
And these three properties are very important.

539
00:34:49,920 --> 00:34:51,920
So, that is for convenience.

540
00:34:51,920 --> 00:34:52,920
Right?

541
00:34:52,920 --> 00:34:55,920
For convenience, it's nice to have a fixed length output.

542
00:34:55,920 --> 00:34:56,920
Okay?

543
00:34:56,920 --> 00:35:01,920
So, you could also say, well, why not compute a minimum 256 and go from there.

544
00:35:01,920 --> 00:35:03,920
And then for a long way, you could.

545
00:35:03,920 --> 00:35:06,920
But again, it will not be efficient.

546
00:35:06,920 --> 00:35:13,920
But these three important properties must hold for a function to be a cryptographic hash function.

547
00:35:13,920 --> 00:35:18,920
So, first of all, it must be one-way.

548
00:35:18,920 --> 00:35:23,920
One-wayness means that if I give you an output of a hash function,

549
00:35:23,920 --> 00:35:28,920
it must be computationally hard for you to come up with input.

550
00:35:28,920 --> 00:35:30,920
Unless I give you the input.

551
00:35:30,920 --> 00:35:31,920
Okay?

552
00:35:31,920 --> 00:35:32,920
So again, right?

553
00:35:32,920 --> 00:35:40,920
Given z, finding x such that h of x is z must be computationally different.

554
00:35:40,920 --> 00:35:41,920
Okay?

555
00:35:41,920 --> 00:35:44,920
This is also important.

556
00:35:44,920 --> 00:35:46,920
They're all equally important.

557
00:35:46,920 --> 00:35:55,920
Given x, finding another value, y is a different value, such that they have what's called a collision,

558
00:35:55,920 --> 00:35:57,920
a hash function collision.

559
00:35:57,920 --> 00:36:02,920
So, finding another value such that h of x equals h of y.

560
00:36:02,920 --> 00:36:07,920
That process of finding another y must be computationally hard.

561
00:36:07,920 --> 00:36:08,920
Okay?

562
00:36:08,920 --> 00:36:16,920
Now, we know for a fact that collisions exist, right?

563
00:36:16,920 --> 00:36:25,920
Because a hash function, as we just discussed, takes on arbitrary input and reduces it to a fixed length output.

564
00:36:25,920 --> 00:36:29,920
It is impossible not to have collisions, right?

565
00:36:29,920 --> 00:36:31,920
A block cipher will not have collisions, right?

566
00:36:31,920 --> 00:36:37,920
Because it takes a plaintext and with a given key transforms into a ciphertext.

567
00:36:37,920 --> 00:36:39,920
You cannot have collisions.

568
00:36:39,920 --> 00:36:44,920
It's impossible for two plaintexts under the same key to produce the same ciphertext.

569
00:36:44,920 --> 00:36:47,920
Do you see that?

570
00:36:47,920 --> 00:36:49,920
But here, collisions are given.

571
00:36:49,920 --> 00:36:50,920
They exist.

572
00:36:50,920 --> 00:36:53,920
But finding them must be hard.

573
00:36:55,920 --> 00:36:56,920
Okay?

574
00:36:56,920 --> 00:36:58,920
And this last one is subtle.

575
00:36:58,920 --> 00:37:01,920
And the subtle is different from this.

576
00:37:01,920 --> 00:37:07,920
Here, this last third product, this third product, this is called strong collision resistance.

577
00:37:07,920 --> 00:37:09,920
This is called weak collision resistance.

578
00:37:09,920 --> 00:37:11,920
This is called strong collision resistance.

579
00:37:11,920 --> 00:37:14,920
Here, you are not given x.

580
00:37:14,920 --> 00:37:21,920
You are said, you are told, find me any two that collide.

581
00:37:21,920 --> 00:37:27,920
Any two distinct values that produce the same hash output.

582
00:37:27,920 --> 00:37:30,920
That's called strong collision resistance.

583
00:37:30,920 --> 00:37:36,920
All today's hash functions that you will come across have all of these properties.

584
00:37:36,920 --> 00:37:39,920
Now, are they proven?

585
00:37:39,920 --> 00:37:40,920
Formally, mathematically?

586
00:37:40,920 --> 00:37:41,920
No.

587
00:37:41,920 --> 00:37:46,920
They are beaten to death with testing and evaluation and so on.

588
00:37:46,920 --> 00:37:49,920
But they are not formally mathematically proven.

589
00:37:49,920 --> 00:37:51,920
That's how the world is.

590
00:37:51,920 --> 00:38:01,920
So if you look at something like IP, right, to the IPv4.

591
00:38:01,920 --> 00:38:04,920
So IPv4 has what's called header checksum.

592
00:38:04,920 --> 00:38:08,920
Have you ever seen it in network class maybe?

593
00:38:08,920 --> 00:38:10,920
It's a very trivial checksum, right?

594
00:38:10,920 --> 00:38:16,920
It's just like a once complement and once complement of summation of all the words in the header.

595
00:38:16,920 --> 00:38:19,920
And so checksums are weak hash.

596
00:38:19,920 --> 00:38:23,920
We don't, of course, use the prescriptor guide to cache because they have collisions.

597
00:38:23,920 --> 00:38:24,920
Right?

598
00:38:24,920 --> 00:38:38,920
And this is just an example of how if you use insufficiently long or trivial checksums in place of a real hash function, it's easy to find collisions.

599
00:38:38,920 --> 00:38:45,920
Okay, so let's come back to another real word application, which is message authentication codes.

600
00:38:45,920 --> 00:38:48,920
Now, this is not to be confused with digital signatures.

601
00:38:48,920 --> 00:38:49,920
Right?

602
00:38:49,920 --> 00:38:50,920
This is symmetric crypto.

603
00:38:50,920 --> 00:38:55,920
And this is what happens when Alice and Bob share a secret.

604
00:38:55,920 --> 00:38:56,920
Okay?

605
00:38:56,920 --> 00:39:03,920
And this is, in fact, what happens in TLS, right, after the initial TLS entry or in IPsec after the keys down.

606
00:39:03,920 --> 00:39:18,920
Alice has a secret, Bob has the same secret, and Alice wants to send a message to Bob.

607
00:39:18,920 --> 00:39:23,920
Now, in this example, the message M in deep blue is not encrypted.

608
00:39:23,920 --> 00:39:26,920
That's because encryption isn't always important, right?

609
00:39:26,920 --> 00:39:38,920
In some cases, the message is not confidential, but Bob wants to make sure that the message hasn't been modified in transit and really comes from Alice.

610
00:39:38,920 --> 00:39:39,920
So what happens here?

611
00:39:39,920 --> 00:39:45,920
Well, Alice has a secret key K. Bob presumably has the same secret key K.

612
00:39:45,920 --> 00:39:57,920
The message is hashed, okay, and the message and the hash of the message and the key is sent along.

613
00:39:57,920 --> 00:40:04,920
So you see the blue part, the green part, that gets sent over the internet or whatever communication channel.

614
00:40:04,920 --> 00:40:10,920
The Bob receives them and then recomputes the hash and compares to itself.

615
00:40:10,920 --> 00:40:13,920
So now, again, keep in mind, this is not a digital signature.

616
00:40:13,920 --> 00:40:17,920
This is message authentication code with symmetric character.

617
00:40:17,920 --> 00:40:18,920
Okay?

618
00:40:18,920 --> 00:40:21,920
Now, in the real world, this is what they use.

619
00:40:21,920 --> 00:40:29,920
This is actually a standard canonical way of computing a key-based, symmetric key-based MAC.

620
00:40:29,920 --> 00:40:38,920
It's used all over the place in many different purposes, HMAC, hashMAC, and it involves this, right?

621
00:40:38,920 --> 00:40:42,920
You take a message, M, you see the message M over there on the red.

622
00:40:42,920 --> 00:40:47,920
The very first thing you do is you take the secret key, XOR it with a constant.

623
00:40:47,920 --> 00:40:52,920
iPad is a constant, not an Apple device.

624
00:40:52,920 --> 00:40:53,920
You XOR it with a constant.

625
00:40:53,920 --> 00:40:55,920
The constant is public.

626
00:40:55,920 --> 00:41:02,920
And then you hash that the result of an XOR concatenated with a message.

627
00:41:02,920 --> 00:41:04,920
Then you take the result of that.

628
00:41:04,920 --> 00:41:08,920
That returns a fixed length result, right?

629
00:41:08,920 --> 00:41:09,920
This H.

630
00:41:09,920 --> 00:41:18,920
And then you take the same key, XOR it with an outer path, concatenated with that result,

631
00:41:18,920 --> 00:41:19,920
and hash it again.

632
00:41:19,920 --> 00:41:21,920
So there's an inner hash and an outer hash.

633
00:41:21,920 --> 00:41:27,920
The inner hash is long, meaning it computes over the entire message M, and the outer hash

634
00:41:27,920 --> 00:41:29,920
just computes over two values.

635
00:41:29,920 --> 00:41:35,920
And that's supposed to resist a lot of attacks and so on.

636
00:41:35,920 --> 00:41:40,920
So this is, you're going to implement a M, a scheme that needs a message authentication code.

637
00:41:40,920 --> 00:41:42,920
This is what you should use.

638
00:41:42,920 --> 00:41:47,920
On inventor-owned.

639
00:41:47,920 --> 00:41:55,920
Alright, so for hash functions, historically, like when I was growing up, essentially we used MD5.

640
00:41:55,920 --> 00:42:01,920
Now, if you see MD5 run away, because that's not secure for a number of years.

641
00:42:01,920 --> 00:42:04,920
It was only 128 hits long.

642
00:42:04,920 --> 00:42:11,920
Insecurity of it was, essentially, its resistance to the birth repair was about 2 to the 64,

643
00:42:11,920 --> 00:42:12,920
which is considered insecure.

644
00:42:12,920 --> 00:42:20,920
Which means it takes 2 to the 64 trials to find, on average, to find a collision in MD5.

645
00:42:20,920 --> 00:42:23,920
Today, we use SHA-2 and SHA-3.

646
00:42:23,920 --> 00:42:30,920
SHA-2 is about 20 years old, more than 20 years old, but it's a US standard.

647
00:42:30,920 --> 00:42:33,920
You want to do business with the government, you must use it.

648
00:42:33,920 --> 00:42:37,920
If you want to get a stamp of like, what is it, ISO certification,

649
00:42:37,920 --> 00:42:43,920
and at any company you work for using secure hash functions, you must adhere to this standard.

650
00:42:43,920 --> 00:42:52,920
So, SHA-2 is a very flexible hash function, so is SHA-3, which is completely better, but slower.

651
00:42:52,920 --> 00:43:02,920
So, it works with, SHA-2 works with 160, 224, 256, 384, 512 outputs.

652
00:43:02,920 --> 00:43:10,920
That means, coming back to your question, with this hash function, you can configure it to produce output that you want.

653
00:43:10,920 --> 00:43:17,920
Now, you cannot pick 259 if you want more, but you can pick from those.

654
00:43:17,920 --> 00:43:24,920
So, if you need something faster, with smaller hashes, right, because maybe bandwidth or storage is an issue, you would do this.

655
00:43:24,920 --> 00:43:32,920
If you need something super secure, that will be secure for like, I don't know, 20 years, you'll probably want to pick 512.

656
00:43:32,920 --> 00:43:33,920
Okay?

657
00:43:33,920 --> 00:43:37,920
This is more for efficiency.

658
00:43:37,920 --> 00:43:38,920
Right?

659
00:43:38,920 --> 00:43:43,920
Here, that, varying the block size means how many, how many bits at a time does the function process?

660
00:43:43,920 --> 00:43:49,920
Because the hash function does not swallow a message as a whole.

661
00:43:49,920 --> 00:43:55,920
It, like, like, like ciphers, like block ciphers, it processes one block at a time.

662
00:43:55,920 --> 00:43:56,920
Okay?

663
00:43:56,920 --> 00:43:59,920
So, this is just a block size.

664
00:43:59,920 --> 00:44:01,920
It's not so much security relevant.

665
00:44:01,920 --> 00:44:02,920
Right?

666
00:44:02,920 --> 00:44:03,920
It's more like how efficient it is.

667
00:44:03,920 --> 00:44:04,920
Okay?

668
00:44:04,920 --> 00:44:05,920
Go ahead, question.

669
00:44:05,920 --> 00:44:10,920
What do you mean by SHA-3 strictly better?

670
00:44:10,920 --> 00:44:13,920
Well, it's better because it's redesigned.

671
00:44:13,920 --> 00:44:14,920
Right?

672
00:44:14,920 --> 00:44:18,920
So, it's not like they were, as I said, there were no, like, specific weaknesses found in SHA-2.

673
00:44:18,920 --> 00:44:21,920
But, these functions tend to age.

674
00:44:21,920 --> 00:44:26,920
And to describe, if you ask me, like, why and how, I really don't know.

675
00:44:26,920 --> 00:44:32,920
Because, because designing hash functions is like designing symmetric ciphers, they're very

676
00:44:32,920 --> 00:44:35,920
similar principles using designing both.

677
00:44:35,920 --> 00:44:37,920
That's like, not a science.

678
00:44:37,920 --> 00:44:39,920
That's an art.

679
00:44:39,920 --> 00:44:45,920
And, there's probably, like, a couple hundred people in the world who are good at it.

680
00:44:45,920 --> 00:44:50,920
There are people who do it, but only about a couple hundred people who will do it well.

681
00:44:50,920 --> 00:44:54,920
And so, they typically, these designs come from, like, well-known, and there's not, like,

682
00:44:54,920 --> 00:44:55,920
one genius behind any of them.

683
00:44:55,920 --> 00:44:57,920
There's usually a team of people.

684
00:44:57,920 --> 00:44:59,920
And, they're, they're repeatedly good at it.

685
00:44:59,920 --> 00:45:00,920
Right?

686
00:45:00,920 --> 00:45:01,920
They've come up with, like, several designs.

687
00:45:01,920 --> 00:45:02,920
I know some of them.

688
00:45:02,920 --> 00:45:04,920
And, they're very specialized breed.

689
00:45:04,920 --> 00:45:08,920
So, they have, you know, it's like artists.

690
00:45:08,920 --> 00:45:09,920
Right?

691
00:45:09,920 --> 00:45:11,920
You don't know how, how they come up with what stuff they do.

692
00:45:11,920 --> 00:45:14,920
But, generally, they have, I mean, they have to demonstrate everything.

693
00:45:14,920 --> 00:45:17,920
So, these designs are public.

694
00:45:17,920 --> 00:45:18,920
Everything is specified.

695
00:45:18,920 --> 00:45:19,920
There's nothing secret.

696
00:45:19,920 --> 00:45:23,920
Some of the criteria, why they take this over that, they might only know.

697
00:45:23,920 --> 00:45:25,920
But, the designs are fully open.

698
00:45:25,920 --> 00:45:28,920
And so, whenever they are, before they are standardized, right?

699
00:45:28,920 --> 00:45:30,920
Before, well before, there's a competition.

700
00:45:30,920 --> 00:45:35,920
Typically, the U.S. government, when it wants to have a standard for either encryption,

701
00:45:35,920 --> 00:45:38,920
or hashing, or signature, they open what's called a competition.

702
00:45:38,920 --> 00:45:39,920
It's worldwide.

703
00:45:39,920 --> 00:45:45,920
And, anybody in the world can enter and propose a candidate encryption function, or hash function.

704
00:45:45,920 --> 00:45:53,920
And, in fact, this, I think both of these, are not from the U.S.

705
00:45:53,920 --> 00:45:54,920
The U.S.

706
00:45:54,920 --> 00:45:59,920
In fact, the AES, the advanced encryption stadium, we all used to be, also, is not from the U.S.

707
00:45:59,920 --> 00:46:00,920
It originates from Belgium.

708
00:46:00,920 --> 00:46:03,920
So, and then, anyways, it's like the American Idol.

709
00:46:03,920 --> 00:46:11,920
I mean, it's a circuit competition with several rounds and eliminations.

710
00:46:11,920 --> 00:46:14,920
And, in the end, only one wins.

711
00:46:18,920 --> 00:46:19,920
Okay.

712
00:46:19,920 --> 00:46:25,920
So, yeah, this one is, has more flexibility with block sizes, you see.

713
00:46:25,920 --> 00:46:28,920
I don't know why it has these particular features, right?

714
00:46:28,920 --> 00:46:29,920
Yeah.

715
00:46:29,920 --> 00:46:31,920
From 576 to 152.

716
00:46:31,920 --> 00:46:35,920
As far as output, you see, it does not go beyond, but it's supposed to be better.

717
00:46:35,920 --> 00:46:38,920
It, it, it, it obviates a hundred, it does not do 160 anymore.

718
00:46:38,920 --> 00:46:47,920
Output because, you can see this, because 160-bit output would be 2 to the 80 resistant.

719
00:46:47,920 --> 00:46:51,920
First, the attacks, and 2 to the 80 is no longer considered secure, like, putting up five,

720
00:46:51,920 --> 00:46:52,920
six years from now.

721
00:46:52,920 --> 00:47:07,920
So, FYI, today, if you're going to use encryption, 80 bits of entropy, 80-bit key, assuming it's random,

722
00:47:07,920 --> 00:47:10,920
is the absolute minimum you should use.

723
00:47:10,920 --> 00:47:11,920
The absolute minimum.

724
00:47:11,920 --> 00:47:13,920
And that's just for short term.

725
00:47:13,920 --> 00:47:16,920
If you look for long term secrecy, you should not use 80 bits.

726
00:47:16,920 --> 00:47:17,920
You should not use 80 bits.

727
00:47:17,920 --> 00:47:19,920
You should use at least 128 bits.

728
00:47:19,920 --> 00:47:20,920
Yeah.

729
00:47:20,920 --> 00:47:21,920
Only.

730
00:47:21,920 --> 00:47:22,920
All right.

731
00:47:22,920 --> 00:47:28,920
So, the digital signatures, what I already mentioned before, basically, they are sort of

732
00:47:28,920 --> 00:47:33,920
people say, people say, again, these are slides I, from, from the book, from the Crows and

733
00:47:33,920 --> 00:47:34,920
Rose book.

734
00:47:34,920 --> 00:47:38,920
They are, to a point, slightly analogous to handwritten signatures.

735
00:47:38,920 --> 00:47:39,920
Right?

736
00:47:39,920 --> 00:47:41,920
The way that we sign them.

737
00:47:41,920 --> 00:47:44,920
But they're actually not really.

738
00:47:44,920 --> 00:47:49,920
In a sense that, if our handwritten signatures, indeed, may be unique.

739
00:47:49,920 --> 00:47:50,920
Right?

740
00:47:50,920 --> 00:47:53,920
Especially if you record the patterns of movement and pressure.

741
00:47:53,920 --> 00:47:54,920
You know, that's true.

742
00:47:54,920 --> 00:47:59,920
But when we do sign a document, and remember signing a document in real life, like, actual

743
00:47:59,920 --> 00:48:03,920
physical document, what is it actually you sign?

744
00:48:03,920 --> 00:48:08,920
Like, I don't know, you sign some official legal document.

745
00:48:08,920 --> 00:48:09,920
What is it you sign?

746
00:48:09,920 --> 00:48:12,920
Well, generally, you sign a corner of it.

747
00:48:12,920 --> 00:48:13,920
Right?

748
00:48:13,920 --> 00:48:14,920
Some place on a page.

749
00:48:14,920 --> 00:48:17,920
And maybe there is a document that has 20 pages, but you don't sign for every page.

750
00:48:17,920 --> 00:48:18,920
Right?

751
00:48:18,920 --> 00:48:22,920
And even if you do sign every page, you don't sign the page.

752
00:48:22,920 --> 00:48:24,920
You sign a part of the page.

753
00:48:24,920 --> 00:48:25,920
Somewhere.

754
00:48:25,920 --> 00:48:30,920
Well, how difficult is it to, I don't know, get rid of your signature?

755
00:48:30,920 --> 00:48:35,920
Or cut out your signature and replace it with another piece of paper.

756
00:48:35,920 --> 00:48:40,920
Or take the pages of the document that you did not sign and replace them with some other

757
00:48:40,920 --> 00:48:41,920
pages.

758
00:48:41,920 --> 00:48:42,920
Or delete pages.

759
00:48:42,920 --> 00:48:43,920
Or insert pages.

760
00:48:43,920 --> 00:48:44,920
Right?

761
00:48:44,920 --> 00:48:49,920
So in a physical world, we kind of like, don't think about those things.

762
00:48:49,920 --> 00:48:50,920
But they're totally possible.

763
00:48:50,920 --> 00:48:51,920
Right?

764
00:48:51,920 --> 00:48:54,920
Now you think about recent real estate contracts, or God knows why.

765
00:48:54,920 --> 00:48:57,920
I mean, you sign one page and the rest may be your initial or something.

766
00:48:57,920 --> 00:48:59,920
Like, how does initial mean?

767
00:48:59,920 --> 00:49:02,920
Initial, there's no wait anywhere.

768
00:49:02,920 --> 00:49:03,920
Right?

769
00:49:03,920 --> 00:49:09,920
So, but in the digital world, digital signatures actually mean, it's like, when you sign something,

770
00:49:09,920 --> 00:49:12,920
you sign every bit of that.

771
00:49:12,920 --> 00:49:13,920
Okay?

772
00:49:13,920 --> 00:49:16,920
Every single bit of the message is signed.

773
00:49:16,920 --> 00:49:19,920
So it's strictly stronger.

774
00:49:19,920 --> 00:49:20,920
Right?

775
00:49:20,920 --> 00:49:26,920
So if Bob signs a document, he establishes that he creates the entire document and he is

776
00:49:26,920 --> 00:49:27,920
the one who creates it.

777
00:49:27,920 --> 00:49:28,920
Right?

778
00:49:28,920 --> 00:49:29,920
Yeah.

779
00:49:29,920 --> 00:49:39,920
So, with all that, and we already talked about it, right?

780
00:49:39,920 --> 00:49:41,920
So Bob basically uses this private key.

781
00:49:41,920 --> 00:49:43,920
I mean, I kind of jokingly say decrypt.

782
00:49:43,920 --> 00:49:44,920
We don't say decrypt.

783
00:49:44,920 --> 00:49:45,920
He signs.

784
00:49:45,920 --> 00:49:48,920
But Bob signs with the private key.

785
00:49:48,920 --> 00:49:51,920
And Alice verifies with the private key.

786
00:49:51,920 --> 00:49:55,920
But, of course, as I said before, we don't actually sign the message.

787
00:49:55,920 --> 00:49:59,920
We first hash the message and we sign the hash.

788
00:49:59,920 --> 00:50:06,920
And the idea is that the message and the hash are like, there's like an umbilical cord between

789
00:50:06,920 --> 00:50:07,920
the two.

790
00:50:07,920 --> 00:50:08,920
They're tied together.

791
00:50:08,920 --> 00:50:12,920
Because if you can replace the message with another message that has the same hash, you

792
00:50:12,920 --> 00:50:14,920
won the game.

793
00:50:14,920 --> 00:50:15,920
Right?

794
00:50:15,920 --> 00:50:16,920
Okay.

795
00:50:16,920 --> 00:50:18,920
So, this is all the same.

796
00:50:18,920 --> 00:50:19,920
Uh, no, no, no.

797
00:50:19,920 --> 00:50:20,920
Sign hash.

798
00:50:20,920 --> 00:50:21,920
I said all that.

799
00:50:21,920 --> 00:50:22,920
Boring.

800
00:50:22,920 --> 00:50:23,920
Boring.

801
00:50:23,920 --> 00:50:24,920
Okay.

802
00:50:24,920 --> 00:50:37,920
Now, we come back to what you raised, which is, okay, so what about this subtle headache?

803
00:50:37,920 --> 00:50:41,920
Not the big headache, but the subtle headache of how do we know, well, first of, where do

804
00:50:41,920 --> 00:50:42,920
we get the public key?

805
00:50:42,920 --> 00:50:44,920
How do we know they have the right public key?

806
00:50:44,920 --> 00:50:47,920
Well, that's called public key certification.

807
00:50:47,920 --> 00:50:48,920
Welcome to hell.

808
00:50:48,920 --> 00:50:49,920
Public key certification.

809
00:50:49,920 --> 00:50:54,920
This is something that we deal with every day today, even without knowing it.

810
00:50:54,920 --> 00:50:55,920
Right?

811
00:50:55,920 --> 00:51:00,920
So, what Alice obtains while it's public key, how does she know it's public key apart?

812
00:51:00,920 --> 00:51:01,920
Right?

813
00:51:01,920 --> 00:51:05,920
And the solution is called CA's, or Certification Authority.

814
00:51:05,920 --> 00:51:08,920
Maybe you've heard the term PKI.

815
00:51:08,920 --> 00:51:09,920
Right?

816
00:51:09,920 --> 00:51:11,920
Public key infrastructure.

817
00:51:11,920 --> 00:51:12,920
Right?

818
00:51:12,920 --> 00:51:15,920
That's what's required to solve this headache.

819
00:51:15,920 --> 00:51:17,920
Public key infrastructure.

820
00:51:17,920 --> 00:51:23,920
That is usually hierarchical structure of certification authorities.

821
00:51:23,920 --> 00:51:25,920
With some God on top.

822
00:51:25,920 --> 00:51:26,920
Right?

823
00:51:26,920 --> 00:51:27,920
The root of trust.

824
00:51:27,920 --> 00:51:28,920
Okay?

825
00:51:28,920 --> 00:51:29,920
Okay?

826
00:51:29,920 --> 00:51:31,920
Don't say to anybody I'm made by the religion.

827
00:51:31,920 --> 00:51:33,920
It's just a God in terms of public keys.

828
00:51:33,920 --> 00:51:34,920
Okay?

829
00:51:34,920 --> 00:51:39,920
So, public key God on top, and then branches, like in a tree, right?

830
00:51:39,920 --> 00:51:42,920
Going up to lower level certification authority.

831
00:51:42,920 --> 00:51:43,920
Okay?

832
00:51:43,920 --> 00:51:44,920
Okay?

833
00:51:44,920 --> 00:51:49,920
So, and then at some point, you know, at the bottom of the tree, the leaves are users.

834
00:51:49,920 --> 00:51:52,920
Or entities that are, that have public keys.

835
00:51:52,920 --> 00:51:54,920
And Alice's and Bob's.

836
00:51:54,920 --> 00:51:57,920
Or a web service.

837
00:51:57,920 --> 00:51:58,920
Right?

838
00:51:58,920 --> 00:52:00,920
In TLS there would be web service.

839
00:52:00,920 --> 00:52:03,920
Because what happens underneath when you go to a website.

840
00:52:03,920 --> 00:52:04,920
Right?

841
00:52:04,920 --> 00:52:05,920
You do.

842
00:52:05,920 --> 00:52:06,920
You type in a URL.

843
00:52:06,920 --> 00:52:07,920
Or you click on a URL.

844
00:52:07,920 --> 00:52:10,920
Your browser says, oh, cool.

845
00:52:10,920 --> 00:52:11,920
New things.

846
00:52:11,920 --> 00:52:14,920
Extracts the domain name part of the URL.

847
00:52:14,920 --> 00:52:15,920
Okay?

848
00:52:15,920 --> 00:52:18,920
Looks up using DNS.

849
00:52:18,920 --> 00:52:19,920
Right?

850
00:52:19,920 --> 00:52:22,920
And then collect.

851
00:52:22,920 --> 00:52:27,920
And then TLS, what it tries to do, it sees first checks in the local caches.

852
00:52:27,920 --> 00:52:29,920
Do I have already talked to this website?

853
00:52:29,920 --> 00:52:32,920
If I talk to this website, do I have a public key certificate for that?

854
00:52:32,920 --> 00:52:33,920
And the key is up.

855
00:52:33,920 --> 00:52:34,920
If yes, good.

856
00:52:34,920 --> 00:52:37,920
If not, then he needs to go and get it.

857
00:52:37,920 --> 00:52:39,920
And what is he going to get it?

858
00:52:39,920 --> 00:52:41,920
He's going to get it from the server.

859
00:52:41,920 --> 00:52:45,920
And the server's going to reply with his public key, but it better be a public key certificate

860
00:52:45,920 --> 00:52:48,920
because just saying a public key isn't enough.

861
00:52:48,920 --> 00:52:55,920
So actually, what your browser is going to do is make sure that the public key certificate

862
00:52:55,920 --> 00:53:02,920
that that server sends you is traceable to the root of some public key infrastructure

863
00:53:02,920 --> 00:53:05,920
that your browser trusts.

864
00:53:05,920 --> 00:53:08,920
And that comes back to that browser installation problem.

865
00:53:08,920 --> 00:53:13,920
The browser, when you installed it, pray to God, securely, blah, blah, blah.

866
00:53:13,920 --> 00:53:19,920
And it has some root of trust that says, I don't know, Panamanian Certification Authority.

867
00:53:19,920 --> 00:53:20,920
All right?

868
00:53:20,920 --> 00:53:22,920
Federal certification of Panamanian.

869
00:53:22,920 --> 00:53:23,920
Panamanian.

870
00:53:23,920 --> 00:53:24,920
Panamanian.

871
00:53:24,920 --> 00:53:26,920
And you are going to a bank in Panama somewhere, right?

872
00:53:26,920 --> 00:53:27,920
Your web browser.

873
00:53:27,920 --> 00:53:29,920
You're actually trying to connect to that.

874
00:53:29,920 --> 00:53:30,920
I don't know.

875
00:53:30,920 --> 00:53:32,920
Banco Central de Panama.

876
00:53:32,920 --> 00:53:35,920
And it gives you a public key certificate.

877
00:53:35,920 --> 00:53:41,920
And the public key certificate is signed by the Central Certification Authority of Panama.

878
00:53:41,920 --> 00:53:44,920
Okay, so what does your browser do?

879
00:53:44,920 --> 00:53:49,920
Your browser says, oh, I trust the Central Authority of Panama and its public key.

880
00:53:49,920 --> 00:53:54,920
I use its public key to verify the certificate of the central bank I'm going to.

881
00:53:54,920 --> 00:53:55,920
Is it verified?

882
00:53:55,920 --> 00:53:56,920
Yes.

883
00:53:56,920 --> 00:53:57,920
Is it expired?

884
00:53:57,920 --> 00:53:58,920
No.

885
00:53:58,920 --> 00:53:59,920
Good.

886
00:53:59,920 --> 00:54:00,920
This is a simple example.

887
00:54:00,920 --> 00:54:01,920
It could go deeper.

888
00:54:01,920 --> 00:54:06,920
Because the public key infrastructure could be deeper.

889
00:54:06,920 --> 00:54:07,920
Okay.

890
00:54:07,920 --> 00:54:16,920
So, in other words, we need these certification authorities as points of, like, trust.

891
00:54:16,920 --> 00:54:21,920
And what they do, really, what they do is bind public keys to entities.

892
00:54:21,920 --> 00:54:28,920
That's really the main function of the Certification Authority is to say, this guy has this public key.

893
00:54:28,920 --> 00:54:30,920
This guy has that public key.

894
00:54:30,920 --> 00:54:31,920
Okay?

895
00:54:31,920 --> 00:54:37,920
Now, before it all begins, somebody has to ask for a public key certificate.

896
00:54:37,920 --> 00:54:45,920
Meaning, if the bank in Panama wants to have a server and he wants that server to be securely connected to,

897
00:54:45,920 --> 00:54:51,920
he needs to obtain a public key certificate, which means it needs to generate a public key and a private key,

898
00:54:51,920 --> 00:54:56,920
go to the CA, and obtain a certificate.

899
00:54:56,920 --> 00:54:58,920
Pay money.

900
00:54:58,920 --> 00:55:02,920
Usually in the commercial world, you pay money to get a certificate.

901
00:55:02,920 --> 00:55:07,920
And you need to verify your identity, meaning you need to bring credentials.

902
00:55:07,920 --> 00:55:08,920
Right?

903
00:55:08,920 --> 00:55:13,920
So, a lot of this process is actually administrative and it takes place offline.

904
00:55:13,920 --> 00:55:17,920
Especially for, like, web servers, commercial entities.

905
00:55:17,920 --> 00:55:23,920
For people like us, no, we can get a certificate, a low-grade certificate, often for free.

906
00:55:23,920 --> 00:55:24,920
Okay?

907
00:55:24,920 --> 00:55:29,920
But the certificate will contain a group, essentially, some kind of a binding.

908
00:55:29,920 --> 00:55:30,920
Right?

909
00:55:30,920 --> 00:55:46,920
Essentially, it says, oh, this is Alice Smith, and this certificate is to be used for email only, and it's valid from this date until this date.

910
00:55:46,920 --> 00:55:50,920
And, um, I don't know, Alice lives in California.

911
00:55:50,920 --> 00:55:52,920
And here's the public key.

912
00:55:52,920 --> 00:55:53,920
I know it's called the public key.

913
00:55:53,920 --> 00:55:56,920
And also attached to the certificate is the signature.

914
00:55:56,920 --> 00:56:01,920
And, well, and the name of the CA, of the CA that issues the certificate and the signature.

915
00:56:01,920 --> 00:56:07,920
So it's not unlike a driver's license or a passport, in a way, if you think about it.

916
00:56:07,920 --> 00:56:13,920
Except your driver's license is a passport, well, actually, they do contain a key, but never mind you.

917
00:56:13,920 --> 00:56:16,920
Well, the way you look at them today, right, the driver's license is a passport.

918
00:56:16,920 --> 00:56:19,920
There are no cryptographic things in there.

919
00:56:19,920 --> 00:56:21,920
At least you don't see them.

920
00:56:21,920 --> 00:56:28,920
Now, if you have a recent driver's license or a fairly recent passport, chances are there are cryptographic keys inside them.

921
00:56:28,920 --> 00:56:33,920
Because there's, like, RFID, data, all sorts of biometric information inside them.

922
00:56:33,920 --> 00:56:36,920
That's not quite an analogy here.

923
00:56:36,920 --> 00:56:37,920
Right?

924
00:56:37,920 --> 00:56:38,920
So everybody understands?

925
00:56:38,920 --> 00:56:42,920
So, certificates are absolutely necessary.

926
00:56:42,920 --> 00:56:45,920
You cannot live without them today.

927
00:56:45,920 --> 00:56:52,920
So, when Alice wants to get Bob's public key, she needs to get it from somewhere.

928
00:56:52,920 --> 00:56:54,920
It doesn't matter, actually, where she finds it.

929
00:56:54,920 --> 00:56:58,920
So, for example, my public key, you could have found it on the floor somewhere.

930
00:56:58,920 --> 00:57:01,920
You could have picked it out from a garbage can.

931
00:57:01,920 --> 00:57:03,920
It's not important how you got it.

932
00:57:03,920 --> 00:57:06,920
And what's important is how you verify it.

933
00:57:06,920 --> 00:57:07,920
Okay?

934
00:57:07,920 --> 00:57:09,920
So, you get the certificate.

935
00:57:09,920 --> 00:57:12,920
The first thing you do is you check for expiration.

936
00:57:12,920 --> 00:57:14,920
Because it's cheap or something.

937
00:57:14,920 --> 00:57:15,920
You look at it.

938
00:57:15,920 --> 00:57:16,920
Is the certificate expired?

939
00:57:16,920 --> 00:57:18,920
No, it's expired.

940
00:57:18,920 --> 00:57:20,920
Why bother checking anything else?

941
00:57:20,920 --> 00:57:21,920
Is it valid yet?

942
00:57:21,920 --> 00:57:25,920
Meaning, is it a certificate that is not valid yet, but will be valid in the future?

943
00:57:25,920 --> 00:57:26,920
It's not valid yet.

944
00:57:26,920 --> 00:57:29,920
No point in checking anything.

945
00:57:29,920 --> 00:57:30,920
Okay.

946
00:57:30,920 --> 00:57:33,920
Now, you check for validity.

947
00:57:33,920 --> 00:57:35,920
Meaning, you check the CA's public key.

948
00:57:35,920 --> 00:57:39,920
Assuming you trust the CA's public key, very widely, the signatures.

949
00:57:39,920 --> 00:57:40,920
Right?

950
00:57:40,920 --> 00:57:42,920
Ah, but you're not done yet.

951
00:57:42,920 --> 00:57:43,920
Not done.

952
00:57:43,920 --> 00:57:48,920
Because a certificate is what's called in operating systems, or in general, a capability.

953
00:57:48,920 --> 00:57:51,920
Maybe you've heard before in other classes.

954
00:57:51,920 --> 00:57:54,920
A capability is like a bearer document.

955
00:57:54,920 --> 00:57:56,920
Like a driver's license is a capability.

956
00:57:56,920 --> 00:57:57,920
A passport is a capability.

957
00:57:57,920 --> 00:57:59,920
It's given to you.

958
00:57:59,920 --> 00:58:00,920
You have it.

959
00:58:00,920 --> 00:58:03,920
But if you behave badly, it could be reformed.

960
00:58:03,920 --> 00:58:05,920
A visa is another capability.

961
00:58:05,920 --> 00:58:06,920
It could be reformed.

962
00:58:06,920 --> 00:58:07,920
A driver's license could be reformed.

963
00:58:07,920 --> 00:58:08,920
A passport could be reformed.

964
00:58:08,920 --> 00:58:11,920
Well, same thing with public key certificates.

965
00:58:11,920 --> 00:58:18,920
And because you could have found my public key certificate anywhere, you have no idea if it's been reformed.

966
00:58:18,920 --> 00:58:19,920
Right?

967
00:58:19,920 --> 00:58:20,920
Because it's still valid.

968
00:58:20,920 --> 00:58:21,920
It says valid.

969
00:58:21,920 --> 00:58:23,920
It expires in 2029.

970
00:58:23,920 --> 00:58:25,920
And valid from 2021.

971
00:58:25,920 --> 00:58:26,920
Great.

972
00:58:26,920 --> 00:58:32,920
But how do you know I haven't behaved badly and it's been reformed since?

973
00:58:32,920 --> 00:58:34,920
Or maybe I've lost my credibility.

974
00:58:34,920 --> 00:58:36,920
There are many reasons it's been reformed.

975
00:58:36,920 --> 00:58:39,920
Some of them have nothing to do with my bad behavior.

976
00:58:39,920 --> 00:58:40,920
Maybe I've been robbed.

977
00:58:40,920 --> 00:58:44,920
Maybe a gun was put to my head and I was forced to devolve my privacy.

978
00:58:44,920 --> 00:58:45,920
Certificate is gone.

979
00:58:45,920 --> 00:58:46,920
Right?

980
00:58:46,920 --> 00:58:47,920
It should be revoked.

981
00:58:47,920 --> 00:58:53,920
And the only person or the only entity in the world that knows that it's revoked is the issuing CA.

982
00:58:53,920 --> 00:58:54,920
Right?

983
00:58:54,920 --> 00:58:56,920
Don't ask me.

984
00:58:56,920 --> 00:58:58,920
I might not want to tell you.

985
00:58:58,920 --> 00:59:01,920
Or I'll tell you now why.

986
00:59:01,920 --> 00:59:09,920
The only authoritative entity in the world that knows whether my certificate is revoked or not is the issuing CA.

987
00:59:09,920 --> 00:59:15,920
Just like the only entity in the world that can tell you whether your U.S. passport is revoked is the U.S. State Department.

988
00:59:15,920 --> 00:59:16,920
Okay?

989
00:59:16,920 --> 00:59:22,920
Or the only entity that can tell you if your California license is valid is DMV in California.

990
00:59:22,920 --> 00:59:26,920
So don't ask DMV in Illinois or federal government.

991
00:59:26,920 --> 00:59:27,920
Ask DMV in California.

992
00:59:27,920 --> 00:59:28,920
That's the CA.

993
00:59:28,920 --> 00:59:29,920
Say again.

994
00:59:29,920 --> 00:59:32,920
So that means somehow you need to check for revocation.

995
00:59:32,920 --> 00:59:35,920
That's another headache.

996
00:59:35,920 --> 00:59:37,920
Another big headache.

997
00:59:37,920 --> 00:59:38,920
Revocation.

998
00:59:38,920 --> 00:59:45,920
And once you've solved all those problems and passed all those tests, then you extract the public key and then you can verify the signature.

999
00:59:45,920 --> 00:59:46,920
Amazing.

1000
00:59:46,920 --> 00:59:47,920
Right.

1001
00:59:47,920 --> 00:59:53,920
And, okay, this is a very old fashioned format.

1002
00:59:53,920 --> 00:59:56,920
Public key certificates don't look like that anymore because this is old.

1003
00:59:56,920 --> 00:59:58,920
But essentially it could look like that.

1004
00:59:58,920 --> 01:00:11,920
And if you go into your browser or if you use like a mail client like I do, like Thunderbird, you can go into it and the cuts of it will see what a public key, or should display what public key certificates look like.

1005
01:00:11,920 --> 01:00:14,920
And they look a bit more complex than what you see here.

1006
01:00:14,920 --> 01:00:19,920
But basically the idea is to show you, okay, it says this certificate belongs to, to whom it was issued.

1007
01:00:19,920 --> 01:00:20,920
Right?

1008
01:00:20,920 --> 01:00:24,920
This, in this case, the certificate belongs to another CA.

1009
01:00:24,920 --> 01:00:25,920
Right?

1010
01:00:25,920 --> 01:00:27,920
Because CA themselves have certificates.

1011
01:00:27,920 --> 01:00:28,920
Who was it issued to?

1012
01:00:28,920 --> 01:00:34,920
Oh, in this case, it was issued by itself.

1013
01:00:34,920 --> 01:00:36,920
Weird, right?

1014
01:00:36,920 --> 01:00:40,920
Certificate issued to an entity by the same entity.

1015
01:00:40,920 --> 01:00:43,920
Does that make any sense?

1016
01:00:43,920 --> 01:00:47,920
Not, not, not, not like immediately, but you think about it.

1017
01:00:47,920 --> 01:00:49,920
Who certifies God?

1018
01:00:49,920 --> 01:00:53,920
I mean, really, right?

1019
01:00:53,920 --> 01:00:55,920
If you're a God of your own public key infrastructure, right?

1020
01:00:55,920 --> 01:00:57,920
You're like a root of the tree.

1021
01:00:57,920 --> 01:00:58,920
Who's going to certify you?

1022
01:00:58,920 --> 01:01:00,920
The only choice you have is to certify yourself.

1023
01:01:00,920 --> 01:01:02,920
That's called a self-signed certificate.

1024
01:01:02,920 --> 01:01:03,920
Right?

1025
01:01:03,920 --> 01:01:10,920
So when you get your browser installation, for example, like a new browser installation, it comes with all these roots of trust.

1026
01:01:10,920 --> 01:01:12,920
They're usually self-signed.

1027
01:01:12,920 --> 01:01:13,920
Okay?

1028
01:01:13,920 --> 01:01:14,920
For that reason.

1029
01:01:14,920 --> 01:01:16,920
Because there's no global world authority.

1030
01:01:16,920 --> 01:01:18,920
You know what I mean?

1031
01:01:18,920 --> 01:01:21,920
Couldn't it be like a cycle or something?

1032
01:01:21,920 --> 01:01:24,920
Because there are multiple CA's, right?

1033
01:01:24,920 --> 01:01:26,920
Sometimes they sign each other.

1034
01:01:26,920 --> 01:01:27,920
Right.

1035
01:01:27,920 --> 01:01:28,920
Like I vouch for that guy.

1036
01:01:28,920 --> 01:01:31,920
And so that's called a peer sign.

1037
01:01:31,920 --> 01:01:32,920
Right.

1038
01:01:32,920 --> 01:01:33,920
They will do it.

1039
01:01:33,920 --> 01:01:34,920
And that's, that's, that happens.

1040
01:01:34,920 --> 01:01:35,920
That happens.

1041
01:01:35,920 --> 01:01:39,920
I don't think it happens in browsers, but it happens in other, in other applications.

1042
01:01:39,920 --> 01:01:42,920
Why would they allow self-signing if that is an option?

1043
01:01:42,920 --> 01:01:44,920
Ah, because at least it preserves the tech.

1044
01:01:44,920 --> 01:01:47,920
So, ah, good point, good point.

1045
01:01:47,920 --> 01:01:49,920
Um, self-signing in general is useful.

1046
01:01:49,920 --> 01:01:54,920
It's better than nothing because it tells you that whoever signed it knows the private key.

1047
01:01:54,920 --> 01:01:58,920
Otherwise they just say, here's my private public key and it's complete nonsense.

1048
01:01:58,920 --> 01:02:02,920
At least I know whoever, whoever self-signed knows the private key.

1049
01:02:02,920 --> 01:02:03,920
All right.

1050
01:02:03,920 --> 01:02:08,920
So it says who, to whom it belongs, by whom it was issued, always a serial number.

1051
01:02:08,920 --> 01:02:09,920
There is always a serial number.

1052
01:02:09,920 --> 01:02:12,920
It must be unique per seat, per issuer.

1053
01:02:12,920 --> 01:02:19,920
So you can definitely see two certificates with exactly the same serial number, but they

1054
01:02:19,920 --> 01:02:20,920
apply different issues.

1055
01:02:20,920 --> 01:02:24,920
So the combination of issuer serial number must be unique.

1056
01:02:24,920 --> 01:02:27,920
Uh, that is valid from.

1057
01:02:27,920 --> 01:02:28,920
Okay.

1058
01:02:28,920 --> 01:02:31,920
So this is super old, 1996 to 2028.

1059
01:02:31,920 --> 01:02:32,920
Pretty generous, right?

1060
01:02:32,920 --> 01:02:33,920
32 year validity.

1061
01:02:33,920 --> 01:02:35,920
Nobody issued certificates this long.

1062
01:02:35,920 --> 01:02:36,920
This used to be the case.

1063
01:02:36,920 --> 01:02:40,920
People were much more optimistic in the beginning of the internet.

1064
01:02:40,920 --> 01:02:45,920
Uh, but yeah, it says, you must say from to.

1065
01:02:45,920 --> 01:02:46,920
Always.

1066
01:02:46,920 --> 01:02:49,920
Fingerprint is a hash of a certificate.

1067
01:02:49,920 --> 01:02:50,920
Right?

1068
01:02:50,920 --> 01:02:52,920
That's just for integrity and checking.

1069
01:02:52,920 --> 01:02:54,920
And then you see there's like other stuff there.

1070
01:02:54,920 --> 01:02:56,920
It's like, this certificate belongs to the certifying authority.

1071
01:02:56,920 --> 01:02:59,920
Accept the certificate for certifying human subject.

1072
01:02:59,920 --> 01:03:03,920
Like for example, this certificate should never be used for web authentication.

1073
01:03:03,920 --> 01:03:04,920
Right?

1074
01:03:04,920 --> 01:03:09,920
It will not work with TLS because, you see, this says only email.

1075
01:03:09,920 --> 01:03:11,920
So this is for sending email.

1076
01:03:11,920 --> 01:03:12,920
Only.

1077
01:03:12,920 --> 01:03:13,920
Now in reality, one second.

1078
01:03:13,920 --> 01:03:18,920
In reality, the formula certificate is pretty abstruse.

1079
01:03:18,920 --> 01:03:23,920
There's a standard called X509.

1080
01:03:23,920 --> 01:03:26,920
To be precise, X509 version 3.

1081
01:03:26,920 --> 01:03:28,920
That's an international standard.

1082
01:03:28,920 --> 01:03:35,920
And if you do a quick web search on X509v3, you'll see a ASN1 notation.

1083
01:03:35,920 --> 01:03:37,920
If you know what that means.

1084
01:03:37,920 --> 01:03:42,920
Specification, again, not for the faint of heart.

1085
01:03:42,920 --> 01:03:44,920
It's very sleep inducing.

1086
01:03:44,920 --> 01:03:48,920
It tells you all these fields that must be found in a certificate.

1087
01:03:48,920 --> 01:03:50,920
Some are mandatory.

1088
01:03:50,920 --> 01:03:53,920
Like most of the fields we've covered here are mandatory.

1089
01:03:53,920 --> 01:03:55,920
And then there are lots of options.

1090
01:03:55,920 --> 01:03:56,920
Okay?

1091
01:03:56,920 --> 01:03:58,920
Like some certificates don't even have a key.

1092
01:03:58,920 --> 01:04:00,920
There are like authorization certificates.

1093
01:04:00,920 --> 01:04:03,920
You know, some are like assigned to a goal or something like that.

1094
01:04:03,920 --> 01:04:04,920
Question?

1095
01:04:04,920 --> 01:04:05,920
Yes.

1096
01:04:05,920 --> 01:04:08,920
I'm just wondering why we need to pay for the certificate.

1097
01:04:08,920 --> 01:04:09,920
And the, yeah.

1098
01:04:09,920 --> 01:04:12,920
Well, you, you, so, so, you is a individual, right?

1099
01:04:12,920 --> 01:04:13,920
A student.

1100
01:04:13,920 --> 01:04:14,920
Yeah, yeah.

1101
01:04:14,920 --> 01:04:15,920
You can get a free certificate.

1102
01:04:15,920 --> 01:04:20,920
Like there are, there are, if you want, I can, I can tell you the next time.

1103
01:04:20,920 --> 01:04:26,920
There are services that will give you a low grade, low grade certificate, but just saying,

1104
01:04:26,920 --> 01:04:29,920
oh, you know, here's an email address.

1105
01:04:29,920 --> 01:04:30,920
Give us your email address.

1106
01:04:30,920 --> 01:04:31,920
You enter your email address.

1107
01:04:31,920 --> 01:04:37,920
As long as you're a student at UCIEDU, they'll do a verification, like one of those, you

1108
01:04:37,920 --> 01:04:38,920
know, send your code, right?

1109
01:04:38,920 --> 01:04:41,920
Verify that you own this email address or access it.

1110
01:04:41,920 --> 01:04:43,920
And they'll issue you a certificate.

1111
01:04:43,920 --> 01:04:47,920
Commercial entities or high grades.

1112
01:04:47,920 --> 01:04:50,920
Well, because the certification authorities are businesses.

1113
01:04:50,920 --> 01:04:52,920
What do they do?

1114
01:04:52,920 --> 01:04:55,920
Oh, they make money on this.

1115
01:04:55,920 --> 01:04:56,920
Yeah, yeah, yeah.

1116
01:04:56,920 --> 01:04:57,920
Oh, but okay.

1117
01:04:57,920 --> 01:04:58,920
Okay.

1118
01:04:58,920 --> 01:05:01,920
Not that I love them or have any connection to any situation.

1119
01:05:01,920 --> 01:05:02,920
But consider this.

1120
01:05:02,920 --> 01:05:04,920
If you are a CEA, right?

1121
01:05:04,920 --> 01:05:11,920
And you do have a for profit business, you need to be amazingly secure.

1122
01:05:11,920 --> 01:05:18,920
Because the key that you sign, certificates, is like the family jewels.

1123
01:05:18,920 --> 01:05:24,920
If somebody gets that key, they can now impersonate you and issue certificates.

1124
01:05:24,920 --> 01:05:25,920
This is super dangerous.

1125
01:05:25,920 --> 01:05:26,920
Your whole reputation is gone.

1126
01:05:26,920 --> 01:05:28,920
You lose all your customers overnight.

1127
01:05:28,920 --> 01:05:29,920
Right?

1128
01:05:29,920 --> 01:05:33,920
Your key leaks and your business is dead.

1129
01:05:33,920 --> 01:05:34,920
Like suicide immediately.

1130
01:05:34,920 --> 01:05:37,920
Now, does anybody know the word Stuxnet?

1131
01:05:37,920 --> 01:05:41,920
How many people heard of the word Stuxnet?

1132
01:05:41,920 --> 01:05:42,920
Not many.

1133
01:05:42,920 --> 01:05:44,920
God, guys, here we go.

1134
01:05:44,920 --> 01:06:01,920
Stuxnet, 2014 timeframe, was an incident when a malware made its way into Natanz nuclear reactor

1135
01:06:01,920 --> 01:06:14,920
in Iran and severely and irreplaceably damaged centrifuges, or uranium centrifuges, producing centrifuges in that facility.

1136
01:06:14,920 --> 01:06:15,920
Okay.

1137
01:06:15,920 --> 01:06:19,920
Now, that malware jumped what's called air gaps.

1138
01:06:19,920 --> 01:06:22,920
Meaning that Iranian nuclear facility, Iranian is not stupid.

1139
01:06:22,920 --> 01:06:24,920
It is not connected to the internet.

1140
01:06:24,920 --> 01:06:25,920
Okay?

1141
01:06:25,920 --> 01:06:30,920
But it means there's an air gap between the internet and that facility.

1142
01:06:30,920 --> 01:06:34,920
Like it is in the United States and many places.

1143
01:06:34,920 --> 01:06:47,920
So that malware came in the form of a software update for a PLC, Programming Logic Controller,

1144
01:06:47,920 --> 01:06:52,920
that was operating these turbines, the centrifuge turbines in the nuclear plant.

1145
01:06:52,920 --> 01:06:54,920
Why am I telling you this story?

1146
01:06:54,920 --> 01:07:09,920
Because the software update was signed, digitally signed, by a CA in Taiwan that was compromised.

1147
01:07:09,920 --> 01:07:11,920
Okay?

1148
01:07:11,920 --> 01:07:16,920
So, nobody knows for a fact who did it.

1149
01:07:16,920 --> 01:07:29,920
But everybody kind of knows that it's very likely Mossad and the NSA together mounted this joint operation to retard the Iranian nuclear weapons program.

1150
01:07:29,920 --> 01:07:30,920
Okay?

1151
01:07:30,920 --> 01:07:33,920
To do so, it was a massive logistic operation.

1152
01:07:33,920 --> 01:07:35,920
They had to patiently wait.

1153
01:07:35,920 --> 01:07:38,920
This malware did not infect computers outside Iran.

1154
01:07:38,920 --> 01:07:41,920
It actually was very like, am I in Iran?

1155
01:07:41,920 --> 01:07:42,920
No.

1156
01:07:42,920 --> 01:07:44,920
Sometimes it would delete itself.

1157
01:07:44,920 --> 01:07:50,920
And then it would like, look, am I running on a particular Windows industrial system, Windows control?

1158
01:07:50,920 --> 01:07:51,920
Oh, okay.

1159
01:07:51,920 --> 01:07:52,920
Then is it made by Siemens?

1160
01:07:52,920 --> 01:07:58,920
Because it particularly targeted specific turbines made by Siemens, which is a German company, right?

1161
01:07:58,920 --> 01:08:05,920
And they knew that whoever did this knew that the Siemens PLC turbines were running inside this nuclear reactor.

1162
01:08:05,920 --> 01:08:10,920
In Iran, it would make them essentially spin at such speed that they burned out or something like that.

1163
01:08:10,920 --> 01:08:12,920
I don't know the exact details.

1164
01:08:12,920 --> 01:08:19,920
What we do know is that they were damaged beyond repair and severely retarded the Iranian nuclear program.

1165
01:08:19,920 --> 01:08:21,920
Now, does that answer your question?

1166
01:08:21,920 --> 01:08:22,920
Or not yet?

1167
01:08:22,920 --> 01:08:33,920
The moral of the story is somebody got into the supply chain there and stole the private key of that CA in Taiwan.

1168
01:08:33,920 --> 01:08:47,920
Without that, this whole incident would have not happened because they started signing certificates for code distribution and then allowed whoever mounted the attack to sign fake code distribution.

1169
01:08:47,920 --> 01:08:48,920
Right?

1170
01:08:48,920 --> 01:08:49,920
The code updates.

1171
01:08:49,920 --> 01:08:50,920
Right?

1172
01:08:50,920 --> 01:08:51,920
You get the idea?

1173
01:08:51,920 --> 01:08:52,920
Yeah.

1174
01:08:52,920 --> 01:08:56,920
So one thing leads to another, to another, to another.

1175
01:08:56,920 --> 01:09:03,920
So that's why if you are a CA, if you're running a CA as a business, you need to have amazing, not just electronic, but physical security.

1176
01:09:03,920 --> 01:09:15,920
Because chances are all these, these kinds of attacks start with some amount of social engineering that involve humans and bribery, et cetera, et cetera.

1177
01:09:15,920 --> 01:09:20,920
So physical security for a CA business is extremely important.

1178
01:09:20,920 --> 01:09:24,920
So, and of course, disconnection from the internet.

1179
01:09:24,920 --> 01:09:27,920
Typically CA will not run accessible from the internet.

1180
01:09:27,920 --> 01:09:28,920
At least not high grade CA.

1181
01:09:28,920 --> 01:09:29,920
They will be disconnected.

1182
01:09:29,920 --> 01:09:35,920
They will actually be a human interface between, let's say requests will come in to issue certificates.

1183
01:09:35,920 --> 01:09:42,920
And then at the end of the day, somebody will like bunch up those requests and physically like carry them over to the actual CA.

1184
01:09:42,920 --> 01:09:53,920
So I'm in a bunker, you know, in a Faraday cage room and feed them to the CA and then get certificates and come out and turn off the CA.

1185
01:09:53,920 --> 01:09:57,920
So basically the idea is this has to be a very secure operation.

1186
01:09:57,920 --> 01:10:02,920
And so it's not, it's not, it's not like so easy to run a CA.

1187
01:10:02,920 --> 01:10:05,920
So today's, today, I mean, you have all kinds of CAs.

1188
01:10:05,920 --> 01:10:11,920
Of course, if you go to some third world place, like, I don't know, middle of nowhere, you know, Marshall Islands, you know,

1189
01:10:11,920 --> 01:10:18,920
their CA is not going to be as secure as a CA in France, you know, but the prices will also be different, right?

1190
01:10:18,920 --> 01:10:24,920
And the trust people will have in the certificate issued by a CA in like Solomon Islands in Vanuatu

1191
01:10:24,920 --> 01:10:32,920
would be different from a, from a certificate issued, let's say by some reputable California authority.

1192
01:10:32,920 --> 01:10:33,920
Yeah.

1193
01:10:33,920 --> 01:10:36,920
So this is all, it's not super technical, right?

1194
01:10:36,920 --> 01:10:39,920
This is all very reputation.

1195
01:10:39,920 --> 01:10:40,920
Yeah.

1196
01:10:40,920 --> 01:10:41,920
All right.

1197
01:10:41,920 --> 01:10:43,920
So that's done to be done.

1198
01:10:43,920 --> 01:10:44,920
Yes.

1199
01:10:44,920 --> 01:10:45,920
See you on Thursday.

1200
01:10:45,920 --> 01:10:50,920
So if you haven't yet again, start thinking about who you're going to work with, what you're

1201
01:10:50,920 --> 01:10:53,920
going to work on in the project.

1202
01:10:53,920 --> 01:10:59,920
If you have questions, by the way, was somebody there yesterday because I had some music playing

1203
01:10:59,920 --> 01:11:04,920
in my office and not yesterday, Monday, yeah, Monday yesterday.

1204
01:11:04,920 --> 01:11:08,920
And I may have missed somebody not yesterday in the office hours.

1205
01:11:08,920 --> 01:11:09,920
No?

1206
01:11:09,920 --> 01:11:10,920
Okay.

1207
01:11:10,920 --> 01:11:11,920
Good.

1208
01:11:11,920 --> 01:11:12,920
Good.

1209
01:11:12,920 --> 01:11:13,920
Good.


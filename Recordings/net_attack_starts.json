{"text": " perverse a number of what's called autonomous systems. Some autonomous systems are called stomp, because you need stomp, meaning that they're like ISPs, that they provide services to individual customers. And then there are these transit or backbone ISPs that essentially do not deal with individual customers, but rather provide, well, just transit services. And so an autonomous system, as I think I have mentioned at least a couple of times, is a collection of resources under the control of a single administration. It is typically contiguous. So you can have autonomous systems, or you can have an organization that is so large that it has multiple sites, multiple locations on the internet, and then most likely you have different autonomous system numbers. Each autonomous system is assigned an official number. You cannot just pop up on the internet and become an autonomous system. You have to register and apply for a number. You can be assigned a unique number. Okay. Various days. OSI, standard vertical stack that you probably would have seen in the network's power source. Seven layers. It does not correspond to reality. At least not in the upper layer. The lower core layers kind of do, because here we have the actual physical transmission, right? Some kind of wireless or wired, not basically that, even pigeons, right? Whatever. And then on top of that, you have a data layer, something that's called MAC layer, media access control, right? MAC layer. And above that, you have a network layer, where in our case, IP lives. And then in a transport layer, you have things like TCP, UDP, ICMP, and what else? Some kind of niche protocols. And then on top of that, you have things like SSL and CLS, and HTTP, etc. And this has RPC, while this is a bit outdated, but remote procedure calls that used to be implemented. This still is implemented on top of the transport layer. And then the rest is like session and presentation layer. There's like a bit less clarity, how to map that. So we call the data format. So your application will be passing the data forward to the transport layer. The data that an application passes to the transport layer can be just a blob, okay? Some kind of blob, we don't care how long it is, as long as it fits in the address space of a computer, right? Available program memory, some kind of buffer. So we don't say how long this is. Let's just assume it can be arbitrarily long. And the transport layer, typically today, what happens is, if it goes to a DCP, right? So a DCP is by far the prevalent protocol for transport layer, not the only one. But a DCP layer, what happens is DCP will look at the application data and say, okay, I am aware, I, DCP, I'm aware of the maximum transmission unit of the lower layers. I know exactly what is the maximum packet size. So because it is aware, it will chop that application data into chunks or segments, and then slap a TCP header in front of each one of them. A unique DCP header that will be unique, because remember, DCP header has all kinds of things. But one of the things you should remember, we talked about it, is data offset. Remember offset field? So for a given DCP connection, right, there will be different offsets when the application data is split out. But the source, destination, port numbers in those PCP headers in multiple segments will be the same. So the offset field is very important, and it's interesting because it serves as both the actual offset into the data, but it also serves as kind of a sequencing. Except it's not incremented by one, it's incremented by the size of each segment. So at any time, a DCP connection, the offset represents the number of bytes, of data bytes, in that direction. It's unidirectional, which means that Alice is talking to Bob. This is going to reflect the number of bytes that Alice sent to Bob thus far on this DCP connection. Okay? Bob Mason, more or less, it has its own offset in Bob to Alice direction. Okay? At the network player, each DCP segment, each DCP segment, will likely not get fractured. Okay? Because the DCP is aware that an IP header will be slapsed in front of you. So it accommodates that. It takes it into account. Okay? So now we have an IP IP header, a DCP header, followed by data. That is faster than the data lake layer. In this case, it's Ethernet. Now Ethernet works over wires, twisted there, over fiber, it works over Ether. Right? But it stands in, so that's physical layer, right? That's physical layer. What physical media uses? But the MAC layer, okay, data lake layer, there's a standard, Ethernet standard, that says exactly how packets are formatted. So the network layer, IP packet comes in, and Ethernet header is added, and then Ethernet tree lays again. So the packet essentially encapsulates this. Okay? If you are using any secure, or if your Wi-Fi, you know, usually wired does not, but if your Wi-Fi is using some security measures, like WAP, WAP, or whatever the heck they're using, WFPA, that will be taken to our pair, at that layer. Okay? So there will be additional shields, additional subtenants here. But what I'm showing you here is just without any security, right? If time permits, at some point I will talk to you about wireless security, right? That usually happens at this layer, not above. Now, if you listen to prior lectures carefully, you remember me spending time on fragmentation, right? And you may ask, why did I spend all this time talking about fragmentation, and I just informed you that fragmentation actually does not have an IP layer, right? Yeah. Contradiction? Yes. Except that TCP is not the only transport layer protocol. Other transport layer protocols are allowed not to be as complicated and to pass to IP anyway. In fact, TCP is just very considerate and nice this way. One of the reasons it is, is because it doesn't want to deal with IP fragmentation. It has its own fragmentation to use. Do you see? So it wants things to go fast. It optimizes through. It optimizes through. Other protocols do not have to do. How many of you are familiar with the Linux kernel or any Linux kernel? A few of you. Did you know that there's something called raw sockets? Anybody knew that? Good. You can actually have an application, write an application that uses IP directly. You do not have to go through some session layer and then transport layer. You can actually write an application. They just directly accesses IP. In which case your application is its own is your own transport layer. Okay? Stunted, crazy, silly, maybe, yes, but it's allowed. Just FYI, many open unisex versions allow you to also write raw ethernet. That is, if your application if your kernel configuration lets you do it, you can actually open a raw ethernet socket and send directly infinite packets. In which case your own network layer. But these packets will not go past the first router. You see what I'm saying? Okay? Unless you re-implement IP and DCP and whatever else, right? So that's why this is not a contradiction, right? For example, UDP, which is another transport protocol, can hand over to IP a packet that is very big, and then IP is N24, will fragment. IPv6 will barge. Okay, let's give you an error. Right, so TCP requires the segment to break data into segments, and the receiver must reassemble segments. And because TCP is a connection-oriented protocol, right? With explicit establishment and tear down a connection, there's an acknowledgement for every packet. Well, there's an acknowledgement, okay? And lost packets, when the lost packets are detected or there's no acknowledgement coming through the center for a particular system, it has to re-transpense. And one of the more important things in TCP is the maintenance of what's called receiver window. Does everybody know what that is? So, normally, when you send segments one, segment two, segment three, segment four, you expect, normally, to receive them in the same sequence. But what if segment two gets lost? What if some router modifies a bit in segment two, and when it is received, it is incorrect. So, it's from away. So, it's essentially not being received. Or maybe it gets sent by a different route and gets stuck somewhere. So, that allows, so TCP handles this and allows the receiver to receive packets or segments that are not in order. And so, instead of expecting a window of size zero, meaning I receive packets one, two, three, the next one is four, right? It says, oh, I receive packets one, two, five, but I'm okay with receiving three, four, or six, okay? So, that's called the size of the window. The size of the window is dynamic based on the characteristics of the network of traffic, right? It has to do with, like, congestion on the internet, okay? And many other factors that influence the size of the TCP window. Now, IP is much simpler. Recall, it says vertical, but it's actually not a vertical. It is a packet format. It is an extreverse. Every packet is on its own. So, it uses either prefixes off or exact destination addresses for routing. Okay? What am I saying? When the packet arrives at a router, IP back, the router's main job is to take the destination of that packet and look that up in its routing table, FIB, forwarding information dates. That's a weird term. It's really a routing table. And it can be huge, huge, huge, especially for a backbone router. So, how does it look it up? Well, it's not the exact match. It's possible that the destination IP address is exactly present in the routing table. It says to this, for this destination address, go there. But most likely it's not like that. What it says is the prefix for that destination address is over there. So, you see this example destination here. So, it could be that the routing table can trace an entry for exactly this, or it could be that it contains an entry for 171, 64, 66. That's called a prefix. That's called a prefix. It's one example. 171 is also a prefix. That's the shorter prefix. So, what I think I'm going to do is it looks for the longest prefix, right? The most exact match possible. And that is the entry when it finds the entry with the longest prefix. It says, okay, what is the next entry? In that entry, you have all kinds of stuff, including which interface to forward it on next. What is the next stop for this package? It doesn't know the actual route, right? IP routers do not know the actual route this package will take to the destination. It's just the destination and the next stop. Okay. If no match is found, what's supposed to happen but doesn't always happen is an ICMP destination and reachable packet is generated back to the source. source. Okay? So, whatever you see in your browser post-unreachable, right? You're trying to load something unreachable, that's essentially what happens. Okay. So, long as we can match, of course, there are usually several hops, often more than several. If you actually do a trace route, you will see if you do a trace route and then give an IP address or trace out host names, you will actually see in excruciating detail the hops, the IP addresses of the hops, your packet takes from here to there. Okay. Now, the hops and ASs are different things, right? A hop is a physical hop from IP router to IP router or from IP host to the router or from IP router to the destination host, right? All these are physical hops. Now, there are AS hops, which means how many ASs you go through on the way to the destination. Well, every AS typically has at least a hop within it, right? So, you enter an AS through what's called an entry router and you exit through an exit router. They may be connected directly or there may be intermediate hops within the AS. So, trace route should tell you that, but some ASs do not expose their internal structure and they will not reply to this, will not respect the trace route. So, it's not guaranteed. Typically, what you see in trace route is correct, but it's not complete. All right. Any questions so far? ICMP is the protocol I mentioned, right? Instead of for plumbing on the internet, it's a very compact transport layer protocol that is used for exchanging maintenance messages. This is actually a protocol, not a packet format. I mean, it has packet formats, but it is a protocol meaning messages here are generated upon some events and they have mean. So, error reporting, congestion control, reachability, timing, etc. Okay? So, destination unreachable I already mentioned. Time exceeded. Oh, that's when TTL gets decremented to zero. Remember TTL and IP packet header? And this packet has been, yeah, usually set to 255. So, if something, if it reached zero, this packet has been looping around. Something is very wrong. Parameter problem, I'm not sure what the heck that is. Redirect to a better gateway means that, tells the previous gateway, your routing is messed up. You're sending it to be a packet, but there's a better place, better next hop of that packet than me. Reachability test, that's the one, echo reply, that's the one that trace round uses. And timestamp reply, this is also for when you put a timestamp option in an IP option field. TMI. Security issues. Many security issues because neither TCP nor IP were natively designed for security. Remember, it was all designed in a very, uh, prehistoric, friendly world, where nobody wanted to hurt each other, steal each other's information. So, uh, packets go by untrusted hosts, our routers, uh, sniff, and maybe log packets. And sometimes, for good reason, organizations, uh, companies will often log all IP traffic that comes from inside out and also inside in for all kinds of, uh, auditing purposes. Like if shit hits the fan and things go wrong, they need to investigate and figure out, ah, how exactly sort of forensically figure out what happened, right? Where did the malware come in? Where did the phishing come in? Where did the routing update, you know, fake routing that they can be so they need to do this. And so this logging can, or sniff, sniffing can happen for benign reasons, or it can happen for non, for malicious reasons. IP addresses, as, as, as we talked about, are public. They're not hidden, um, unless you're using IPsec, but even with IPsec, right, the outermost IP here is visible. And it often provides some information. Uh, TCP connection. So IP is difficult to abuse by itself because it's not a protocol, but TCP is a protocol. And you saw the state diagram that I hope impressed the heck out of you, right? There are actually courses out there. When I was in grad school, we had to memorize the freaking TCP diagram and answer, you know, final questions that you should feel, you should feel lucky. I mean, pretty much everybody failed that. But, but it was, it was rough. Um, TCP requires state, right? Because the connection is this connection oriented protocol and every connection oriented protocol on the face of this earth requires state here and there at the source and the destination or whatever the connection endpoints, right? And that state isn't free. Depending on how your, uh, network protocol stack is implemented within the kernel, outside the kernel, it is consuming memory and resources. There is a whole course discussion of whether you should put, you know, an operating system should keep the network stack inside the kernel or outside the kernel. Outside the kernel makes the kernel nicer, smaller, easier to find bugs, et cetera, et cetera, faster maybe, but putting it inside makes networking faster. Because if the, if the networking stack runs outside kernel space, you have to switch into the kernel often, right? Because there's some still controls that need to take place. Anyway, um, state is important. And there are attacks and so attacks on that state. And we will see one very impressive example called SynthFlight. Also, TCP state, the state that is maintained at both ends of a connection is not secret by nature. And because it's not secret, it can be sometimes easily guessed. And if you guess that state correctly, you can manipulate the connection by injecting traffic into it. Even from my outside, from far away, from far away, you can inject traffic into it. And you can even close a connection, which is kind of a nifty denial of service attack. Okay, so sniffing is not so impressive, right? So what they have to do just sniff. But years ago, back in the 90s, early 2000s, there was still a lot of alignment, there were most implementations of these commands like ftp, telnet, rcp, you may have run into these commands. And they still exist in many Unix versions, right? FTP file transfer, telnet, remote login, rcp, remote copy, RSH, remote shell. Okay, these commands required passwords, right? But they sent them in the clear. Because remember, the world was friendly. Yes, you have to have a password that if you sniffed on those packets that were sent back and forth, and you sniffed on them in the beginning of a connection, you would actually get a clear text password. Now, why am I telling you this? This is prehistory, right? Well, the truth is, prehistory is not actually that much of a prehistory. Because out there in the real world today, there are still Windows 3.0 implementations running. Yes, legacy, like from the 90s, there are many places, especially in industrial control, where really obsolete operating systems are used. Why? Because some software is written to take advantage of those operating system features, and nobody knows because the people who wrote it probably are dead now, okay? Or in a retirement home and demented, or doing something else, and nobody learned how to program on Windows 3.0 because it's so old. You get the point? Just like NASA and the federal government in general has gazillions of lines of code in various software installations that run COBOL. Maybe your grandparents know what COBOL is, if they were in the tech industry. But COBOL is a language from the 60s. Tons of code was written in COBOL, and a lot of it still remains. Because nobody knows COBOL programmers today earn big bucks. If they're alive. Anyway, so these, these things still out there. The other thing is that if you, the Ethernet itself, right? So I'm stepping down into the data link layer. Ethernet by itself has some very interesting features. Most Ethernet interfaces have a way of being put in what's called promiscuous mode. And this is how ethereal works and TCP dump, if you've used those pretty popular programs. They put the card in the, in the promiscuous, your card, the NIC, the network interface control module, into this promiscuous mode. And you basically receive all the packets sent on the second. So it means that if one of you does this with ethereal and TCP dump, you should be able to see everything that goes on here, maybe even outside, as long as the same access point is being used. Right? It's called an Ethernet segment, right? So you will hear all the packets on the Ethernet segment. So that's not very nice, but that's how it works. Now, if there's wireless security, like web, web, WPA, or something like that, plus there is IPsec, plus there is SSL, you won't get anything. But at the very least, you'll see who is communicating. You will also see how much they're communicating. Right? You will see, oh, a particular Ethernet MAC address is talking to the access point, and it's sending large chunks of stuff. Oh, maybe somebody is recording this lecture here. God forbid. Or they're not sending large chunks of stuff. Small chunks, they're receiving large chunks in regular fashion, like regularly. Ah, somebody here is using streaming video. Right? Or it will be sending small chunks of small Ethernet packets upwards and receiving kind of irregular size things back. Well, they're probably just browsing the web, right? So information is power. So one example of an Ethernet, sorry, of an attack that works on the Ethernet, but is actually not an Ethernet attack, is the SMRF. Don't try this. You may actually find a few places where this would work. It shouldn't work today because of some remedial measures, but the SMRF attack basically works like this. You have, you see, these hosts, these computers are on the same Ethernet segment. It doesn't matter if this is wired about wires, okay? Okay, so they're on the same segment, and they're controlled by that router. So if they talk to each other, they talk directly, but if they talk to anybody outside, they go through the router, okay? Kind of like we do go through the access point here. Okay, so suppose the adversary has a victim, some computer, right? Some phone, a computer or tablet or something with an IP address, okay? That victim is somewhere else. Could be close nearby, could be far away. Okay, so what the adversary does is it generates an ICMP packet, okay? ECHO request with ECHO request back. And according to the protocol specs, when a host receives an ICMP ECHO request, it's supposed to reply with ICMP ECHO reply. Nothing, nothing bad about that, but if you generate this packet from outside, right? That Ethernet segment, it goes for the router, and then, as long as you put the destination broadcast address, and by the way, there is such a thing, right? 255, 255, 255, 255 means everybody's supposed to receive this. Everybody will receive it and dutifully generate an ECHO reply. Now, my silly picture has three hosts on that set. But what if there is a 10,000 host on that set? Two things will happen. One is the router will get a bit clogged. Maybe not so much. But that victim is going to get overwhelmed, because especially if the adversary generates at nearly the same time a bunch of those ECHO requests to different Ethernet segments out there, and everyone will reply to the poor victim. Yes. The adversary also, you see, and the source, as the source does not put his IP address, puts the victim's IP address in red. I think that IP address is unauthenticated. So the router will pass it, all the hosts on that segment will receive it, and dutifully reply. Once you know the problem, it's easy to fix, right? But the problem existed for a while. You see this problem? Don't turn off broadcast. Maybe that is a bit heavy-handed, because there may be legitimate reasons to use broadcast within here, within this segment. But what you do instead, you say, fill the router. You should not allow external packets address to the broadcast address. Right? Simple. You cannot authenticate the source that victims address. You don't know if it's true or not. But what you can do is say, broadcast can only be on the inside. The router does not pass any any broadcast address pattern. Just drop it. That's it. Ring of death. Even that might still exist. This is very old, but that might still exist somewhere. Because if you have an old, like, I think 3.0 or 3.1 Windows machine, there was a bug in the kernel. And what if, because, of course, IP was inside the kernel, so an ICMP packet with a payload over 64k was received, bam, crashed. It's not supposed to send IP packets over 64k, but if somebody does, there was no check. So memory was overwritten. Some important stuff was overwritten as a result. Right? Because what does it mean received? You receive a packet and you have to copy it into some buffer, right? Yeah, you all programmed at one point in your life, right? You have to copy it into some freaking buffer. But if the buffer is set hard-coded 64k, and you receive a packet of 128k, what's going to happen if this bug is present, if you don't check the boundaries? You're going to keep writing. And the extra 64k are going to overwrite something damn important. Boom. Okay, it's easy to fix once you know. Right. Then there's teardrop. They all have cutesy names, right? Teardrop. Remember we talked about overlapping fragments, right? So that's one. Except this is for TCP, not for IP. Right? So you can have this overlapping in IP. You have fragmentation offset, remember? That's for the same packet. While the same thing, similar thing happens in TCP, except remember TCP sends segments. And every segment has an offset field. It's not a fragmentation. It's just offset into the conversation, right? And if you send overlapping offsets, then bad things would happen. Right? So the attacker says offset filter overlapping values. And then when you reassemble, remember what happens when you reassemble things with overlapping values, you wind up also overwriting stuff. So it would crash. Again, easy to fix once you know. I love this one. I don't know why it's called land. But there was also an older version of Windows, again, I think 3.0. Where if you send an IP packet with a source address and a destination address the same, meaning itself. So it's like saying, oh, the packet comes from the outside, but the source address is this host. And the destination address is this host. And the port numbers are the same. It will just, like, lock the CPU. Go into, like, obviously an endless loop. So easy to fix. You shouldn't be receiving packets with your address as the source. Hey, right? Uh, okay. Reminded by TCP handshake. We're not down to TCP. Yeah. Three-way handshake. Three packets. So not, like, one and a half round check, really. Now remember, client starts the connection, right? Client starts the connection because client has something to say to the server. Now here, the server doesn't have to be a web server, right? We're talking about just a connection. So just think more broadly than just a web. So the client starts with the sin packet, the sinc. The server, when it receives the packet, says, oh, ah, new connection request. Wonderful. Let me allocate some state. Let me reserve a little space in my table. I have a stable of open connections. Let me create a new entry. Let me put the source address of this packet, meaning the client's source, IP address there. Let me put the fact that the connection is ongoing. It's not established, okay? And sometimes, many times, spawn a thread. That is, threading is such a cool paradigm, right? Everybody loves threading, right? So spawn a new thread for that connection and go on to another thing, okay? You don't want to sit there, right? And be dumb, you know, to just like receive a packet and then send a packet and then wait, right? And lock up and nothing happens. Now, you spawn a thread, that thread corresponds to this connection that is not yet established. And then you go on to do other things, right? Like receiving more connection requests, okay? Makes sense. As soon as you spawn a thread reply, the server replies with its, as the protocol dictates with sin s, which is the server sin, and the act saying, hey, here's client, here's your act. I acknowledge having received your connection request. The client is then supposed to reply with act to the server act s. And at this point, the connection is established, okay? Remember with the firewall lecture, we had this like one example where there was a table and it's a connection like established. So it wasn't in the being established, it's already established, right? So at this point, connection is established on both hands. That's the normal way of doing things. That's how it's supposed to happen. Now here's a sin-flying attack. The adversary doesn't have to play by the rules, right? That's why it's the adversary. The adversary generates in quick succession, or almost simultaneous, a large number of sin packets. This is the opening salvo, right? The first packet in the TCP connection is a sin from the client. The second packet. Bam, bam, bam, bam, bam, bam. For every stupid sin, the server says, how nice, let me open a, let me spawn a thread, dedicate some buffer space or table space. Do you see what's happening? This grows faster than a mushroom under the brain, right? It expands immediately, like the consumption. Many threads get created, right, at almost the same time. The server chokes. Runs out of space. No more space. No more TCP connection. Including no more legitimate TCP connection. Do you see the point? It's not that necessarily, maybe the, maybe the adversary's goal is to just bring down the server. Or maybe the adversary's goal is to prevent legitimate TCP connection. Same effect. Top problem. So, it costs nothing for the attacker to do this. Also, my silly example on the previous slide showed one little red devil. One attacker, right? I'll let it fool you. It could be one attacker that controls multiple zombies around the internet. Right? A botnet. Every member of that botnet could generate that kind of a sin storm. Get the idea? The combination. One zombie, eh. A million zombies? The server is dead. It's dead. Plus, traffic gets congested, right? So, especially nice thing about controlling a zombie botnet is that zombies, ideally, are distributed well. Zombies everywhere in the world, they control them. On command from the command and control center, they start generating these sins to the victim. What happens is a funnel effect. Because the zombies are distributed at the source near them, nothing bad happens. But as they get closer to the victim, right, the funnel takes place. The traffic gets more concentrated. Higher volume, yes? You see that? Like, think about the victim's ISP. All of a sudden, the victim's ISP is going to get more concentrated. So, not only the victim is going to get screwed, but nodes next to you, IS. The ISP IS is going to get congested. So, it's going to affect more than just the victim. Okay. So, you can read this, right? The point of this attack is a classical example of a symmetry. Why a symmetry? Very clear, no? It costs nothing to generate a sin. It costs nothing to generate a thousand sins. For a client. But for a server, there's an investment. It's asymmetric. It has to create state, right? Allocate memory. Spawn a thread. Even you say, oh, why didn't you spawn a thread? There are other paradigms you could use. Yeah, yeah, yeah, yeah. Sure. Spawning a thread is not required. But even if we weren't spawning a thread and using a different paradigm, we'd still have to allocate space. We'd still have to have a new connection. Something to remember about this, you know, not yet established connection, yeah? That's the asymmetry. Have you seen examples of this before? Anybody? Asymmetry. In attacks. Hell, most of you were born just probably after 9-11. 9-11, that horrific attack at the World Trade Center was an example of asymmetry. Over 3,000 people died, two skyscrapers were destroyed, a plane full of hijackers and innocent passengers flew into the building. That's an asymmetric attack. A guerrilla, terrorist, freedom fighter, call it whatever, with an RPG taking down a helicopter is an asymmetric attack. 9-11, it costs very little. You can probably buy an RPG, you know, across the border for a thousand dollars. Cheaper if you buy in bulk. A helicopter costs a gazillion dollars. 100, 140 million dollars. You bring down a helicopter with an RPG, that's a symmetric attack. Okay? Sorry to make this automatic. You get the idea. Asymmetry. It's unfortunate, but that's how it is. Now, what can we do about it? With a helicopter? Plants flying into buildings. I'm sorry, but there's not much we can do. But here we could do something. First, we examine the problem. What creates it? This sort of state allocation, asymmetric. Guys, the client is not dedicating anything, right? The client, a benign client in TCP, is supposed to allocate state before sending the SIM. He says, hey, I'm going to open a connection, right? So it creates a state space, and it's, you know, a table. It doesn't necessarily spawn a thread. It could. So it creates space, allocates memory, whatever, and then sends the sensee. But an adversary doesn't have to play with the rules. It doesn't need to allocate anything. It just can generate sensees at infinity. So he's not losing anything. Just sending packets. Now, one solution is cookies. And you think, oh, it's going to use web. No, no, it's not web, but it's similar to the web cookies. Okay? And the idea is, if instead of state allocation on the server side, will it receive that SIM from the client, if the server could somehow avoid creating state, then maybe it would solve this problem. And that's what this solution does. So here's a cute little solution. This is from about 15 years ago. It is, in fact, deployed. It is compatible with TCP. So you wouldn't know if it's deployed on a particular server, right? Unless you actually snoop on traffic. Okay? So the client starts with a sensee, right? Just like it does. We don't know if this client is good, bad, or ugly. Just a client. The server receives that sin. And remember, TCP server is over listening, right? That's why it's called the server. It's listening. So it gets the sensee, but that does not spawn a thread, does not create any state. That's the cool part. What it does, it replies with a sin as an axi, which is that second packet, the way it's supposed to, but it abuses or repurposes one of the field, which is a sequence number. Now the sequence number there in the reply, okay, is like, you get 16 bits, right? I think it's 16 bits. So what it does is, no, 32 bits, excuse me. And instead of leaving it be, to be whatever, zero, zero, right? Because at that point, no data has been, you know, sent back and forth. No real data, right? No application. It puts a certain value, and that value is a function. You see the function f of source address, destination, sorry, source port, destination address, destination port, course time, that's server's own time, right? Maybe rounded, not exactly like nanosecond precision, but let's say rounded to the nearest, I don't know, 10 milliseconds or something like that. That's server's own clock. And most importantly, server's secret, the key. A key that only server knows, so it's not shared with anyone. Okay, so it computes this 32-bit quantity and stuffs it into the sequence number field. The client receives the SNS-ACC packet and actually doesn't do anything. It's supposed to echo the sequence number back. That's according to the rules. It's supposed to echo that sequence. That's TCP rules. So the client does not know what's going on. He is not aware of any of this defense. So he just beautifully generates S for, you know, and includes the cookie, which he copies from the, is supposed to, as supposed to from the sequence number. Aha! So now the server says, okay, I am going to recompute the cookie. Why? Because you see, where does this source address, source port, destination, position report come from? They come from the IP packet. That is that first one, right? The SIN-C. Make sense? So that magenta field, right? It captures the source address, destination address of the original packet that opened the connection, the ones to open the connection. Now this S is also an IP packet, right? To the TCP, et cetera, et cetera. But the IP header, if it's an honest client, will contain the same IP source and the same IP destination and port numbers as it did in the original packet, yes? If the client is honest. So what the server does is says, ah, extracts the cookie and says, well, let me get the IP source, IP destination, the port numbers from this packet. I know my own secret. I know the course time, right? Because the time, not much time has passed, right? So it just recomputes the cookie and compares it to the one received in this packet. If the cookie values match, then it says connection is open, it creates a state. One second. If they don't match, throws it away. That's it. No big loss, right? As if it has never happened. Ah, good question, right? Okay, I was waiting for that. Why doesn't the attacker just play along? Tell me, why? Excellent exam question, but now it's gone. Why doesn't the attacker do the same thing? He knows what the, he knows the cookies look off. He can guess that the server is playing along, or he's playing this game. He can just do it. Pretend that, otherwise, sure. Any ideas? Any ideas at all? Why does this help at all? It helps because, remember the original attack, machine gun, bam, bam, bam, bam, right? One sin after another, bam, bam, bam, bam, bam. You can put different distance, source addresses in there, right? Yes? But now things have changed. The adversary before, let's for a second consider the adversary with a single host coming from a single computer, single IP group. The adversary would generate a large number of SIN requests, right? The initial packet, essentially machine gun the server, starting, you know, strangling itself to death. But now, in order for the server to delegate any resources, the client has to be there to receive the SIN ACK, right? Otherwise, server hasn't done anything. You get it? You get it? So, if the client did not receive the SIN ACK, he cannot generate ACK S, because he doesn't know the cookie. He doesn't know the cookie. One variation of this is to say, oh, the server, forget the cookies, let's not use cookies, but let's change TCP on the server so that server only allocates space after he receives an ACK S for the client. That's not a keyword. That's equally stupid as the original. You see why that is? Because if the server only allocates state after he receives ACK S without the cookie, generating ACK S is easy for any client, because it contains nothing secret. But the trick in this specific solution is that the cookie is computed with a secret known to the server, and no one can create valid cookies but the server. Now, somebody can snoop on a cookie. You can copy a cookie. But a cookie is only valid for a little bit of time. Okay? And if the source address doesn't match, cookie will be thrown away. So the whole idea is that it does not prevent the attack complicate. It makes it much harder for the adversary, because the adversary has to essentially complete that three-way handshake with the server for every fake connection it tries to establish. So yes, the server will still create the state and maybe spawn a threat, but it will only do it here, when this succeeds. Not there when it first receives the path, the original path. Questions? So, in reality, what is F? Because, okay, 32 bits is not really an encryption technique. So it's really more like a hash function. Okay? Because you kind of like stuff encryption in there. It's a hash function. Like the one with cryptographic hash. Typically, it's an AES, like AES-based hash or truncated SHA. Truncated means the server computes, recomputes the hash, which is like 128 bits, but only uses 32 of those. So the unfortunate thing about this approach is that it is restricted to 32 bits, which means that if somebody guesses a cookie, they can attack this technique. But guessing a cookie is probably the 1 over 2 to the 3 too. So it's not that easy to guess a cookie. Right. All right, this is just a verbal description. There's that, just take a second to read through this, but basically it's a word I already said. Right, so this will be, one thing to know is, of course, the IP address of the source may still be both. But that's not really a service for money. The server doesn't really care about it. Okay, a completely different approach, which uses no secrets, and is just a little bit kind of over the top, but works surprisingly well, it's called random deletion. And that is, it works like this. It works like this. When a server gets these connection requests, the initial connection requests to send C from the client, what it does, it creates an entry in this table. Right? Kind of like this, I have a half open means the connection is in progress. It's not, it's not established yet. So that C results in a new entry in the table. I don't show the entire table, I'm just showing that. This says, oh, I have a connection that is in the process of being open with all of these four hosts, right? It's not established yet. And so this table has limitations, right? It's like maximum size of some sort, right? About 10,000, a million, right? Depends on a lot. It's a web server, it could be many millions. But when it reaches its limit, right? What you do is you just delete random entries. Just pick the brand number and delete one. Okay? Next time it's full, delete one. Now when connections close, right? The entries get flushed anyway, right? Connections get, in TCP, I don't remember if I said that. There's an explicit connection teardown, right? Using RSD reset plan that terminates the connection. There's like a handshake there too. Or connection can be terminated due to timeouts. And whenever connection terminates, of course, the server will remove the entry, right? Free the entry. So some entries will be terminated one way or another and some will be just randomly deleted. Now what does that do? That's bad for an honest connection. That is like an honest host that is trying to establish a connection. But it's also bad for the fake connections, right? Because if you put it random, right, the entry to delete, you're penalizing everybody equal. So legitimate connections have a chance to complete and fake will be eventually deleted, right? Because they will timeout. Now the other thing I should have mentioned earlier is, of course, the server when it dedicates space, right, or creates a state that is for a connection that is not established, right, during the three-way handshake, if the three-way handshake does not complete, that connection will timeout. It will be deleted. Okay, so it's not like it spawns a thread, dedicates space, and it stays there forever. No, it gets flushed out, but not soon enough. That's why that original attack worked, because the industry generated many, many, many, many connection requests at the same time, or almost the same time. Right. Spoofing. So the other thing is, remember I said sequence number, port numbers, right? Sequence are like offset, right? When I say sequence number and offset, they're the same thing. And port number, right? Every connection is associated with the port number. So there is nothing inherently secret in a TCP connection state. Port numbers, especially for server ports, are easy to guess, right? You don't need to guess them, right? Okay. They're well, they are signed, right? HTTP, FTP, ICMP, whatever. They're telling that they all have well-known port numbers. Sequence numbers are not like fixed, right? They change. Sequence numbers means you start with zero, then you send 1500 bytes, then it becomes 1500, right? You send another 500 bytes, then it becomes 2000, right? So these are the sequence numbers. Number of bytes exchanged so far, in one direction. Well, an adversary who is sitting along the path between a sender and a receiver, right? As the adversary is here, between, might actually see the sequence numbers. So that adversary can generate like a reset, and then close the connection, or inject packets into the connection, you see? Pretending that, you know, that they're part of this connection. But the more interesting thing, but that's, you could say, well, you know, you could protect against that, maybe this is inside an organization or behind some kind of a firewall or whatever. But it doesn't have to be inside a firewall organization. It's just that the adversary might be like here, far away, not on the path, between the source and destination, right? Most cases, in the realistic cases, in the internet, right? The adversary isn't actively snooping up, or is actively interfering. He's not on the path between source and destination. The adversary is somewhere else in the basement of his grandma's home in Slavonia, okay? So how is that adversary attack? Well, that's the interesting part. The adversary can actually guess, he knows the initial sequence number is always zero, right? I mean, it's a typical connection, because it starts with zero bytes. And then he can guess, okay? You just guess. Well, you say, you know, guessing is hard, because remember I said the sequence number is 32 bits, right? So guessing 232, not that easy. But remember window size? So if the DCP window size is zero, which means DCP is super strict, it wants to receive things exactly in order, this attack will not work. But in the real world, over the internet, right? We communicate DCP session over the internet. There's loss, packet loss, there's congestion, there's all the other factors that dictate for DCP to have a flexible window size, the window size of the packets, or offsets it willing to receive, on the recipient right there. Which means the adversary has a larger space to play with. As long as the adversary generates packets with the offset within the window size, they will be accepted. It makes sense. So, that's what we have. And this is especially the case when you are like communicating with, I say, with your portable devices, with like smartphones. And I see you're driving, walking around, you're somewhere where the connectivity is not very good, and you have a DCP connection. And you're watching streaming video, you could be browsing the web, whatever. But, what happens in these environments, is that there can be sudden, like massive packet loss. You know, you have a poor connection. It happens. Like, I drive for Crystal Cove, a bunch of times, every week. You drive on PCH for Crystal Cove, you're going to have that happen. Because the cellular connection is terrible. And of course, IP runs over cells. So, there's always a massive packet loss. So, clearly, the window size, on the receiving end, not to lose the connection, has to accommodate that. And the window size has to be large. Right? So, what the adversary can do, is instead of sending one packet, fake packet, injecting into DCP connection, the adversary can just generate the flood of packets, all with different offsets, right? Or sequence numbers. Hoping that at least one of them will fit in the window. And if one of them does, well, great. It will be accepted. Including reset. So, you can also, like, if reset is, like, terminate the connection. It's a, there's a flag, like, send flag, add flag. In the DCP header, there's, remember, there's a flag still. And one of the flags is RST, or reset. And that signals to the receiving party that the connection is being terminated. What's the nature? Well, I mean, it's kind of denial of service, right? Your connection is suddenly reset. You may have seen, you may see this sometimes, what in, in some browsers will display, like, connection reset. Have you seen that message? Black screen, connection reset. Yeah, that means something, the server terminated the connection, or time had it occurred. Usually, the explicit connection was terminated for some reason. So, so that's what happens. Not a huge problem in many cases, unless the TPCP connection is critical. Like, for example, some routing protocols, remember routing, maintain long-lived TCP connections between adjacent routers. Especially, let's say this is one domain, and this is another domain, and here we have two border routers. And they maintain this connection. Long-lived TCP connection. Not for forwarding packets, but for exchanging routing information. Okay? Like DGP. We'll talk about it later. And if you reset this connection, that requires them to reset the connection and restart. And routers don't like to do that, because that's not their critical path. That's not what they do. In fact, they need to do things fast. Restarting a new routing, sorry, TCP connection takes time. So, that's real denial of service. Also, UDP. UDP is not as popular as TCP, but it is used. Okay? It's unreliable. Use stands for unreliable. Tells you everything. Unreliable datagram protocol, which is a very, very lightweight transport layout that runs on top of IP. It has port numbers, just like TCP, but doesn't have a connection established with DGP. It was super popular years ago for these P2P applications. Anybody remember P2P peer streaming? Yeah. So, it was really popular because the idea was that it was too hard to run TCP servers, right? On like small devices. So, instead, if you run UDP, you didn't have to run a server. You could just like have light. There's no establishment connection, no teardown. You just like wanted to grab an illegally copied movie from somebody near, you know, on a laptop. It just did it quickly without having to establish a connection. But UDP provides no closeness, no flow control, no windows, nothing. So, UDP flooding is easy. They just generate a bunch of UDP packets. Now, some, some operating systems, some hosts do not accept UDP traffic. Some screen it more. But natively, UDP traffic is not screened. So, well, what can we do about all of this, all of these data? Well, you know, at the Bob transport layer, we can use things like a purpose, sure, right? Remember that. A Bob network layer, we can use this as a cell TLS or as a stage. I think Cap is a stage, a different alternative. And the network layer. Also, okay, but that's, that's a purpose. Remember, it provides user authentication, client authentication, server authentication, but does not protect you against, like, network attacks. So, any kind of connection hijacking, connection spoofing, you know. SSL TLS will protect you at this, kind of this session layer, but does not against denial of service. For example, SYN flooding. You cannot prevent with SSL TLS. Or UDP flooding. As a network player, you can use IPsec. IPsec is great. It will protect you against connection, hijacking, injection, all of the attacks. Pretty much all the attacks I just described can be fixed with using IPsec. But IPsec is a heavy machinery. It demands what we didn't cover is like establishment of keys and then the actual connection in maintenance there. It's not free. You will see a performance degradation for your network. So it's pretty much the best solution there is for preventing these kinds of attacks. mitigating these types of attacks. But like I said, there's performance penalty and also the key management is just very, very complicated. Okay? So if you work for organization where they set up IPsec, that's great. But for yourself, it's not easy. And below network layer, none of these attacks can be solved except for the one that the SMART. Okay, I think we'll end here because the rest of it has to do with routing and you'll probably forget if I just start. All right, see you Thursday. We'll see you from", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.24, "text": " perverse a number of what's called autonomous systems. Some autonomous systems are called", "tokens": [50365, 680, 4308, 257, 1230, 295, 437, 311, 1219, 23797, 3652, 13, 2188, 23797, 3652, 366, 1219, 50777], "temperature": 0.0, "avg_logprob": -0.39485921739022944, "compression_ratio": 1.7427184466019416, "no_speech_prob": 2.3691066469710975e-12}, {"id": 1, "seek": 0, "start": 8.24, "end": 14.24, "text": " stomp, because you need stomp, meaning that they're like ISPs, that they provide services", "tokens": [50777, 342, 8586, 11, 570, 291, 643, 342, 8586, 11, 3620, 300, 436, 434, 411, 6205, 23043, 11, 300, 436, 2893, 3328, 51077], "temperature": 0.0, "avg_logprob": -0.39485921739022944, "compression_ratio": 1.7427184466019416, "no_speech_prob": 2.3691066469710975e-12}, {"id": 2, "seek": 0, "start": 14.24, "end": 22.400000000000002, "text": " to individual customers. And then there are these transit or backbone ISPs that essentially", "tokens": [51077, 281, 2609, 4581, 13, 400, 550, 456, 366, 613, 17976, 420, 34889, 6205, 23043, 300, 4476, 51485], "temperature": 0.0, "avg_logprob": -0.39485921739022944, "compression_ratio": 1.7427184466019416, "no_speech_prob": 2.3691066469710975e-12}, {"id": 3, "seek": 0, "start": 22.400000000000002, "end": 28.48, "text": " do not deal with individual customers, but rather provide, well, just transit services.", "tokens": [51485, 360, 406, 2028, 365, 2609, 4581, 11, 457, 2831, 2893, 11, 731, 11, 445, 17976, 3328, 13, 51789], "temperature": 0.0, "avg_logprob": -0.39485921739022944, "compression_ratio": 1.7427184466019416, "no_speech_prob": 2.3691066469710975e-12}, {"id": 4, "seek": 3000, "start": 30.0, "end": 40.24, "text": " And so an autonomous system, as I think I have mentioned at least a couple of times,", "tokens": [50365, 400, 370, 364, 23797, 1185, 11, 382, 286, 519, 286, 362, 2835, 412, 1935, 257, 1916, 295, 1413, 11, 50877], "temperature": 0.0, "avg_logprob": -0.11239375343805627, "compression_ratio": 1.6911764705882353, "no_speech_prob": 1.4634406967500846e-12}, {"id": 5, "seek": 3000, "start": 40.24, "end": 45.04, "text": " is a collection of resources under the control of a single administration.", "tokens": [50877, 307, 257, 5765, 295, 3593, 833, 264, 1969, 295, 257, 2167, 7236, 13, 51117], "temperature": 0.0, "avg_logprob": -0.11239375343805627, "compression_ratio": 1.6911764705882353, "no_speech_prob": 1.4634406967500846e-12}, {"id": 6, "seek": 3000, "start": 45.92, "end": 52.879999999999995, "text": " It is typically contiguous. So you can have autonomous systems, or you can have an organization", "tokens": [51161, 467, 307, 5850, 660, 30525, 13, 407, 291, 393, 362, 23797, 3652, 11, 420, 291, 393, 362, 364, 4475, 51509], "temperature": 0.0, "avg_logprob": -0.11239375343805627, "compression_ratio": 1.6911764705882353, "no_speech_prob": 1.4634406967500846e-12}, {"id": 7, "seek": 3000, "start": 52.879999999999995, "end": 59.2, "text": " that is so large that it has multiple sites, multiple locations on the internet, and then", "tokens": [51509, 300, 307, 370, 2416, 300, 309, 575, 3866, 7533, 11, 3866, 9253, 322, 264, 4705, 11, 293, 550, 51825], "temperature": 0.0, "avg_logprob": -0.11239375343805627, "compression_ratio": 1.6911764705882353, "no_speech_prob": 1.4634406967500846e-12}, {"id": 8, "seek": 5920, "start": 59.2, "end": 64.8, "text": " most likely you have different autonomous system numbers. Each autonomous system is assigned an", "tokens": [50365, 881, 3700, 291, 362, 819, 23797, 1185, 3547, 13, 6947, 23797, 1185, 307, 13279, 364, 50645], "temperature": 0.0, "avg_logprob": -0.17242319830532732, "compression_ratio": 1.7272727272727273, "no_speech_prob": 3.675240233674826e-12}, {"id": 9, "seek": 5920, "start": 64.8, "end": 70.32000000000001, "text": " official number. You cannot just pop up on the internet and become an autonomous system. You", "tokens": [50645, 4783, 1230, 13, 509, 2644, 445, 1665, 493, 322, 264, 4705, 293, 1813, 364, 23797, 1185, 13, 509, 50921], "temperature": 0.0, "avg_logprob": -0.17242319830532732, "compression_ratio": 1.7272727272727273, "no_speech_prob": 3.675240233674826e-12}, {"id": 10, "seek": 5920, "start": 70.32000000000001, "end": 74.16, "text": " have to register and apply for a number. You can be assigned a unique number.", "tokens": [50921, 362, 281, 7280, 293, 3079, 337, 257, 1230, 13, 509, 393, 312, 13279, 257, 3845, 1230, 13, 51113], "temperature": 0.0, "avg_logprob": -0.17242319830532732, "compression_ratio": 1.7272727272727273, "no_speech_prob": 3.675240233674826e-12}, {"id": 11, "seek": 7416, "start": 74.16, "end": 87.84, "text": " Okay. Various days. OSI, standard vertical stack that you probably would have seen in the network's", "tokens": [50365, 1033, 13, 14662, 851, 1708, 13, 12731, 40, 11, 3832, 9429, 8630, 300, 291, 1391, 576, 362, 1612, 294, 264, 3209, 311, 51049], "temperature": 0.0, "avg_logprob": -0.34645656510895373, "compression_ratio": 1.3486842105263157, "no_speech_prob": 3.075169242514053e-12}, {"id": 12, "seek": 7416, "start": 87.84, "end": 95.44, "text": " power source. Seven layers. It does not correspond to reality. At least not in the upper layer. The lower", "tokens": [51049, 1347, 4009, 13, 14868, 7914, 13, 467, 775, 406, 6805, 281, 4103, 13, 1711, 1935, 406, 294, 264, 6597, 4583, 13, 440, 3126, 51429], "temperature": 0.0, "avg_logprob": -0.34645656510895373, "compression_ratio": 1.3486842105263157, "no_speech_prob": 3.075169242514053e-12}, {"id": 13, "seek": 9544, "start": 95.44, "end": 101.84, "text": " core layers kind of do, because here we have the actual physical transmission, right? Some kind of", "tokens": [50365, 4965, 7914, 733, 295, 360, 11, 570, 510, 321, 362, 264, 3539, 4001, 11574, 11, 558, 30, 2188, 733, 295, 50685], "temperature": 0.0, "avg_logprob": -0.3114151201750103, "compression_ratio": 1.5906735751295338, "no_speech_prob": 2.788195672606686e-12}, {"id": 14, "seek": 9544, "start": 101.84, "end": 109.92, "text": " wireless or wired, not basically that, even pigeons, right? Whatever. And then on top of that,", "tokens": [50685, 14720, 420, 27415, 11, 406, 1936, 300, 11, 754, 48297, 11, 558, 30, 8541, 13, 400, 550, 322, 1192, 295, 300, 11, 51089], "temperature": 0.0, "avg_logprob": -0.3114151201750103, "compression_ratio": 1.5906735751295338, "no_speech_prob": 2.788195672606686e-12}, {"id": 15, "seek": 9544, "start": 109.92, "end": 117.44, "text": " you have a data layer, something that's called MAC layer, media access control, right? MAC layer. And above that,", "tokens": [51089, 291, 362, 257, 1412, 4583, 11, 746, 300, 311, 1219, 27716, 4583, 11, 3021, 2105, 1969, 11, 558, 30, 27716, 4583, 13, 400, 3673, 300, 11, 51465], "temperature": 0.0, "avg_logprob": -0.3114151201750103, "compression_ratio": 1.5906735751295338, "no_speech_prob": 2.788195672606686e-12}, {"id": 16, "seek": 11744, "start": 117.44, "end": 129.28, "text": " you have a network layer, where in our case, IP lives. And then in a transport layer, you have things like", "tokens": [50365, 291, 362, 257, 3209, 4583, 11, 689, 294, 527, 1389, 11, 8671, 2909, 13, 400, 550, 294, 257, 5495, 4583, 11, 291, 362, 721, 411, 50957], "temperature": 0.0, "avg_logprob": -0.27291960635427703, "compression_ratio": 1.4246575342465753, "no_speech_prob": 2.8757768735787614e-12}, {"id": 17, "seek": 11744, "start": 129.28, "end": 137.76, "text": " TCP, UDP, ICMP, and what else? Some kind of niche protocols. And then on top of that, you have things", "tokens": [50957, 48965, 11, 624, 11373, 11, 14360, 12224, 11, 293, 437, 1646, 30, 2188, 733, 295, 19956, 20618, 13, 400, 550, 322, 1192, 295, 300, 11, 291, 362, 721, 51381], "temperature": 0.0, "avg_logprob": -0.27291960635427703, "compression_ratio": 1.4246575342465753, "no_speech_prob": 2.8757768735787614e-12}, {"id": 18, "seek": 13776, "start": 137.76, "end": 146.72, "text": " like SSL and CLS, and HTTP, etc. And this has RPC, while this is a bit outdated, but remote procedure", "tokens": [50365, 411, 12238, 43, 293, 12855, 50, 11, 293, 33283, 11, 5183, 13, 400, 341, 575, 497, 12986, 11, 1339, 341, 307, 257, 857, 36313, 11, 457, 8607, 10747, 50813], "temperature": 0.0, "avg_logprob": -0.19431059177105242, "compression_ratio": 1.5125628140703518, "no_speech_prob": 3.0855513456773398e-12}, {"id": 19, "seek": 13776, "start": 146.72, "end": 153.12, "text": " calls that used to be implemented. This still is implemented on top of the transport layer. And then", "tokens": [50813, 5498, 300, 1143, 281, 312, 12270, 13, 639, 920, 307, 12270, 322, 1192, 295, 264, 5495, 4583, 13, 400, 550, 51133], "temperature": 0.0, "avg_logprob": -0.19431059177105242, "compression_ratio": 1.5125628140703518, "no_speech_prob": 3.0855513456773398e-12}, {"id": 20, "seek": 13776, "start": 153.12, "end": 159.76, "text": " the rest is like session and presentation layer. There's like a bit less clarity, how to map that.", "tokens": [51133, 264, 1472, 307, 411, 5481, 293, 5860, 4583, 13, 821, 311, 411, 257, 857, 1570, 16992, 11, 577, 281, 4471, 300, 13, 51465], "temperature": 0.0, "avg_logprob": -0.19431059177105242, "compression_ratio": 1.5125628140703518, "no_speech_prob": 3.0855513456773398e-12}, {"id": 21, "seek": 15976, "start": 159.76, "end": 173.2, "text": " So we call the data format. So your application will be passing the data forward to the transport layer.", "tokens": [50365, 407, 321, 818, 264, 1412, 7877, 13, 407, 428, 3861, 486, 312, 8437, 264, 1412, 2128, 281, 264, 5495, 4583, 13, 51037], "temperature": 0.0, "avg_logprob": -0.36440467834472656, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.0034141446495513e-12}, {"id": 22, "seek": 15976, "start": 175.2, "end": 183.68, "text": " The data that an application passes to the transport layer can be just a blob, okay? Some kind of blob,", "tokens": [51137, 440, 1412, 300, 364, 3861, 11335, 281, 264, 5495, 4583, 393, 312, 445, 257, 46115, 11, 1392, 30, 2188, 733, 295, 46115, 11, 51561], "temperature": 0.0, "avg_logprob": -0.36440467834472656, "compression_ratio": 1.5877862595419847, "no_speech_prob": 2.0034141446495513e-12}, {"id": 23, "seek": 18368, "start": 183.68, "end": 190.08, "text": " we don't care how long it is, as long as it fits in the address space of a computer, right? Available", "tokens": [50365, 321, 500, 380, 1127, 577, 938, 309, 307, 11, 382, 938, 382, 309, 9001, 294, 264, 2985, 1901, 295, 257, 3820, 11, 558, 30, 11667, 32699, 50685], "temperature": 0.0, "avg_logprob": -0.17719227927071707, "compression_ratio": 1.625, "no_speech_prob": 2.5945330953125456e-12}, {"id": 24, "seek": 18368, "start": 190.08, "end": 195.76000000000002, "text": " program memory, some kind of buffer. So we don't say how long this is. Let's just assume it can be", "tokens": [50685, 1461, 4675, 11, 512, 733, 295, 21762, 13, 407, 321, 500, 380, 584, 577, 938, 341, 307, 13, 961, 311, 445, 6552, 309, 393, 312, 50969], "temperature": 0.0, "avg_logprob": -0.17719227927071707, "compression_ratio": 1.625, "no_speech_prob": 2.5945330953125456e-12}, {"id": 25, "seek": 18368, "start": 195.76000000000002, "end": 204.32, "text": " arbitrarily long. And the transport layer, typically today, what happens is, if it goes to a DCP, right?", "tokens": [50969, 19071, 3289, 938, 13, 400, 264, 5495, 4583, 11, 5850, 965, 11, 437, 2314, 307, 11, 498, 309, 1709, 281, 257, 9114, 47, 11, 558, 30, 51397], "temperature": 0.0, "avg_logprob": -0.17719227927071707, "compression_ratio": 1.625, "no_speech_prob": 2.5945330953125456e-12}, {"id": 26, "seek": 18368, "start": 204.32, "end": 211.92000000000002, "text": " So a DCP is by far the prevalent protocol for transport layer, not the only one. But a DCP layer,", "tokens": [51397, 407, 257, 9114, 47, 307, 538, 1400, 264, 30652, 10336, 337, 5495, 4583, 11, 406, 264, 787, 472, 13, 583, 257, 9114, 47, 4583, 11, 51777], "temperature": 0.0, "avg_logprob": -0.17719227927071707, "compression_ratio": 1.625, "no_speech_prob": 2.5945330953125456e-12}, {"id": 27, "seek": 21192, "start": 211.92, "end": 219.67999999999998, "text": " what happens is DCP will look at the application data and say, okay, I am aware, I, DCP, I'm aware", "tokens": [50365, 437, 2314, 307, 9114, 47, 486, 574, 412, 264, 3861, 1412, 293, 584, 11, 1392, 11, 286, 669, 3650, 11, 286, 11, 9114, 47, 11, 286, 478, 3650, 50753], "temperature": 0.0, "avg_logprob": -0.15830004705141668, "compression_ratio": 1.5519125683060109, "no_speech_prob": 1.999292224830196e-12}, {"id": 28, "seek": 21192, "start": 220.72, "end": 230.07999999999998, "text": " of the maximum transmission unit of the lower layers. I know exactly what is the maximum packet size.", "tokens": [50805, 295, 264, 6674, 11574, 4985, 295, 264, 3126, 7914, 13, 286, 458, 2293, 437, 307, 264, 6674, 20300, 2744, 13, 51273], "temperature": 0.0, "avg_logprob": -0.15830004705141668, "compression_ratio": 1.5519125683060109, "no_speech_prob": 1.999292224830196e-12}, {"id": 29, "seek": 21192, "start": 231.2, "end": 238.56, "text": " So because it is aware, it will chop that application data into chunks or segments,", "tokens": [51329, 407, 570, 309, 307, 3650, 11, 309, 486, 7931, 300, 3861, 1412, 666, 24004, 420, 19904, 11, 51697], "temperature": 0.0, "avg_logprob": -0.15830004705141668, "compression_ratio": 1.5519125683060109, "no_speech_prob": 1.999292224830196e-12}, {"id": 30, "seek": 23856, "start": 238.56, "end": 246.96, "text": " and then slap a TCP header in front of each one of them. A unique DCP header that will be unique,", "tokens": [50365, 293, 550, 21075, 257, 48965, 23117, 294, 1868, 295, 1184, 472, 295, 552, 13, 316, 3845, 9114, 47, 23117, 300, 486, 312, 3845, 11, 50785], "temperature": 0.0, "avg_logprob": -0.26873484744301324, "compression_ratio": 1.622340425531915, "no_speech_prob": 2.3108106140395934e-12}, {"id": 31, "seek": 23856, "start": 246.96, "end": 251.52, "text": " because remember, DCP header has all kinds of things. But one of the things you should remember,", "tokens": [50785, 570, 1604, 11, 9114, 47, 23117, 575, 439, 3685, 295, 721, 13, 583, 472, 295, 264, 721, 291, 820, 1604, 11, 51013], "temperature": 0.0, "avg_logprob": -0.26873484744301324, "compression_ratio": 1.622340425531915, "no_speech_prob": 2.3108106140395934e-12}, {"id": 32, "seek": 23856, "start": 251.52, "end": 260.4, "text": " we talked about it, is data offset. Remember offset field? So for a given DCP connection, right, there will be", "tokens": [51013, 321, 2825, 466, 309, 11, 307, 1412, 18687, 13, 5459, 18687, 2519, 30, 407, 337, 257, 2212, 9114, 47, 4984, 11, 558, 11, 456, 486, 312, 51457], "temperature": 0.0, "avg_logprob": -0.26873484744301324, "compression_ratio": 1.622340425531915, "no_speech_prob": 2.3108106140395934e-12}, {"id": 33, "seek": 26040, "start": 260.4, "end": 268.56, "text": " different offsets when the application data is split out. But the source, destination, port numbers", "tokens": [50365, 819, 39457, 1385, 562, 264, 3861, 1412, 307, 7472, 484, 13, 583, 264, 4009, 11, 12236, 11, 2436, 3547, 50773], "temperature": 0.0, "avg_logprob": -0.16517217457294464, "compression_ratio": 1.5359116022099448, "no_speech_prob": 2.303486394683585e-12}, {"id": 34, "seek": 26040, "start": 268.56, "end": 276.96, "text": " in those PCP headers in multiple segments will be the same. So the offset field is very important,", "tokens": [50773, 294, 729, 6465, 47, 45101, 294, 3866, 19904, 486, 312, 264, 912, 13, 407, 264, 18687, 2519, 307, 588, 1021, 11, 51193], "temperature": 0.0, "avg_logprob": -0.16517217457294464, "compression_ratio": 1.5359116022099448, "no_speech_prob": 2.303486394683585e-12}, {"id": 35, "seek": 26040, "start": 277.59999999999997, "end": 282.15999999999997, "text": " and it's interesting because it serves as both the actual offset into the data,", "tokens": [51225, 293, 309, 311, 1880, 570, 309, 13451, 382, 1293, 264, 3539, 18687, 666, 264, 1412, 11, 51453], "temperature": 0.0, "avg_logprob": -0.16517217457294464, "compression_ratio": 1.5359116022099448, "no_speech_prob": 2.303486394683585e-12}, {"id": 36, "seek": 28216, "start": 282.16, "end": 292.32000000000005, "text": " but it also serves as kind of a sequencing. Except it's not incremented by one, it's incremented by the size of each segment.", "tokens": [50365, 457, 309, 611, 13451, 382, 733, 295, 257, 32693, 13, 16192, 309, 311, 406, 1946, 14684, 538, 472, 11, 309, 311, 1946, 14684, 538, 264, 2744, 295, 1184, 9469, 13, 50873], "temperature": 0.0, "avg_logprob": -0.3327121405765928, "compression_ratio": 1.4563758389261745, "no_speech_prob": 2.8253580031112335e-12}, {"id": 37, "seek": 28216, "start": 293.52000000000004, "end": 303.04, "text": " So at any time, a DCP connection, the offset represents the number of bytes, of data bytes,", "tokens": [50933, 407, 412, 604, 565, 11, 257, 9114, 47, 4984, 11, 264, 18687, 8855, 264, 1230, 295, 36088, 11, 295, 1412, 36088, 11, 51409], "temperature": 0.0, "avg_logprob": -0.3327121405765928, "compression_ratio": 1.4563758389261745, "no_speech_prob": 2.8253580031112335e-12}, {"id": 38, "seek": 30304, "start": 303.04, "end": 317.04, "text": " in that direction. It's unidirectional, which means that Alice is talking to Bob. This is going to reflect", "tokens": [50365, 294, 300, 3513, 13, 467, 311, 517, 327, 621, 41048, 11, 597, 1355, 300, 16004, 307, 1417, 281, 6085, 13, 639, 307, 516, 281, 5031, 51065], "temperature": 0.0, "avg_logprob": -0.3250769875266335, "compression_ratio": 1.417808219178082, "no_speech_prob": 3.466592681314329e-12}, {"id": 39, "seek": 30304, "start": 317.6, "end": 328.48, "text": " the number of bytes that Alice sent to Bob thus far on this DCP connection. Okay? Bob Mason, more or", "tokens": [51093, 264, 1230, 295, 36088, 300, 16004, 2279, 281, 6085, 8807, 1400, 322, 341, 9114, 47, 4984, 13, 1033, 30, 6085, 25730, 11, 544, 420, 51637], "temperature": 0.0, "avg_logprob": -0.3250769875266335, "compression_ratio": 1.417808219178082, "no_speech_prob": 3.466592681314329e-12}, {"id": 40, "seek": 32848, "start": 328.48, "end": 338.24, "text": " less, it has its own offset in Bob to Alice direction. Okay? At the network player, each DCP segment,", "tokens": [50365, 1570, 11, 309, 575, 1080, 1065, 18687, 294, 6085, 281, 16004, 3513, 13, 1033, 30, 1711, 264, 3209, 4256, 11, 1184, 9114, 47, 9469, 11, 50853], "temperature": 0.0, "avg_logprob": -0.20870552939930181, "compression_ratio": 1.5270935960591132, "no_speech_prob": 2.1686532777898115e-12}, {"id": 41, "seek": 32848, "start": 339.04, "end": 349.44, "text": " each DCP segment, will likely not get fractured. Okay? Because the DCP is aware that an IP header will be", "tokens": [50893, 1184, 9114, 47, 9469, 11, 486, 3700, 406, 483, 17948, 3831, 13, 1033, 30, 1436, 264, 9114, 47, 307, 3650, 300, 364, 8671, 23117, 486, 312, 51413], "temperature": 0.0, "avg_logprob": -0.20870552939930181, "compression_ratio": 1.5270935960591132, "no_speech_prob": 2.1686532777898115e-12}, {"id": 42, "seek": 32848, "start": 349.44, "end": 357.12, "text": " slapsed in front of you. So it accommodates that. It takes it into account. Okay? So now we have an IP", "tokens": [51413, 1061, 2382, 292, 294, 1868, 295, 291, 13, 407, 309, 11713, 1024, 300, 13, 467, 2516, 309, 666, 2696, 13, 1033, 30, 407, 586, 321, 362, 364, 8671, 51797], "temperature": 0.0, "avg_logprob": -0.20870552939930181, "compression_ratio": 1.5270935960591132, "no_speech_prob": 2.1686532777898115e-12}, {"id": 43, "seek": 35712, "start": 357.12, "end": 362.4, "text": " IP header, a DCP header, followed by data. That is faster than the data lake layer. In this case,", "tokens": [50365, 8671, 23117, 11, 257, 9114, 47, 23117, 11, 6263, 538, 1412, 13, 663, 307, 4663, 813, 264, 1412, 11001, 4583, 13, 682, 341, 1389, 11, 50629], "temperature": 0.0, "avg_logprob": -0.3561659348316682, "compression_ratio": 1.625, "no_speech_prob": 2.614662176006477e-12}, {"id": 44, "seek": 35712, "start": 362.4, "end": 373.2, "text": " it's Ethernet. Now Ethernet works over wires, twisted there, over fiber, it works over Ether.", "tokens": [50629, 309, 311, 38636, 7129, 13, 823, 38636, 7129, 1985, 670, 15537, 11, 23057, 456, 11, 670, 12874, 11, 309, 1985, 670, 38636, 13, 51169], "temperature": 0.0, "avg_logprob": -0.3561659348316682, "compression_ratio": 1.625, "no_speech_prob": 2.614662176006477e-12}, {"id": 45, "seek": 35712, "start": 375.44, "end": 381.68, "text": " Right? But it stands in, so that's physical layer, right? That's physical layer. What physical", "tokens": [51281, 1779, 30, 583, 309, 7382, 294, 11, 370, 300, 311, 4001, 4583, 11, 558, 30, 663, 311, 4001, 4583, 13, 708, 4001, 51593], "temperature": 0.0, "avg_logprob": -0.3561659348316682, "compression_ratio": 1.625, "no_speech_prob": 2.614662176006477e-12}, {"id": 46, "seek": 38168, "start": 381.68, "end": 390.08, "text": " media uses? But the MAC layer, okay, data lake layer, there's a standard, Ethernet standard,", "tokens": [50365, 3021, 4960, 30, 583, 264, 27716, 4583, 11, 1392, 11, 1412, 11001, 4583, 11, 456, 311, 257, 3832, 11, 38636, 7129, 3832, 11, 50785], "temperature": 0.0, "avg_logprob": -0.3077754705724582, "compression_ratio": 1.5898876404494382, "no_speech_prob": 2.4972307208215305e-12}, {"id": 47, "seek": 38168, "start": 390.08, "end": 396.24, "text": " that says exactly how packets are formatted. So the network layer, IP packet comes in,", "tokens": [50785, 300, 1619, 2293, 577, 30364, 366, 1254, 32509, 13, 407, 264, 3209, 4583, 11, 8671, 20300, 1487, 294, 11, 51093], "temperature": 0.0, "avg_logprob": -0.3077754705724582, "compression_ratio": 1.5898876404494382, "no_speech_prob": 2.4972307208215305e-12}, {"id": 48, "seek": 38168, "start": 397.04, "end": 404.4, "text": " and Ethernet header is added, and then Ethernet tree lays again. So the packet essentially encapsulates", "tokens": [51133, 293, 38636, 7129, 23117, 307, 3869, 11, 293, 550, 38636, 7129, 4230, 32714, 797, 13, 407, 264, 20300, 4476, 38745, 26192, 51501], "temperature": 0.0, "avg_logprob": -0.3077754705724582, "compression_ratio": 1.5898876404494382, "no_speech_prob": 2.4972307208215305e-12}, {"id": 49, "seek": 40440, "start": 404.4, "end": 411.91999999999996, "text": " this. Okay? If you are using any secure, or if your Wi-Fi, you know, usually wired does not,", "tokens": [50365, 341, 13, 1033, 30, 759, 291, 366, 1228, 604, 7144, 11, 420, 498, 428, 14035, 12, 13229, 11, 291, 458, 11, 2673, 27415, 775, 406, 11, 50741], "temperature": 0.0, "avg_logprob": -0.2812897393462855, "compression_ratio": 1.63135593220339, "no_speech_prob": 3.0661061797138123e-12}, {"id": 50, "seek": 40440, "start": 411.91999999999996, "end": 419.12, "text": " but if your Wi-Fi is using some security measures, like WAP, WAP, or whatever the heck they're using,", "tokens": [50741, 457, 498, 428, 14035, 12, 13229, 307, 1228, 512, 3825, 8000, 11, 411, 343, 4715, 11, 343, 4715, 11, 420, 2035, 264, 12872, 436, 434, 1228, 11, 51101], "temperature": 0.0, "avg_logprob": -0.2812897393462855, "compression_ratio": 1.63135593220339, "no_speech_prob": 3.0661061797138123e-12}, {"id": 51, "seek": 40440, "start": 419.12, "end": 428.08, "text": " WFPA, that will be taken to our pair, at that layer. Okay? So there will be additional shields,", "tokens": [51101, 343, 37, 10297, 11, 300, 486, 312, 2726, 281, 527, 6119, 11, 412, 300, 4583, 13, 1033, 30, 407, 456, 486, 312, 4497, 33466, 11, 51549], "temperature": 0.0, "avg_logprob": -0.2812897393462855, "compression_ratio": 1.63135593220339, "no_speech_prob": 3.0661061797138123e-12}, {"id": 52, "seek": 40440, "start": 428.08, "end": 432.71999999999997, "text": " additional subtenants here. But what I'm showing you here is just without any security, right?", "tokens": [51549, 4497, 1422, 1147, 1719, 510, 13, 583, 437, 286, 478, 4099, 291, 510, 307, 445, 1553, 604, 3825, 11, 558, 30, 51781], "temperature": 0.0, "avg_logprob": -0.2812897393462855, "compression_ratio": 1.63135593220339, "no_speech_prob": 3.0661061797138123e-12}, {"id": 53, "seek": 43272, "start": 432.72, "end": 439.44000000000005, "text": " If time permits, at some point I will talk to you about wireless security, right? That usually happens", "tokens": [50365, 759, 565, 30990, 11, 412, 512, 935, 286, 486, 751, 281, 291, 466, 14720, 3825, 11, 558, 30, 663, 2673, 2314, 50701], "temperature": 0.0, "avg_logprob": -0.16918661156479192, "compression_ratio": 1.3642384105960266, "no_speech_prob": 3.3833296407548286e-12}, {"id": 54, "seek": 43272, "start": 439.44000000000005, "end": 454.64000000000004, "text": " at this layer, not above. Now, if you listen to prior lectures carefully, you remember me spending time", "tokens": [50701, 412, 341, 4583, 11, 406, 3673, 13, 823, 11, 498, 291, 2140, 281, 4059, 16564, 7500, 11, 291, 1604, 385, 6434, 565, 51461], "temperature": 0.0, "avg_logprob": -0.16918661156479192, "compression_ratio": 1.3642384105960266, "no_speech_prob": 3.3833296407548286e-12}, {"id": 55, "seek": 45464, "start": 454.64, "end": 463.03999999999996, "text": " on fragmentation, right? And you may ask, why did I spend all this time talking about fragmentation,", "tokens": [50365, 322, 9241, 19631, 11, 558, 30, 400, 291, 815, 1029, 11, 983, 630, 286, 3496, 439, 341, 565, 1417, 466, 9241, 19631, 11, 50785], "temperature": 0.0, "avg_logprob": -0.15903605877513616, "compression_ratio": 1.6132596685082874, "no_speech_prob": 3.0153418824341305e-12}, {"id": 56, "seek": 45464, "start": 463.03999999999996, "end": 468.0, "text": " and I just informed you that fragmentation actually does not have an IP layer, right? Yeah.", "tokens": [50785, 293, 286, 445, 11740, 291, 300, 9241, 19631, 767, 775, 406, 362, 364, 8671, 4583, 11, 558, 30, 865, 13, 51033], "temperature": 0.0, "avg_logprob": -0.15903605877513616, "compression_ratio": 1.6132596685082874, "no_speech_prob": 3.0153418824341305e-12}, {"id": 57, "seek": 45464, "start": 469.59999999999997, "end": 480.15999999999997, "text": " Contradiction? Yes. Except that TCP is not the only transport layer protocol. Other transport layer", "tokens": [51113, 4839, 6206, 4105, 30, 1079, 13, 16192, 300, 48965, 307, 406, 264, 787, 5495, 4583, 10336, 13, 5358, 5495, 4583, 51641], "temperature": 0.0, "avg_logprob": -0.15903605877513616, "compression_ratio": 1.6132596685082874, "no_speech_prob": 3.0153418824341305e-12}, {"id": 58, "seek": 48016, "start": 480.16, "end": 489.76000000000005, "text": " protocols are allowed not to be as complicated and to pass to IP anyway. In fact, TCP is just very", "tokens": [50365, 20618, 366, 4350, 406, 281, 312, 382, 6179, 293, 281, 1320, 281, 8671, 4033, 13, 682, 1186, 11, 48965, 307, 445, 588, 50845], "temperature": 0.0, "avg_logprob": -0.18491115325536484, "compression_ratio": 1.4948979591836735, "no_speech_prob": 3.4024957330791583e-12}, {"id": 59, "seek": 48016, "start": 489.76000000000005, "end": 496.24, "text": " considerate and nice this way. One of the reasons it is, is because it doesn't want to deal with IP", "tokens": [50845, 1949, 473, 293, 1481, 341, 636, 13, 1485, 295, 264, 4112, 309, 307, 11, 307, 570, 309, 1177, 380, 528, 281, 2028, 365, 8671, 51169], "temperature": 0.0, "avg_logprob": -0.18491115325536484, "compression_ratio": 1.4948979591836735, "no_speech_prob": 3.4024957330791583e-12}, {"id": 60, "seek": 48016, "start": 496.24, "end": 503.68, "text": " fragmentation. It has its own fragmentation to use. Do you see? So it wants things to go fast.", "tokens": [51169, 9241, 19631, 13, 467, 575, 1080, 1065, 9241, 19631, 281, 764, 13, 1144, 291, 536, 30, 407, 309, 2738, 721, 281, 352, 2370, 13, 51541], "temperature": 0.0, "avg_logprob": -0.18491115325536484, "compression_ratio": 1.4948979591836735, "no_speech_prob": 3.4024957330791583e-12}, {"id": 61, "seek": 50368, "start": 503.68, "end": 510.8, "text": " It optimizes through. It optimizes through. Other protocols do not have to do. How many of you are", "tokens": [50365, 467, 5028, 5660, 807, 13, 467, 5028, 5660, 807, 13, 5358, 20618, 360, 406, 362, 281, 360, 13, 1012, 867, 295, 291, 366, 50721], "temperature": 0.0, "avg_logprob": -0.3035869411393708, "compression_ratio": 1.4388489208633093, "no_speech_prob": 3.3665075935274125e-12}, {"id": 62, "seek": 50368, "start": 510.8, "end": 520.0, "text": " familiar with the Linux kernel or any Linux kernel? A few of you. Did you know that there's something", "tokens": [50721, 4963, 365, 264, 18734, 28256, 420, 604, 18734, 28256, 30, 316, 1326, 295, 291, 13, 2589, 291, 458, 300, 456, 311, 746, 51181], "temperature": 0.0, "avg_logprob": -0.3035869411393708, "compression_ratio": 1.4388489208633093, "no_speech_prob": 3.3665075935274125e-12}, {"id": 63, "seek": 52000, "start": 520.0, "end": 530.96, "text": " called raw sockets? Anybody knew that? Good. You can actually have an application, write an application", "tokens": [50365, 1219, 8936, 370, 11984, 30, 19082, 2586, 300, 30, 2205, 13, 509, 393, 767, 362, 364, 3861, 11, 2464, 364, 3861, 50913], "temperature": 0.0, "avg_logprob": -0.14867817516058263, "compression_ratio": 1.6972972972972973, "no_speech_prob": 2.9555919343893233e-12}, {"id": 64, "seek": 52000, "start": 530.96, "end": 539.6, "text": " that uses IP directly. You do not have to go through some session layer and then transport layer. You can", "tokens": [50913, 300, 4960, 8671, 3838, 13, 509, 360, 406, 362, 281, 352, 807, 512, 5481, 4583, 293, 550, 5495, 4583, 13, 509, 393, 51345], "temperature": 0.0, "avg_logprob": -0.14867817516058263, "compression_ratio": 1.6972972972972973, "no_speech_prob": 2.9555919343893233e-12}, {"id": 65, "seek": 52000, "start": 539.6, "end": 547.76, "text": " actually write an application. They just directly accesses IP. In which case your application is its own", "tokens": [51345, 767, 2464, 364, 3861, 13, 814, 445, 3838, 2105, 279, 8671, 13, 682, 597, 1389, 428, 3861, 307, 1080, 1065, 51753], "temperature": 0.0, "avg_logprob": -0.14867817516058263, "compression_ratio": 1.6972972972972973, "no_speech_prob": 2.9555919343893233e-12}, {"id": 66, "seek": 54776, "start": 547.76, "end": 557.68, "text": " is your own transport layer. Okay? Stunted, crazy, silly, maybe, yes, but it's allowed. Just FYI,", "tokens": [50365, 307, 428, 1065, 5495, 4583, 13, 1033, 30, 745, 19015, 11, 3219, 11, 11774, 11, 1310, 11, 2086, 11, 457, 309, 311, 4350, 13, 1449, 42730, 40, 11, 50861], "temperature": 0.0, "avg_logprob": -0.34231079398811637, "compression_ratio": 1.4845360824742269, "no_speech_prob": 2.7478312594059195e-12}, {"id": 67, "seek": 54776, "start": 559.04, "end": 567.2, "text": " many open unisex versions allow you to also write raw ethernet. That is, if your application", "tokens": [50929, 867, 1269, 517, 908, 87, 9606, 2089, 291, 281, 611, 2464, 8936, 37096, 7129, 13, 663, 307, 11, 498, 428, 3861, 51337], "temperature": 0.0, "avg_logprob": -0.34231079398811637, "compression_ratio": 1.4845360824742269, "no_speech_prob": 2.7478312594059195e-12}, {"id": 68, "seek": 54776, "start": 568.4, "end": 573.04, "text": " if your kernel configuration lets you do it, you can actually open a raw ethernet socket and send", "tokens": [51397, 498, 428, 28256, 11694, 6653, 291, 360, 309, 11, 291, 393, 767, 1269, 257, 8936, 37096, 7129, 19741, 293, 2845, 51629], "temperature": 0.0, "avg_logprob": -0.34231079398811637, "compression_ratio": 1.4845360824742269, "no_speech_prob": 2.7478312594059195e-12}, {"id": 69, "seek": 57304, "start": 573.04, "end": 579.36, "text": " directly infinite packets. In which case your own network layer. But these packets will not go", "tokens": [50365, 3838, 13785, 30364, 13, 682, 597, 1389, 428, 1065, 3209, 4583, 13, 583, 613, 30364, 486, 406, 352, 50681], "temperature": 0.0, "avg_logprob": -0.1779791391812838, "compression_ratio": 1.4407582938388626, "no_speech_prob": 2.31416014823127e-12}, {"id": 70, "seek": 57304, "start": 580.0, "end": 588.24, "text": " past the first router. You see what I'm saying? Okay? Unless you re-implement IP and DCP and whatever", "tokens": [50713, 1791, 264, 700, 22492, 13, 509, 536, 437, 286, 478, 1566, 30, 1033, 30, 16581, 291, 319, 12, 332, 43704, 8671, 293, 9114, 47, 293, 2035, 51125], "temperature": 0.0, "avg_logprob": -0.1779791391812838, "compression_ratio": 1.4407582938388626, "no_speech_prob": 2.31416014823127e-12}, {"id": 71, "seek": 57304, "start": 588.24, "end": 597.12, "text": " else, right? So that's why this is not a contradiction, right? For example, UDP, which is another transport", "tokens": [51125, 1646, 11, 558, 30, 407, 300, 311, 983, 341, 307, 406, 257, 34937, 11, 558, 30, 1171, 1365, 11, 624, 11373, 11, 597, 307, 1071, 5495, 51569], "temperature": 0.0, "avg_logprob": -0.1779791391812838, "compression_ratio": 1.4407582938388626, "no_speech_prob": 2.31416014823127e-12}, {"id": 72, "seek": 59712, "start": 597.12, "end": 606.48, "text": " protocol, can hand over to IP a packet that is very big, and then IP is N24, will fragment. IPv6 will", "tokens": [50365, 10336, 11, 393, 1011, 670, 281, 8671, 257, 20300, 300, 307, 588, 955, 11, 293, 550, 8671, 307, 426, 7911, 11, 486, 26424, 13, 8671, 85, 21, 486, 50833], "temperature": 0.0, "avg_logprob": -0.39704756303267047, "compression_ratio": 1.4494949494949494, "no_speech_prob": 2.5868322241218156e-12}, {"id": 73, "seek": 59712, "start": 606.48, "end": 617.84, "text": " barge. Okay, let's give you an error. Right, so TCP requires the segment to break data into segments,", "tokens": [50833, 2159, 432, 13, 1033, 11, 718, 311, 976, 291, 364, 6713, 13, 1779, 11, 370, 48965, 7029, 264, 9469, 281, 1821, 1412, 666, 19904, 11, 51401], "temperature": 0.0, "avg_logprob": -0.39704756303267047, "compression_ratio": 1.4494949494949494, "no_speech_prob": 2.5868322241218156e-12}, {"id": 74, "seek": 59712, "start": 617.84, "end": 623.28, "text": " and the receiver must reassemble segments. And because TCP is a connection-oriented", "tokens": [51401, 293, 264, 20086, 1633, 319, 37319, 19904, 13, 400, 570, 48965, 307, 257, 4984, 12, 27414, 51673], "temperature": 0.0, "avg_logprob": -0.39704756303267047, "compression_ratio": 1.4494949494949494, "no_speech_prob": 2.5868322241218156e-12}, {"id": 75, "seek": 62328, "start": 623.28, "end": 629.92, "text": " protocol, right? With explicit establishment and tear down a connection, there's an acknowledgement for", "tokens": [50365, 10336, 11, 558, 30, 2022, 13691, 20971, 293, 12556, 760, 257, 4984, 11, 456, 311, 364, 47227, 337, 50697], "temperature": 0.0, "avg_logprob": -0.32437415489783655, "compression_ratio": 1.6629834254143647, "no_speech_prob": 2.683630010921756e-12}, {"id": 76, "seek": 62328, "start": 629.92, "end": 640.64, "text": " every packet. Well, there's an acknowledgement, okay? And lost packets, when the lost packets are", "tokens": [50697, 633, 20300, 13, 1042, 11, 456, 311, 364, 47227, 11, 1392, 30, 400, 2731, 30364, 11, 562, 264, 2731, 30364, 366, 51233], "temperature": 0.0, "avg_logprob": -0.32437415489783655, "compression_ratio": 1.6629834254143647, "no_speech_prob": 2.683630010921756e-12}, {"id": 77, "seek": 62328, "start": 642.72, "end": 647.76, "text": " detected or there's no acknowledgement coming through the center for a particular system, it has to", "tokens": [51337, 21896, 420, 456, 311, 572, 47227, 1348, 807, 264, 3056, 337, 257, 1729, 1185, 11, 309, 575, 281, 51589], "temperature": 0.0, "avg_logprob": -0.32437415489783655, "compression_ratio": 1.6629834254143647, "no_speech_prob": 2.683630010921756e-12}, {"id": 78, "seek": 64776, "start": 647.76, "end": 654.8, "text": " re-transpense. And one of the more important things in TCP is the maintenance of what's called", "tokens": [50365, 319, 12, 24999, 79, 1288, 13, 400, 472, 295, 264, 544, 1021, 721, 294, 48965, 307, 264, 11258, 295, 437, 311, 1219, 50717], "temperature": 0.0, "avg_logprob": -0.17061797777811685, "compression_ratio": 1.553763440860215, "no_speech_prob": 2.059814341662247e-12}, {"id": 79, "seek": 64776, "start": 654.8, "end": 662.72, "text": " receiver window. Does everybody know what that is? So, normally, when you send segments one,", "tokens": [50717, 20086, 4910, 13, 4402, 2201, 458, 437, 300, 307, 30, 407, 11, 5646, 11, 562, 291, 2845, 19904, 472, 11, 51113], "temperature": 0.0, "avg_logprob": -0.17061797777811685, "compression_ratio": 1.553763440860215, "no_speech_prob": 2.059814341662247e-12}, {"id": 80, "seek": 64776, "start": 662.72, "end": 668.16, "text": " segment two, segment three, segment four, you expect, normally, to receive them in the same sequence.", "tokens": [51113, 9469, 732, 11, 9469, 1045, 11, 9469, 1451, 11, 291, 2066, 11, 5646, 11, 281, 4774, 552, 294, 264, 912, 8310, 13, 51385], "temperature": 0.0, "avg_logprob": -0.17061797777811685, "compression_ratio": 1.553763440860215, "no_speech_prob": 2.059814341662247e-12}, {"id": 81, "seek": 66816, "start": 668.16, "end": 678.64, "text": " But what if segment two gets lost? What if some router modifies a bit in segment two, and when it is", "tokens": [50365, 583, 437, 498, 9469, 732, 2170, 2731, 30, 708, 498, 512, 22492, 1072, 11221, 257, 857, 294, 9469, 732, 11, 293, 562, 309, 307, 50889], "temperature": 0.0, "avg_logprob": -0.17002105712890625, "compression_ratio": 1.6263157894736842, "no_speech_prob": 2.2797957098530386e-12}, {"id": 82, "seek": 66816, "start": 678.64, "end": 685.68, "text": " received, it is incorrect. So, it's from away. So, it's essentially not being received. Or maybe it gets", "tokens": [50889, 4613, 11, 309, 307, 18424, 13, 407, 11, 309, 311, 490, 1314, 13, 407, 11, 309, 311, 4476, 406, 885, 4613, 13, 1610, 1310, 309, 2170, 51241], "temperature": 0.0, "avg_logprob": -0.17002105712890625, "compression_ratio": 1.6263157894736842, "no_speech_prob": 2.2797957098530386e-12}, {"id": 83, "seek": 66816, "start": 685.68, "end": 695.04, "text": " sent by a different route and gets stuck somewhere. So, that allows, so TCP handles this and allows the", "tokens": [51241, 2279, 538, 257, 819, 7955, 293, 2170, 5541, 4079, 13, 407, 11, 300, 4045, 11, 370, 48965, 18722, 341, 293, 4045, 264, 51709], "temperature": 0.0, "avg_logprob": -0.17002105712890625, "compression_ratio": 1.6263157894736842, "no_speech_prob": 2.2797957098530386e-12}, {"id": 84, "seek": 69504, "start": 695.04, "end": 703.76, "text": " receiver to receive packets or segments that are not in order. And so, instead of expecting a window", "tokens": [50365, 20086, 281, 4774, 30364, 420, 19904, 300, 366, 406, 294, 1668, 13, 400, 370, 11, 2602, 295, 9650, 257, 4910, 50801], "temperature": 0.0, "avg_logprob": -0.140423127583095, "compression_ratio": 1.6721311475409837, "no_speech_prob": 1.8185307860268951e-12}, {"id": 85, "seek": 69504, "start": 703.76, "end": 709.68, "text": " of size zero, meaning I receive packets one, two, three, the next one is four, right? It says, oh,", "tokens": [50801, 295, 2744, 4018, 11, 3620, 286, 4774, 30364, 472, 11, 732, 11, 1045, 11, 264, 958, 472, 307, 1451, 11, 558, 30, 467, 1619, 11, 1954, 11, 51097], "temperature": 0.0, "avg_logprob": -0.140423127583095, "compression_ratio": 1.6721311475409837, "no_speech_prob": 1.8185307860268951e-12}, {"id": 86, "seek": 69504, "start": 709.68, "end": 717.52, "text": " I receive packets one, two, five, but I'm okay with receiving three, four, or six, okay? So, that's called", "tokens": [51097, 286, 4774, 30364, 472, 11, 732, 11, 1732, 11, 457, 286, 478, 1392, 365, 10040, 1045, 11, 1451, 11, 420, 2309, 11, 1392, 30, 407, 11, 300, 311, 1219, 51489], "temperature": 0.0, "avg_logprob": -0.140423127583095, "compression_ratio": 1.6721311475409837, "no_speech_prob": 1.8185307860268951e-12}, {"id": 87, "seek": 71752, "start": 717.52, "end": 723.12, "text": " the size of the window. The size of the window is dynamic based on the characteristics of the network", "tokens": [50365, 264, 2744, 295, 264, 4910, 13, 440, 2744, 295, 264, 4910, 307, 8546, 2361, 322, 264, 10891, 295, 264, 3209, 50645], "temperature": 0.0, "avg_logprob": -0.26750642685663134, "compression_ratio": 1.6408163265306122, "no_speech_prob": 1.920459451187906e-12}, {"id": 88, "seek": 71752, "start": 723.12, "end": 727.84, "text": " of traffic, right? It has to do with, like, congestion on the internet, okay? And many other", "tokens": [50645, 295, 6419, 11, 558, 30, 467, 575, 281, 360, 365, 11, 411, 11, 40816, 322, 264, 4705, 11, 1392, 30, 400, 867, 661, 50881], "temperature": 0.0, "avg_logprob": -0.26750642685663134, "compression_ratio": 1.6408163265306122, "no_speech_prob": 1.920459451187906e-12}, {"id": 89, "seek": 71752, "start": 727.84, "end": 739.4399999999999, "text": " factors that influence the size of the TCP window. Now, IP is much simpler. Recall, it says vertical,", "tokens": [50881, 6771, 300, 6503, 264, 2744, 295, 264, 48965, 4910, 13, 823, 11, 8671, 307, 709, 18587, 13, 9647, 336, 11, 309, 1619, 9429, 11, 51461], "temperature": 0.0, "avg_logprob": -0.26750642685663134, "compression_ratio": 1.6408163265306122, "no_speech_prob": 1.920459451187906e-12}, {"id": 90, "seek": 71752, "start": 739.4399999999999, "end": 745.68, "text": " but it's actually not a vertical. It is a packet format. It is an extreverse. Every packet is on its own.", "tokens": [51461, 457, 309, 311, 767, 406, 257, 9429, 13, 467, 307, 257, 20300, 7877, 13, 467, 307, 364, 1279, 265, 4308, 13, 2048, 20300, 307, 322, 1080, 1065, 13, 51773], "temperature": 0.0, "avg_logprob": -0.26750642685663134, "compression_ratio": 1.6408163265306122, "no_speech_prob": 1.920459451187906e-12}, {"id": 91, "seek": 74568, "start": 745.68, "end": 757.68, "text": " So, it uses either prefixes off or exact destination addresses for routing. Okay? What am I saying?", "tokens": [50365, 407, 11, 309, 4960, 2139, 18417, 36005, 766, 420, 1900, 12236, 16862, 337, 32722, 13, 1033, 30, 708, 669, 286, 1566, 30, 50965], "temperature": 0.0, "avg_logprob": -0.2631379699707031, "compression_ratio": 1.4071428571428573, "no_speech_prob": 3.0932869113375894e-12}, {"id": 92, "seek": 74568, "start": 758.9599999999999, "end": 768.16, "text": " When the packet arrives at a router, IP back, the router's main job is to take the destination of", "tokens": [51029, 1133, 264, 20300, 20116, 412, 257, 22492, 11, 8671, 646, 11, 264, 22492, 311, 2135, 1691, 307, 281, 747, 264, 12236, 295, 51489], "temperature": 0.0, "avg_logprob": -0.2631379699707031, "compression_ratio": 1.4071428571428573, "no_speech_prob": 3.0932869113375894e-12}, {"id": 93, "seek": 76816, "start": 768.16, "end": 777.12, "text": " that packet and look that up in its routing table, FIB, forwarding information dates. That's a weird term.", "tokens": [50365, 300, 20300, 293, 574, 300, 493, 294, 1080, 32722, 3199, 11, 479, 39081, 11, 2128, 278, 1589, 11691, 13, 663, 311, 257, 3657, 1433, 13, 50813], "temperature": 0.0, "avg_logprob": -0.19523823261260986, "compression_ratio": 1.5336787564766838, "no_speech_prob": 2.757900895503096e-12}, {"id": 94, "seek": 76816, "start": 777.12, "end": 784.4, "text": " It's really a routing table. And it can be huge, huge, huge, especially for a backbone router.", "tokens": [50813, 467, 311, 534, 257, 32722, 3199, 13, 400, 309, 393, 312, 2603, 11, 2603, 11, 2603, 11, 2318, 337, 257, 34889, 22492, 13, 51177], "temperature": 0.0, "avg_logprob": -0.19523823261260986, "compression_ratio": 1.5336787564766838, "no_speech_prob": 2.757900895503096e-12}, {"id": 95, "seek": 76816, "start": 786.0, "end": 794.4, "text": " So, how does it look it up? Well, it's not the exact match. It's possible that the destination", "tokens": [51257, 407, 11, 577, 775, 309, 574, 309, 493, 30, 1042, 11, 309, 311, 406, 264, 1900, 2995, 13, 467, 311, 1944, 300, 264, 12236, 51677], "temperature": 0.0, "avg_logprob": -0.19523823261260986, "compression_ratio": 1.5336787564766838, "no_speech_prob": 2.757900895503096e-12}, {"id": 96, "seek": 79440, "start": 794.4, "end": 799.4399999999999, "text": " IP address is exactly present in the routing table. It says to this, for this destination address,", "tokens": [50365, 8671, 2985, 307, 2293, 1974, 294, 264, 32722, 3199, 13, 467, 1619, 281, 341, 11, 337, 341, 12236, 2985, 11, 50617], "temperature": 0.0, "avg_logprob": -0.18018179228811554, "compression_ratio": 1.849056603773585, "no_speech_prob": 2.6677304029026905e-12}, {"id": 97, "seek": 79440, "start": 799.4399999999999, "end": 808.0, "text": " go there. But most likely it's not like that. What it says is the prefix for that destination address", "tokens": [50617, 352, 456, 13, 583, 881, 3700, 309, 311, 406, 411, 300, 13, 708, 309, 1619, 307, 264, 46969, 337, 300, 12236, 2985, 51045], "temperature": 0.0, "avg_logprob": -0.18018179228811554, "compression_ratio": 1.849056603773585, "no_speech_prob": 2.6677304029026905e-12}, {"id": 98, "seek": 79440, "start": 808.0, "end": 815.12, "text": " is over there. So, you see this example destination here. So, it could be that the routing table can", "tokens": [51045, 307, 670, 456, 13, 407, 11, 291, 536, 341, 1365, 12236, 510, 13, 407, 11, 309, 727, 312, 300, 264, 32722, 3199, 393, 51401], "temperature": 0.0, "avg_logprob": -0.18018179228811554, "compression_ratio": 1.849056603773585, "no_speech_prob": 2.6677304029026905e-12}, {"id": 99, "seek": 79440, "start": 815.12, "end": 821.12, "text": " trace an entry for exactly this, or it could be that it contains an entry for 171, 64, 66.", "tokens": [51401, 13508, 364, 8729, 337, 2293, 341, 11, 420, 309, 727, 312, 300, 309, 8306, 364, 8729, 337, 3282, 16, 11, 12145, 11, 21126, 13, 51701], "temperature": 0.0, "avg_logprob": -0.18018179228811554, "compression_ratio": 1.849056603773585, "no_speech_prob": 2.6677304029026905e-12}, {"id": 100, "seek": 82112, "start": 821.12, "end": 829.92, "text": " That's called a prefix. That's called a prefix. It's one example. 171 is also a prefix. That's the", "tokens": [50365, 663, 311, 1219, 257, 46969, 13, 663, 311, 1219, 257, 46969, 13, 467, 311, 472, 1365, 13, 3282, 16, 307, 611, 257, 46969, 13, 663, 311, 264, 50805], "temperature": 0.0, "avg_logprob": -0.2891376076675043, "compression_ratio": 1.72, "no_speech_prob": 2.8084815289347587e-12}, {"id": 101, "seek": 82112, "start": 829.92, "end": 837.36, "text": " shorter prefix. So, what I think I'm going to do is it looks for the longest prefix, right? The most", "tokens": [50805, 11639, 46969, 13, 407, 11, 437, 286, 519, 286, 478, 516, 281, 360, 307, 309, 1542, 337, 264, 15438, 46969, 11, 558, 30, 440, 881, 51177], "temperature": 0.0, "avg_logprob": -0.2891376076675043, "compression_ratio": 1.72, "no_speech_prob": 2.8084815289347587e-12}, {"id": 102, "seek": 82112, "start": 837.36, "end": 845.52, "text": " exact match possible. And that is the entry when it finds the entry with the longest prefix. It says,", "tokens": [51177, 1900, 2995, 1944, 13, 400, 300, 307, 264, 8729, 562, 309, 10704, 264, 8729, 365, 264, 15438, 46969, 13, 467, 1619, 11, 51585], "temperature": 0.0, "avg_logprob": -0.2891376076675043, "compression_ratio": 1.72, "no_speech_prob": 2.8084815289347587e-12}, {"id": 103, "seek": 84552, "start": 845.52, "end": 853.52, "text": " okay, what is the next entry? In that entry, you have all kinds of stuff, including which interface", "tokens": [50365, 1392, 11, 437, 307, 264, 958, 8729, 30, 682, 300, 8729, 11, 291, 362, 439, 3685, 295, 1507, 11, 3009, 597, 9226, 50765], "temperature": 0.0, "avg_logprob": -0.18506211598714192, "compression_ratio": 1.6353591160220995, "no_speech_prob": 2.4985738304728056e-12}, {"id": 104, "seek": 84552, "start": 853.52, "end": 861.04, "text": " to forward it on next. What is the next stop for this package? It doesn't know the actual route,", "tokens": [50765, 281, 2128, 309, 322, 958, 13, 708, 307, 264, 958, 1590, 337, 341, 7372, 30, 467, 1177, 380, 458, 264, 3539, 7955, 11, 51141], "temperature": 0.0, "avg_logprob": -0.18506211598714192, "compression_ratio": 1.6353591160220995, "no_speech_prob": 2.4985738304728056e-12}, {"id": 105, "seek": 84552, "start": 861.04, "end": 867.52, "text": " right? IP routers do not know the actual route this package will take to the destination. It's just", "tokens": [51141, 558, 30, 8671, 4020, 433, 360, 406, 458, 264, 3539, 7955, 341, 7372, 486, 747, 281, 264, 12236, 13, 467, 311, 445, 51465], "temperature": 0.0, "avg_logprob": -0.18506211598714192, "compression_ratio": 1.6353591160220995, "no_speech_prob": 2.4985738304728056e-12}, {"id": 106, "seek": 86752, "start": 867.52, "end": 881.92, "text": " the destination and the next stop. Okay. If no match is found, what's supposed to happen but doesn't", "tokens": [50365, 264, 12236, 293, 264, 958, 1590, 13, 1033, 13, 759, 572, 2995, 307, 1352, 11, 437, 311, 3442, 281, 1051, 457, 1177, 380, 51085], "temperature": 0.0, "avg_logprob": -0.2654205687502597, "compression_ratio": 1.3741007194244603, "no_speech_prob": 3.626489950350753e-12}, {"id": 107, "seek": 86752, "start": 881.92, "end": 890.4, "text": " always happen is an ICMP destination and reachable packet is generated back to the source.", "tokens": [51085, 1009, 1051, 307, 364, 14360, 12224, 12236, 293, 2524, 712, 20300, 307, 10833, 646, 281, 264, 4009, 13, 51509], "temperature": 0.0, "avg_logprob": -0.2654205687502597, "compression_ratio": 1.3741007194244603, "no_speech_prob": 3.626489950350753e-12}, {"id": 108, "seek": 89040, "start": 890.4, "end": 898.9599999999999, "text": " source. Okay? So, whatever you see in your browser post-unreachable, right? You're trying to load", "tokens": [50365, 4009, 13, 1033, 30, 407, 11, 2035, 291, 536, 294, 428, 11185, 2183, 12, 409, 16226, 712, 11, 558, 30, 509, 434, 1382, 281, 3677, 50793], "temperature": 0.0, "avg_logprob": -0.25548505783081055, "compression_ratio": 1.5105263157894737, "no_speech_prob": 3.3599462188199647e-12}, {"id": 109, "seek": 89040, "start": 898.9599999999999, "end": 909.28, "text": " something unreachable, that's essentially what happens. Okay. So, long as we can match,", "tokens": [50793, 746, 517, 16226, 712, 11, 300, 311, 4476, 437, 2314, 13, 1033, 13, 407, 11, 938, 382, 321, 393, 2995, 11, 51309], "temperature": 0.0, "avg_logprob": -0.25548505783081055, "compression_ratio": 1.5105263157894737, "no_speech_prob": 3.3599462188199647e-12}, {"id": 110, "seek": 89040, "start": 909.28, "end": 915.12, "text": " of course, there are usually several hops, often more than several. If you actually do a trace route,", "tokens": [51309, 295, 1164, 11, 456, 366, 2673, 2940, 47579, 11, 2049, 544, 813, 2940, 13, 759, 291, 767, 360, 257, 13508, 7955, 11, 51601], "temperature": 0.0, "avg_logprob": -0.25548505783081055, "compression_ratio": 1.5105263157894737, "no_speech_prob": 3.3599462188199647e-12}, {"id": 111, "seek": 91512, "start": 915.12, "end": 927.28, "text": " you will see if you do a trace route and then give an IP address or trace out host names,", "tokens": [50365, 291, 486, 536, 498, 291, 360, 257, 13508, 7955, 293, 550, 976, 364, 8671, 2985, 420, 13508, 484, 3975, 5288, 11, 50973], "temperature": 0.0, "avg_logprob": -0.4067537307739258, "compression_ratio": 1.4883720930232558, "no_speech_prob": 5.347962957896746e-12}, {"id": 112, "seek": 91512, "start": 927.28, "end": 936.5600000000001, "text": " you will actually see in excruciating detail the hops, the IP addresses of the hops, your packet takes", "tokens": [50973, 291, 486, 767, 536, 294, 1624, 894, 537, 990, 2607, 264, 47579, 11, 264, 8671, 16862, 295, 264, 47579, 11, 428, 20300, 2516, 51437], "temperature": 0.0, "avg_logprob": -0.4067537307739258, "compression_ratio": 1.4883720930232558, "no_speech_prob": 5.347962957896746e-12}, {"id": 113, "seek": 93656, "start": 936.56, "end": 953.1199999999999, "text": " from here to there. Okay. Now, the hops and ASs are different things, right? A hop is a physical", "tokens": [50365, 490, 510, 281, 456, 13, 1033, 13, 823, 11, 264, 47579, 293, 7469, 82, 366, 819, 721, 11, 558, 30, 316, 3818, 307, 257, 4001, 51193], "temperature": 0.0, "avg_logprob": -0.18681429050586842, "compression_ratio": 1.534351145038168, "no_speech_prob": 2.544505621829285e-12}, {"id": 114, "seek": 93656, "start": 953.1199999999999, "end": 960.0799999999999, "text": " hop from IP router to IP router or from IP host to the router or from IP router to the destination host,", "tokens": [51193, 3818, 490, 8671, 22492, 281, 8671, 22492, 420, 490, 8671, 3975, 281, 264, 22492, 420, 490, 8671, 22492, 281, 264, 12236, 3975, 11, 51541], "temperature": 0.0, "avg_logprob": -0.18681429050586842, "compression_ratio": 1.534351145038168, "no_speech_prob": 2.544505621829285e-12}, {"id": 115, "seek": 96008, "start": 961.0400000000001, "end": 969.0400000000001, "text": " right? All these are physical hops. Now, there are AS hops, which means how many ASs you go through", "tokens": [50413, 558, 30, 1057, 613, 366, 4001, 47579, 13, 823, 11, 456, 366, 7469, 47579, 11, 597, 1355, 577, 867, 7469, 82, 291, 352, 807, 50813], "temperature": 0.0, "avg_logprob": -0.12051206049711807, "compression_ratio": 1.660633484162896, "no_speech_prob": 2.3352775876256393e-12}, {"id": 116, "seek": 96008, "start": 969.0400000000001, "end": 975.6800000000001, "text": " on the way to the destination. Well, every AS typically has at least a hop within it, right?", "tokens": [50813, 322, 264, 636, 281, 264, 12236, 13, 1042, 11, 633, 7469, 5850, 575, 412, 1935, 257, 3818, 1951, 309, 11, 558, 30, 51145], "temperature": 0.0, "avg_logprob": -0.12051206049711807, "compression_ratio": 1.660633484162896, "no_speech_prob": 2.3352775876256393e-12}, {"id": 117, "seek": 96008, "start": 976.4000000000001, "end": 981.2, "text": " So, you enter an AS through what's called an entry router and you exit through an exit router.", "tokens": [51181, 407, 11, 291, 3242, 364, 7469, 807, 437, 311, 1219, 364, 8729, 22492, 293, 291, 11043, 807, 364, 11043, 22492, 13, 51421], "temperature": 0.0, "avg_logprob": -0.12051206049711807, "compression_ratio": 1.660633484162896, "no_speech_prob": 2.3352775876256393e-12}, {"id": 118, "seek": 96008, "start": 981.2, "end": 986.24, "text": " They may be connected directly or there may be intermediate hops within the AS.", "tokens": [51421, 814, 815, 312, 4582, 3838, 420, 456, 815, 312, 19376, 47579, 1951, 264, 7469, 13, 51673], "temperature": 0.0, "avg_logprob": -0.12051206049711807, "compression_ratio": 1.660633484162896, "no_speech_prob": 2.3352775876256393e-12}, {"id": 119, "seek": 98624, "start": 986.24, "end": 995.12, "text": " So, trace route should tell you that, but some ASs do not expose their internal structure", "tokens": [50365, 407, 11, 13508, 7955, 820, 980, 291, 300, 11, 457, 512, 7469, 82, 360, 406, 19219, 641, 6920, 3877, 50809], "temperature": 0.0, "avg_logprob": -0.09406076778065074, "compression_ratio": 1.5838509316770186, "no_speech_prob": 2.7678506188399954e-12}, {"id": 120, "seek": 98624, "start": 995.92, "end": 999.52, "text": " and they will not reply to this, will not respect the trace route.", "tokens": [50849, 293, 436, 486, 406, 16972, 281, 341, 11, 486, 406, 3104, 264, 13508, 7955, 13, 51029], "temperature": 0.0, "avg_logprob": -0.09406076778065074, "compression_ratio": 1.5838509316770186, "no_speech_prob": 2.7678506188399954e-12}, {"id": 121, "seek": 98624, "start": 1001.28, "end": 1005.52, "text": " So, it's not guaranteed. Typically, what you see in trace route is correct, but it's not complete.", "tokens": [51117, 407, 11, 309, 311, 406, 18031, 13, 23129, 11, 437, 291, 536, 294, 13508, 7955, 307, 3006, 11, 457, 309, 311, 406, 3566, 13, 51329], "temperature": 0.0, "avg_logprob": -0.09406076778065074, "compression_ratio": 1.5838509316770186, "no_speech_prob": 2.7678506188399954e-12}, {"id": 122, "seek": 100552, "start": 1005.52, "end": 1021.4399999999999, "text": " All right. Any questions so far? ICMP is the protocol I mentioned, right? Instead of for plumbing on the", "tokens": [50365, 1057, 558, 13, 2639, 1651, 370, 1400, 30, 14360, 12224, 307, 264, 10336, 286, 2835, 11, 558, 30, 7156, 295, 337, 39993, 322, 264, 51161], "temperature": 0.0, "avg_logprob": -0.299284224814557, "compression_ratio": 1.3724137931034484, "no_speech_prob": 2.665536411386449e-12}, {"id": 123, "seek": 100552, "start": 1021.4399999999999, "end": 1029.2, "text": " internet, it's a very compact transport layer protocol that is used for exchanging maintenance", "tokens": [51161, 4705, 11, 309, 311, 257, 588, 14679, 5495, 4583, 10336, 300, 307, 1143, 337, 6210, 9741, 11258, 51549], "temperature": 0.0, "avg_logprob": -0.299284224814557, "compression_ratio": 1.3724137931034484, "no_speech_prob": 2.665536411386449e-12}, {"id": 124, "seek": 102920, "start": 1029.2, "end": 1033.92, "text": " messages. This is actually a protocol, not a packet format. I mean, it has packet formats,", "tokens": [50365, 7897, 13, 639, 307, 767, 257, 10336, 11, 406, 257, 20300, 7877, 13, 286, 914, 11, 309, 575, 20300, 25879, 11, 50601], "temperature": 0.0, "avg_logprob": -0.21399052463360688, "compression_ratio": 1.5307262569832403, "no_speech_prob": 2.269390621603695e-12}, {"id": 125, "seek": 102920, "start": 1033.92, "end": 1040.0800000000002, "text": " but it is a protocol meaning messages here are generated upon some events and they have mean.", "tokens": [50601, 457, 309, 307, 257, 10336, 3620, 7897, 510, 366, 10833, 3564, 512, 3931, 293, 436, 362, 914, 13, 50909], "temperature": 0.0, "avg_logprob": -0.21399052463360688, "compression_ratio": 1.5307262569832403, "no_speech_prob": 2.269390621603695e-12}, {"id": 126, "seek": 102920, "start": 1041.8400000000001, "end": 1052.0, "text": " So, error reporting, congestion control, reachability, timing, etc. Okay? So, destination", "tokens": [50997, 407, 11, 6713, 10031, 11, 40816, 1969, 11, 2524, 2310, 11, 10822, 11, 5183, 13, 1033, 30, 407, 11, 12236, 51505], "temperature": 0.0, "avg_logprob": -0.21399052463360688, "compression_ratio": 1.5307262569832403, "no_speech_prob": 2.269390621603695e-12}, {"id": 127, "seek": 105200, "start": 1052.0, "end": 1057.76, "text": " unreachable I already mentioned. Time exceeded. Oh, that's when TTL gets decremented to zero. Remember", "tokens": [50365, 517, 16226, 712, 286, 1217, 2835, 13, 6161, 38026, 13, 876, 11, 300, 311, 562, 32576, 43, 2170, 6853, 14684, 281, 4018, 13, 5459, 50653], "temperature": 0.0, "avg_logprob": -0.19391795824158867, "compression_ratio": 1.5905511811023623, "no_speech_prob": 2.326362193161291e-12}, {"id": 128, "seek": 105200, "start": 1057.76, "end": 1063.76, "text": " TTL and IP packet header? And this packet has been, yeah, usually set to 255. So, if something,", "tokens": [50653, 32576, 43, 293, 8671, 20300, 23117, 30, 400, 341, 20300, 575, 668, 11, 1338, 11, 2673, 992, 281, 3552, 20, 13, 407, 11, 498, 746, 11, 50953], "temperature": 0.0, "avg_logprob": -0.19391795824158867, "compression_ratio": 1.5905511811023623, "no_speech_prob": 2.326362193161291e-12}, {"id": 129, "seek": 105200, "start": 1064.64, "end": 1070.72, "text": " if it reached zero, this packet has been looping around. Something is very wrong. Parameter problem,", "tokens": [50997, 498, 309, 6488, 4018, 11, 341, 20300, 575, 668, 6367, 278, 926, 13, 6595, 307, 588, 2085, 13, 34882, 2398, 1154, 11, 51301], "temperature": 0.0, "avg_logprob": -0.19391795824158867, "compression_ratio": 1.5905511811023623, "no_speech_prob": 2.326362193161291e-12}, {"id": 130, "seek": 105200, "start": 1070.72, "end": 1076.4, "text": " I'm not sure what the heck that is. Redirect to a better gateway means that, tells the previous gateway,", "tokens": [51301, 286, 478, 406, 988, 437, 264, 12872, 300, 307, 13, 4477, 11890, 281, 257, 1101, 28532, 1355, 300, 11, 5112, 264, 3894, 28532, 11, 51585], "temperature": 0.0, "avg_logprob": -0.19391795824158867, "compression_ratio": 1.5905511811023623, "no_speech_prob": 2.326362193161291e-12}, {"id": 131, "seek": 107640, "start": 1076.4, "end": 1081.68, "text": " your routing is messed up. You're sending it to be a packet, but there's a better place, better next", "tokens": [50365, 428, 32722, 307, 16507, 493, 13, 509, 434, 7750, 309, 281, 312, 257, 20300, 11, 457, 456, 311, 257, 1101, 1081, 11, 1101, 958, 50629], "temperature": 0.0, "avg_logprob": -0.24045281293915538, "compression_ratio": 1.59375, "no_speech_prob": 4.614308067585338e-12}, {"id": 132, "seek": 107640, "start": 1081.68, "end": 1088.5600000000002, "text": " hop of that packet than me. Reachability test, that's the one, echo reply, that's the one that trace", "tokens": [50629, 3818, 295, 300, 20300, 813, 385, 13, 35904, 2310, 1500, 11, 300, 311, 264, 472, 11, 14300, 16972, 11, 300, 311, 264, 472, 300, 13508, 50973], "temperature": 0.0, "avg_logprob": -0.24045281293915538, "compression_ratio": 1.59375, "no_speech_prob": 4.614308067585338e-12}, {"id": 133, "seek": 107640, "start": 1088.5600000000002, "end": 1099.0400000000002, "text": " round uses. And timestamp reply, this is also for when you put a timestamp option in an IP option field.", "tokens": [50973, 3098, 4960, 13, 400, 49108, 1215, 16972, 11, 341, 307, 611, 337, 562, 291, 829, 257, 49108, 1215, 3614, 294, 364, 8671, 3614, 2519, 13, 51497], "temperature": 0.0, "avg_logprob": -0.24045281293915538, "compression_ratio": 1.59375, "no_speech_prob": 4.614308067585338e-12}, {"id": 134, "seek": 109904, "start": 1099.04, "end": 1111.12, "text": " TMI. Security issues. Many security issues because neither TCP nor IP were natively designed for", "tokens": [50365, 314, 13808, 13, 11164, 2663, 13, 5126, 3825, 2663, 570, 9662, 48965, 6051, 8671, 645, 8470, 356, 4761, 337, 50969], "temperature": 0.0, "avg_logprob": -0.23362475175123948, "compression_ratio": 1.52, "no_speech_prob": 3.334316329983711e-12}, {"id": 135, "seek": 109904, "start": 1111.12, "end": 1118.08, "text": " security. Remember, it was all designed in a very, uh, prehistoric, friendly world, where nobody wanted", "tokens": [50969, 3825, 13, 5459, 11, 309, 390, 439, 4761, 294, 257, 588, 11, 2232, 11, 659, 33236, 16345, 11, 9208, 1002, 11, 689, 5079, 1415, 51317], "temperature": 0.0, "avg_logprob": -0.23362475175123948, "compression_ratio": 1.52, "no_speech_prob": 3.334316329983711e-12}, {"id": 136, "seek": 109904, "start": 1118.08, "end": 1125.44, "text": " to hurt each other, steal each other's information. So, uh, packets go by untrusted hosts, our routers,", "tokens": [51317, 281, 4607, 1184, 661, 11, 11009, 1184, 661, 311, 1589, 13, 407, 11, 2232, 11, 30364, 352, 538, 1701, 81, 6589, 21573, 11, 527, 4020, 433, 11, 51685], "temperature": 0.0, "avg_logprob": -0.23362475175123948, "compression_ratio": 1.52, "no_speech_prob": 3.334316329983711e-12}, {"id": 137, "seek": 112544, "start": 1125.44, "end": 1133.1200000000001, "text": " uh, sniff, and maybe log packets. And sometimes, for good reason, organizations, uh, companies will", "tokens": [50365, 2232, 11, 31101, 11, 293, 1310, 3565, 30364, 13, 400, 2171, 11, 337, 665, 1778, 11, 6150, 11, 2232, 11, 3431, 486, 50749], "temperature": 0.0, "avg_logprob": -0.1521802960020123, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.652717238579849e-12}, {"id": 138, "seek": 112544, "start": 1133.1200000000001, "end": 1141.28, "text": " often log all IP traffic that comes from inside out and also inside in for all kinds of, uh, auditing", "tokens": [50749, 2049, 3565, 439, 8671, 6419, 300, 1487, 490, 1854, 484, 293, 611, 1854, 294, 337, 439, 3685, 295, 11, 2232, 11, 2379, 1748, 51157], "temperature": 0.0, "avg_logprob": -0.1521802960020123, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.652717238579849e-12}, {"id": 139, "seek": 112544, "start": 1141.28, "end": 1146.96, "text": " purposes. Like if shit hits the fan and things go wrong, they need to investigate and figure out, ah,", "tokens": [51157, 9932, 13, 1743, 498, 4611, 8664, 264, 3429, 293, 721, 352, 2085, 11, 436, 643, 281, 15013, 293, 2573, 484, 11, 3716, 11, 51441], "temperature": 0.0, "avg_logprob": -0.1521802960020123, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.652717238579849e-12}, {"id": 140, "seek": 112544, "start": 1146.96, "end": 1153.2, "text": " how exactly sort of forensically figure out what happened, right? Where did the malware come in? Where", "tokens": [51441, 577, 2293, 1333, 295, 32034, 984, 2573, 484, 437, 2011, 11, 558, 30, 2305, 630, 264, 40747, 808, 294, 30, 2305, 51753], "temperature": 0.0, "avg_logprob": -0.1521802960020123, "compression_ratio": 1.5984251968503937, "no_speech_prob": 2.652717238579849e-12}, {"id": 141, "seek": 115320, "start": 1153.2, "end": 1158.24, "text": " did the phishing come in? Where did the routing update, you know, fake routing that they can be", "tokens": [50365, 630, 264, 903, 3807, 808, 294, 30, 2305, 630, 264, 32722, 5623, 11, 291, 458, 11, 7592, 32722, 300, 436, 393, 312, 50617], "temperature": 0.0, "avg_logprob": -0.2278594277121804, "compression_ratio": 1.6624472573839661, "no_speech_prob": 2.7547051011794776e-12}, {"id": 142, "seek": 115320, "start": 1158.24, "end": 1164.48, "text": " so they need to do this. And so this logging can, or sniff, sniffing can happen for benign reasons,", "tokens": [50617, 370, 436, 643, 281, 360, 341, 13, 400, 370, 341, 27991, 393, 11, 420, 31101, 11, 31101, 278, 393, 1051, 337, 3271, 788, 4112, 11, 50929], "temperature": 0.0, "avg_logprob": -0.2278594277121804, "compression_ratio": 1.6624472573839661, "no_speech_prob": 2.7547051011794776e-12}, {"id": 143, "seek": 115320, "start": 1164.48, "end": 1170.88, "text": " or it can happen for non, for malicious reasons. IP addresses, as, as, as we talked about, are public.", "tokens": [50929, 420, 309, 393, 1051, 337, 2107, 11, 337, 33496, 4112, 13, 8671, 16862, 11, 382, 11, 382, 11, 382, 321, 2825, 466, 11, 366, 1908, 13, 51249], "temperature": 0.0, "avg_logprob": -0.2278594277121804, "compression_ratio": 1.6624472573839661, "no_speech_prob": 2.7547051011794776e-12}, {"id": 144, "seek": 115320, "start": 1170.88, "end": 1176.88, "text": " They're not hidden, um, unless you're using IPsec, but even with IPsec, right, the outermost IP", "tokens": [51249, 814, 434, 406, 7633, 11, 1105, 11, 5969, 291, 434, 1228, 8671, 8159, 11, 457, 754, 365, 8671, 8159, 11, 558, 11, 264, 484, 966, 555, 8671, 51549], "temperature": 0.0, "avg_logprob": -0.2278594277121804, "compression_ratio": 1.6624472573839661, "no_speech_prob": 2.7547051011794776e-12}, {"id": 145, "seek": 117688, "start": 1176.88, "end": 1186.5600000000002, "text": " here is visible. And it often provides some information. Uh, TCP connection. So IP is difficult", "tokens": [50365, 510, 307, 8974, 13, 400, 309, 2049, 6417, 512, 1589, 13, 4019, 11, 48965, 4984, 13, 407, 8671, 307, 2252, 50849], "temperature": 0.0, "avg_logprob": -0.12091854456308726, "compression_ratio": 1.4466019417475728, "no_speech_prob": 2.3646887399586536e-12}, {"id": 146, "seek": 117688, "start": 1186.5600000000002, "end": 1196.16, "text": " to abuse by itself because it's not a protocol, but TCP is a protocol. And you saw the state diagram", "tokens": [50849, 281, 9852, 538, 2564, 570, 309, 311, 406, 257, 10336, 11, 457, 48965, 307, 257, 10336, 13, 400, 291, 1866, 264, 1785, 10686, 51329], "temperature": 0.0, "avg_logprob": -0.12091854456308726, "compression_ratio": 1.4466019417475728, "no_speech_prob": 2.3646887399586536e-12}, {"id": 147, "seek": 117688, "start": 1196.16, "end": 1201.7600000000002, "text": " that I hope impressed the heck out of you, right? There are actually courses out there. When I was in", "tokens": [51329, 300, 286, 1454, 11679, 264, 12872, 484, 295, 291, 11, 558, 30, 821, 366, 767, 7712, 484, 456, 13, 1133, 286, 390, 294, 51609], "temperature": 0.0, "avg_logprob": -0.12091854456308726, "compression_ratio": 1.4466019417475728, "no_speech_prob": 2.3646887399586536e-12}, {"id": 148, "seek": 120176, "start": 1201.76, "end": 1207.76, "text": " grad school, we had to memorize the freaking TCP diagram and answer, you know, final questions", "tokens": [50365, 2771, 1395, 11, 321, 632, 281, 27478, 264, 14612, 48965, 10686, 293, 1867, 11, 291, 458, 11, 2572, 1651, 50665], "temperature": 0.0, "avg_logprob": -0.1835559099570088, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.1995051179696246e-12}, {"id": 149, "seek": 120176, "start": 1207.76, "end": 1214.8799999999999, "text": " that you should feel, you should feel lucky. I mean, pretty much everybody failed that. But,", "tokens": [50665, 300, 291, 820, 841, 11, 291, 820, 841, 6356, 13, 286, 914, 11, 1238, 709, 2201, 7612, 300, 13, 583, 11, 51021], "temperature": 0.0, "avg_logprob": -0.1835559099570088, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.1995051179696246e-12}, {"id": 150, "seek": 120176, "start": 1215.68, "end": 1224.08, "text": " but it was, it was rough. Um, TCP requires state, right? Because the connection is this connection", "tokens": [51061, 457, 309, 390, 11, 309, 390, 5903, 13, 3301, 11, 48965, 7029, 1785, 11, 558, 30, 1436, 264, 4984, 307, 341, 4984, 51481], "temperature": 0.0, "avg_logprob": -0.1835559099570088, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.1995051179696246e-12}, {"id": 151, "seek": 120176, "start": 1224.08, "end": 1228.24, "text": " oriented protocol and every connection oriented protocol on the face of this earth requires state", "tokens": [51481, 21841, 10336, 293, 633, 4984, 21841, 10336, 322, 264, 1851, 295, 341, 4120, 7029, 1785, 51689], "temperature": 0.0, "avg_logprob": -0.1835559099570088, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.1995051179696246e-12}, {"id": 152, "seek": 122824, "start": 1228.24, "end": 1233.44, "text": " here and there at the source and the destination or whatever the connection endpoints, right?", "tokens": [50365, 510, 293, 456, 412, 264, 4009, 293, 264, 12236, 420, 2035, 264, 4984, 917, 20552, 11, 558, 30, 50625], "temperature": 0.0, "avg_logprob": -0.1282775742667062, "compression_ratio": 1.6506550218340612, "no_speech_prob": 2.4882027861716782e-12}, {"id": 153, "seek": 122824, "start": 1234.16, "end": 1242.0, "text": " And that state isn't free. Depending on how your, uh, network protocol stack is implemented within", "tokens": [50661, 400, 300, 1785, 1943, 380, 1737, 13, 22539, 322, 577, 428, 11, 2232, 11, 3209, 10336, 8630, 307, 12270, 1951, 51053], "temperature": 0.0, "avg_logprob": -0.1282775742667062, "compression_ratio": 1.6506550218340612, "no_speech_prob": 2.4882027861716782e-12}, {"id": 154, "seek": 122824, "start": 1242.0, "end": 1250.4, "text": " the kernel, outside the kernel, it is consuming memory and resources. There is a whole course discussion", "tokens": [51053, 264, 28256, 11, 2380, 264, 28256, 11, 309, 307, 19867, 4675, 293, 3593, 13, 821, 307, 257, 1379, 1164, 5017, 51473], "temperature": 0.0, "avg_logprob": -0.1282775742667062, "compression_ratio": 1.6506550218340612, "no_speech_prob": 2.4882027861716782e-12}, {"id": 155, "seek": 122824, "start": 1250.4, "end": 1254.0, "text": " of whether you should put, you know, an operating system should keep the network", "tokens": [51473, 295, 1968, 291, 820, 829, 11, 291, 458, 11, 364, 7447, 1185, 820, 1066, 264, 3209, 51653], "temperature": 0.0, "avg_logprob": -0.1282775742667062, "compression_ratio": 1.6506550218340612, "no_speech_prob": 2.4882027861716782e-12}, {"id": 156, "seek": 125400, "start": 1254.0, "end": 1260.24, "text": " stack inside the kernel or outside the kernel. Outside the kernel makes the kernel nicer, smaller,", "tokens": [50365, 8630, 1854, 264, 28256, 420, 2380, 264, 28256, 13, 28218, 264, 28256, 1669, 264, 28256, 22842, 11, 4356, 11, 50677], "temperature": 0.0, "avg_logprob": -0.16405493021011353, "compression_ratio": 1.828193832599119, "no_speech_prob": 1.857432827337413e-12}, {"id": 157, "seek": 125400, "start": 1261.2, "end": 1269.84, "text": " easier to find bugs, et cetera, et cetera, faster maybe, but putting it inside makes networking faster.", "tokens": [50725, 3571, 281, 915, 15120, 11, 1030, 11458, 11, 1030, 11458, 11, 4663, 1310, 11, 457, 3372, 309, 1854, 1669, 17985, 4663, 13, 51157], "temperature": 0.0, "avg_logprob": -0.16405493021011353, "compression_ratio": 1.828193832599119, "no_speech_prob": 1.857432827337413e-12}, {"id": 158, "seek": 125400, "start": 1271.2, "end": 1276.72, "text": " Because if the, if the networking stack runs outside kernel space, you have to switch into the kernel", "tokens": [51225, 1436, 498, 264, 11, 498, 264, 17985, 8630, 6676, 2380, 28256, 1901, 11, 291, 362, 281, 3679, 666, 264, 28256, 51501], "temperature": 0.0, "avg_logprob": -0.16405493021011353, "compression_ratio": 1.828193832599119, "no_speech_prob": 1.857432827337413e-12}, {"id": 159, "seek": 125400, "start": 1276.72, "end": 1283.76, "text": " often, right? Because there's some still controls that need to take place. Anyway, um, state is important. And", "tokens": [51501, 2049, 11, 558, 30, 1436, 456, 311, 512, 920, 9003, 300, 643, 281, 747, 1081, 13, 5684, 11, 1105, 11, 1785, 307, 1021, 13, 400, 51853], "temperature": 0.0, "avg_logprob": -0.16405493021011353, "compression_ratio": 1.828193832599119, "no_speech_prob": 1.857432827337413e-12}, {"id": 160, "seek": 128376, "start": 1283.76, "end": 1289.68, "text": " there are attacks and so attacks on that state. And we will see one very impressive example called", "tokens": [50365, 456, 366, 8122, 293, 370, 8122, 322, 300, 1785, 13, 400, 321, 486, 536, 472, 588, 8992, 1365, 1219, 50661], "temperature": 0.0, "avg_logprob": -0.18091167650724713, "compression_ratio": 1.6502057613168724, "no_speech_prob": 3.820165538070963e-12}, {"id": 161, "seek": 128376, "start": 1289.68, "end": 1299.04, "text": " SynthFlight. Also, TCP state, the state that is maintained at both ends of a connection is not secret by", "tokens": [50661, 318, 18656, 37, 2764, 13, 2743, 11, 48965, 1785, 11, 264, 1785, 300, 307, 17578, 412, 1293, 5314, 295, 257, 4984, 307, 406, 4054, 538, 51129], "temperature": 0.0, "avg_logprob": -0.18091167650724713, "compression_ratio": 1.6502057613168724, "no_speech_prob": 3.820165538070963e-12}, {"id": 162, "seek": 128376, "start": 1299.04, "end": 1307.04, "text": " nature. And because it's not secret, it can be sometimes easily guessed. And if you guess that state", "tokens": [51129, 3687, 13, 400, 570, 309, 311, 406, 4054, 11, 309, 393, 312, 2171, 3612, 21852, 13, 400, 498, 291, 2041, 300, 1785, 51529], "temperature": 0.0, "avg_logprob": -0.18091167650724713, "compression_ratio": 1.6502057613168724, "no_speech_prob": 3.820165538070963e-12}, {"id": 163, "seek": 128376, "start": 1307.04, "end": 1313.52, "text": " correctly, you can manipulate the connection by injecting traffic into it. Even from my outside,", "tokens": [51529, 8944, 11, 291, 393, 20459, 264, 4984, 538, 10711, 278, 6419, 666, 309, 13, 2754, 490, 452, 2380, 11, 51853], "temperature": 0.0, "avg_logprob": -0.18091167650724713, "compression_ratio": 1.6502057613168724, "no_speech_prob": 3.820165538070963e-12}, {"id": 164, "seek": 131352, "start": 1313.52, "end": 1320.4, "text": " from far away, from far away, you can inject traffic into it. And you can even close a connection,", "tokens": [50365, 490, 1400, 1314, 11, 490, 1400, 1314, 11, 291, 393, 10711, 6419, 666, 309, 13, 400, 291, 393, 754, 1998, 257, 4984, 11, 50709], "temperature": 0.0, "avg_logprob": -0.15907118055555555, "compression_ratio": 1.4214285714285715, "no_speech_prob": 2.701399867688359e-12}, {"id": 165, "seek": 131352, "start": 1321.84, "end": 1333.44, "text": " which is kind of a nifty denial of service attack. Okay, so sniffing is not so impressive, right? So", "tokens": [50781, 597, 307, 733, 295, 257, 297, 37177, 28754, 295, 2643, 2690, 13, 1033, 11, 370, 31101, 278, 307, 406, 370, 8992, 11, 558, 30, 407, 51361], "temperature": 0.0, "avg_logprob": -0.15907118055555555, "compression_ratio": 1.4214285714285715, "no_speech_prob": 2.701399867688359e-12}, {"id": 166, "seek": 133344, "start": 1333.44, "end": 1343.92, "text": " what they have to do just sniff. But years ago, back in the 90s, early 2000s, there was still a lot of", "tokens": [50365, 437, 436, 362, 281, 360, 445, 31101, 13, 583, 924, 2057, 11, 646, 294, 264, 4289, 82, 11, 2440, 8132, 82, 11, 456, 390, 920, 257, 688, 295, 50889], "temperature": 0.0, "avg_logprob": -0.2705830574035645, "compression_ratio": 1.395973154362416, "no_speech_prob": 2.4419882348886146e-12}, {"id": 167, "seek": 133344, "start": 1343.92, "end": 1353.28, "text": " alignment, there were most implementations of these commands like ftp, telnet, rcp, you may have run into", "tokens": [50889, 18515, 11, 456, 645, 881, 4445, 763, 295, 613, 16901, 411, 31842, 79, 11, 15284, 7129, 11, 367, 66, 79, 11, 291, 815, 362, 1190, 666, 51357], "temperature": 0.0, "avg_logprob": -0.2705830574035645, "compression_ratio": 1.395973154362416, "no_speech_prob": 2.4419882348886146e-12}, {"id": 168, "seek": 135328, "start": 1353.28, "end": 1359.36, "text": " these commands. And they still exist in many Unix versions, right? FTP file transfer, telnet, remote", "tokens": [50365, 613, 16901, 13, 400, 436, 920, 2514, 294, 867, 1156, 970, 9606, 11, 558, 30, 479, 16804, 3991, 5003, 11, 15284, 7129, 11, 8607, 50669], "temperature": 0.0, "avg_logprob": -0.1334154694168656, "compression_ratio": 1.6693548387096775, "no_speech_prob": 2.423834570552952e-12}, {"id": 169, "seek": 135328, "start": 1359.36, "end": 1367.68, "text": " login, rcp, remote copy, RSH, remote shell. Okay, these commands required passwords, right? But they", "tokens": [50669, 24276, 11, 367, 66, 79, 11, 8607, 5055, 11, 497, 17308, 11, 8607, 8720, 13, 1033, 11, 613, 16901, 4739, 33149, 11, 558, 30, 583, 436, 51085], "temperature": 0.0, "avg_logprob": -0.1334154694168656, "compression_ratio": 1.6693548387096775, "no_speech_prob": 2.423834570552952e-12}, {"id": 170, "seek": 135328, "start": 1367.68, "end": 1375.28, "text": " sent them in the clear. Because remember, the world was friendly. Yes, you have to have a password that if you", "tokens": [51085, 2279, 552, 294, 264, 1850, 13, 1436, 1604, 11, 264, 1002, 390, 9208, 13, 1079, 11, 291, 362, 281, 362, 257, 11524, 300, 498, 291, 51465], "temperature": 0.0, "avg_logprob": -0.1334154694168656, "compression_ratio": 1.6693548387096775, "no_speech_prob": 2.423834570552952e-12}, {"id": 171, "seek": 135328, "start": 1375.28, "end": 1379.76, "text": " sniffed on those packets that were sent back and forth, and you sniffed on them in the beginning of a", "tokens": [51465, 31101, 292, 322, 729, 30364, 300, 645, 2279, 646, 293, 5220, 11, 293, 291, 31101, 292, 322, 552, 294, 264, 2863, 295, 257, 51689], "temperature": 0.0, "avg_logprob": -0.1334154694168656, "compression_ratio": 1.6693548387096775, "no_speech_prob": 2.423834570552952e-12}, {"id": 172, "seek": 137976, "start": 1379.76, "end": 1383.84, "text": " connection, you would actually get a clear text password. Now, why am I telling you this? This is", "tokens": [50365, 4984, 11, 291, 576, 767, 483, 257, 1850, 2487, 11524, 13, 823, 11, 983, 669, 286, 3585, 291, 341, 30, 639, 307, 50569], "temperature": 0.0, "avg_logprob": -0.09667478288922991, "compression_ratio": 1.5625, "no_speech_prob": 2.5320290569091908e-12}, {"id": 173, "seek": 137976, "start": 1383.84, "end": 1388.56, "text": " prehistory, right? Well, the truth is, prehistory is not actually that much of a prehistory. Because", "tokens": [50569, 659, 33236, 827, 11, 558, 30, 1042, 11, 264, 3494, 307, 11, 659, 33236, 827, 307, 406, 767, 300, 709, 295, 257, 659, 33236, 827, 13, 1436, 50805], "temperature": 0.0, "avg_logprob": -0.09667478288922991, "compression_ratio": 1.5625, "no_speech_prob": 2.5320290569091908e-12}, {"id": 174, "seek": 137976, "start": 1389.28, "end": 1395.36, "text": " out there in the real world today, there are still Windows 3.0 implementations running.", "tokens": [50841, 484, 456, 294, 264, 957, 1002, 965, 11, 456, 366, 920, 8591, 805, 13, 15, 4445, 763, 2614, 13, 51145], "temperature": 0.0, "avg_logprob": -0.09667478288922991, "compression_ratio": 1.5625, "no_speech_prob": 2.5320290569091908e-12}, {"id": 175, "seek": 137976, "start": 1397.04, "end": 1403.2, "text": " Yes, legacy, like from the 90s, there are many places, especially in industrial control,", "tokens": [51229, 1079, 11, 11711, 11, 411, 490, 264, 4289, 82, 11, 456, 366, 867, 3190, 11, 2318, 294, 9987, 1969, 11, 51537], "temperature": 0.0, "avg_logprob": -0.09667478288922991, "compression_ratio": 1.5625, "no_speech_prob": 2.5320290569091908e-12}, {"id": 176, "seek": 140320, "start": 1403.2, "end": 1411.68, "text": " where really obsolete operating systems are used. Why? Because some software is written", "tokens": [50365, 689, 534, 46333, 7447, 3652, 366, 1143, 13, 1545, 30, 1436, 512, 4722, 307, 3720, 50789], "temperature": 0.0, "avg_logprob": -0.09835134853016246, "compression_ratio": 1.594142259414226, "no_speech_prob": 3.2700977342647874e-12}, {"id": 177, "seek": 140320, "start": 1411.68, "end": 1415.52, "text": " to take advantage of those operating system features, and nobody knows because the people", "tokens": [50789, 281, 747, 5002, 295, 729, 7447, 1185, 4122, 11, 293, 5079, 3255, 570, 264, 561, 50981], "temperature": 0.0, "avg_logprob": -0.09835134853016246, "compression_ratio": 1.594142259414226, "no_speech_prob": 3.2700977342647874e-12}, {"id": 178, "seek": 140320, "start": 1415.52, "end": 1422.24, "text": " who wrote it probably are dead now, okay? Or in a retirement home and demented, or doing something", "tokens": [50981, 567, 4114, 309, 1391, 366, 3116, 586, 11, 1392, 30, 1610, 294, 257, 15189, 1280, 293, 368, 14684, 11, 420, 884, 746, 51317], "temperature": 0.0, "avg_logprob": -0.09835134853016246, "compression_ratio": 1.594142259414226, "no_speech_prob": 3.2700977342647874e-12}, {"id": 179, "seek": 140320, "start": 1422.24, "end": 1428.64, "text": " else, and nobody learned how to program on Windows 3.0 because it's so old. You get the point? Just like", "tokens": [51317, 1646, 11, 293, 5079, 3264, 577, 281, 1461, 322, 8591, 805, 13, 15, 570, 309, 311, 370, 1331, 13, 509, 483, 264, 935, 30, 1449, 411, 51637], "temperature": 0.0, "avg_logprob": -0.09835134853016246, "compression_ratio": 1.594142259414226, "no_speech_prob": 3.2700977342647874e-12}, {"id": 180, "seek": 142864, "start": 1428.64, "end": 1436.64, "text": " NASA and the federal government in general has gazillions of lines of code in various software", "tokens": [50365, 12077, 293, 264, 6019, 2463, 294, 2674, 575, 26232, 46279, 295, 3876, 295, 3089, 294, 3683, 4722, 50765], "temperature": 0.0, "avg_logprob": -0.12871828946200284, "compression_ratio": 1.497560975609756, "no_speech_prob": 2.25029370137797e-12}, {"id": 181, "seek": 142864, "start": 1436.64, "end": 1446.0800000000002, "text": " installations that run COBOL. Maybe your grandparents know what COBOL is, if they were in the tech industry.", "tokens": [50765, 41932, 300, 1190, 34812, 5046, 13, 2704, 428, 21876, 458, 437, 34812, 5046, 307, 11, 498, 436, 645, 294, 264, 7553, 3518, 13, 51237], "temperature": 0.0, "avg_logprob": -0.12871828946200284, "compression_ratio": 1.497560975609756, "no_speech_prob": 2.25029370137797e-12}, {"id": 182, "seek": 142864, "start": 1446.0800000000002, "end": 1453.2, "text": " But COBOL is a language from the 60s. Tons of code was written in COBOL, and a lot of it still remains.", "tokens": [51237, 583, 34812, 5046, 307, 257, 2856, 490, 264, 4060, 82, 13, 314, 892, 295, 3089, 390, 3720, 294, 34812, 5046, 11, 293, 257, 688, 295, 309, 920, 7023, 13, 51593], "temperature": 0.0, "avg_logprob": -0.12871828946200284, "compression_ratio": 1.497560975609756, "no_speech_prob": 2.25029370137797e-12}, {"id": 183, "seek": 145320, "start": 1453.2, "end": 1462.8, "text": " Because nobody knows COBOL programmers today earn big bucks. If they're alive. Anyway, so these,", "tokens": [50365, 1436, 5079, 3255, 34812, 5046, 41504, 965, 6012, 955, 11829, 13, 759, 436, 434, 5465, 13, 5684, 11, 370, 613, 11, 50845], "temperature": 0.0, "avg_logprob": -0.24118340183311784, "compression_ratio": 1.44, "no_speech_prob": 2.0694669936038856e-12}, {"id": 184, "seek": 145320, "start": 1462.8, "end": 1469.8400000000001, "text": " these things still out there. The other thing is that if you, the Ethernet itself, right?", "tokens": [50845, 613, 721, 920, 484, 456, 13, 440, 661, 551, 307, 300, 498, 291, 11, 264, 38636, 7129, 2564, 11, 558, 30, 51197], "temperature": 0.0, "avg_logprob": -0.24118340183311784, "compression_ratio": 1.44, "no_speech_prob": 2.0694669936038856e-12}, {"id": 185, "seek": 145320, "start": 1471.6000000000001, "end": 1478.72, "text": " So I'm stepping down into the data link layer. Ethernet by itself has some very interesting features.", "tokens": [51285, 407, 286, 478, 16821, 760, 666, 264, 1412, 2113, 4583, 13, 38636, 7129, 538, 2564, 575, 512, 588, 1880, 4122, 13, 51641], "temperature": 0.0, "avg_logprob": -0.24118340183311784, "compression_ratio": 1.44, "no_speech_prob": 2.0694669936038856e-12}, {"id": 186, "seek": 147872, "start": 1478.72, "end": 1484.08, "text": " Most Ethernet interfaces have a way of being put in what's called promiscuous mode.", "tokens": [50365, 4534, 38636, 7129, 28416, 362, 257, 636, 295, 885, 829, 294, 437, 311, 1219, 2234, 5606, 12549, 4391, 13, 50633], "temperature": 0.0, "avg_logprob": -0.18484653673673931, "compression_ratio": 1.6200873362445414, "no_speech_prob": 2.5410533052716566e-12}, {"id": 187, "seek": 147872, "start": 1485.04, "end": 1492.0, "text": " And this is how ethereal works and TCP dump, if you've used those pretty popular programs.", "tokens": [50681, 400, 341, 307, 577, 6468, 46036, 1985, 293, 48965, 11430, 11, 498, 291, 600, 1143, 729, 1238, 3743, 4268, 13, 51029], "temperature": 0.0, "avg_logprob": -0.18484653673673931, "compression_ratio": 1.6200873362445414, "no_speech_prob": 2.5410533052716566e-12}, {"id": 188, "seek": 147872, "start": 1492.88, "end": 1499.52, "text": " They put the card in the, in the promiscuous, your card, the NIC, the network interface control module,", "tokens": [51073, 814, 829, 264, 2920, 294, 264, 11, 294, 264, 2234, 5606, 12549, 11, 428, 2920, 11, 264, 426, 2532, 11, 264, 3209, 9226, 1969, 10088, 11, 51405], "temperature": 0.0, "avg_logprob": -0.18484653673673931, "compression_ratio": 1.6200873362445414, "no_speech_prob": 2.5410533052716566e-12}, {"id": 189, "seek": 147872, "start": 1499.52, "end": 1505.1200000000001, "text": " into this promiscuous mode. And you basically receive all the packets sent on the second. So", "tokens": [51405, 666, 341, 2234, 5606, 12549, 4391, 13, 400, 291, 1936, 4774, 439, 264, 30364, 2279, 322, 264, 1150, 13, 407, 51685], "temperature": 0.0, "avg_logprob": -0.18484653673673931, "compression_ratio": 1.6200873362445414, "no_speech_prob": 2.5410533052716566e-12}, {"id": 190, "seek": 150512, "start": 1505.12, "end": 1511.36, "text": " it means that if one of you does this with ethereal and TCP dump, you should be able to see everything", "tokens": [50365, 309, 1355, 300, 498, 472, 295, 291, 775, 341, 365, 6468, 46036, 293, 48965, 11430, 11, 291, 820, 312, 1075, 281, 536, 1203, 50677], "temperature": 0.0, "avg_logprob": -0.15888608020284903, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.6797455353739776e-12}, {"id": 191, "seek": 150512, "start": 1511.36, "end": 1516.32, "text": " that goes on here, maybe even outside, as long as the same access point is being used.", "tokens": [50677, 300, 1709, 322, 510, 11, 1310, 754, 2380, 11, 382, 938, 382, 264, 912, 2105, 935, 307, 885, 1143, 13, 50925], "temperature": 0.0, "avg_logprob": -0.15888608020284903, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.6797455353739776e-12}, {"id": 192, "seek": 150512, "start": 1517.4399999999998, "end": 1522.56, "text": " Right? It's called an Ethernet segment, right? So you will hear all the packets on the Ethernet segment.", "tokens": [50981, 1779, 30, 467, 311, 1219, 364, 38636, 7129, 9469, 11, 558, 30, 407, 291, 486, 1568, 439, 264, 30364, 322, 264, 38636, 7129, 9469, 13, 51237], "temperature": 0.0, "avg_logprob": -0.15888608020284903, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.6797455353739776e-12}, {"id": 193, "seek": 150512, "start": 1524.8799999999999, "end": 1527.52, "text": " So that's not very nice, but that's how it works.", "tokens": [51353, 407, 300, 311, 406, 588, 1481, 11, 457, 300, 311, 577, 309, 1985, 13, 51485], "temperature": 0.0, "avg_logprob": -0.15888608020284903, "compression_ratio": 1.5707762557077625, "no_speech_prob": 1.6797455353739776e-12}, {"id": 194, "seek": 152752, "start": 1528.4, "end": 1534.24, "text": " Now, if there's wireless security, like web, web, WPA, or something like that, plus there is IPsec,", "tokens": [50409, 823, 11, 498, 456, 311, 14720, 3825, 11, 411, 3670, 11, 3670, 11, 343, 10297, 11, 420, 746, 411, 300, 11, 1804, 456, 307, 8671, 8159, 11, 50701], "temperature": 0.0, "avg_logprob": -0.17037222462315713, "compression_ratio": 1.540909090909091, "no_speech_prob": 1.748682578947558e-12}, {"id": 195, "seek": 152752, "start": 1534.24, "end": 1539.76, "text": " plus there is SSL, you won't get anything. But at the very least, you'll see who is communicating.", "tokens": [50701, 1804, 456, 307, 12238, 43, 11, 291, 1582, 380, 483, 1340, 13, 583, 412, 264, 588, 1935, 11, 291, 603, 536, 567, 307, 17559, 13, 50977], "temperature": 0.0, "avg_logprob": -0.17037222462315713, "compression_ratio": 1.540909090909091, "no_speech_prob": 1.748682578947558e-12}, {"id": 196, "seek": 152752, "start": 1541.76, "end": 1543.84, "text": " You will also see how much they're communicating.", "tokens": [51077, 509, 486, 611, 536, 577, 709, 436, 434, 17559, 13, 51181], "temperature": 0.0, "avg_logprob": -0.17037222462315713, "compression_ratio": 1.540909090909091, "no_speech_prob": 1.748682578947558e-12}, {"id": 197, "seek": 152752, "start": 1545.52, "end": 1549.76, "text": " Right? You will see, oh, a particular Ethernet MAC address is talking to the access point,", "tokens": [51265, 1779, 30, 509, 486, 536, 11, 1954, 11, 257, 1729, 38636, 7129, 27716, 2985, 307, 1417, 281, 264, 2105, 935, 11, 51477], "temperature": 0.0, "avg_logprob": -0.17037222462315713, "compression_ratio": 1.540909090909091, "no_speech_prob": 1.748682578947558e-12}, {"id": 198, "seek": 154976, "start": 1549.76, "end": 1554.96, "text": " and it's sending large chunks of stuff. Oh, maybe somebody is recording this lecture here.", "tokens": [50365, 293, 309, 311, 7750, 2416, 24004, 295, 1507, 13, 876, 11, 1310, 2618, 307, 6613, 341, 7991, 510, 13, 50625], "temperature": 0.0, "avg_logprob": -0.23100003530812818, "compression_ratio": 1.7638888888888888, "no_speech_prob": 1.8393648149733766e-12}, {"id": 199, "seek": 154976, "start": 1556.4, "end": 1562.64, "text": " God forbid. Or they're not sending large chunks of stuff. Small chunks, they're receiving large", "tokens": [50697, 1265, 34117, 13, 1610, 436, 434, 406, 7750, 2416, 24004, 295, 1507, 13, 15287, 24004, 11, 436, 434, 10040, 2416, 51009], "temperature": 0.0, "avg_logprob": -0.23100003530812818, "compression_ratio": 1.7638888888888888, "no_speech_prob": 1.8393648149733766e-12}, {"id": 200, "seek": 154976, "start": 1562.64, "end": 1568.08, "text": " chunks in regular fashion, like regularly. Ah, somebody here is using streaming video. Right?", "tokens": [51009, 24004, 294, 3890, 6700, 11, 411, 11672, 13, 2438, 11, 2618, 510, 307, 1228, 11791, 960, 13, 1779, 30, 51281], "temperature": 0.0, "avg_logprob": -0.23100003530812818, "compression_ratio": 1.7638888888888888, "no_speech_prob": 1.8393648149733766e-12}, {"id": 201, "seek": 154976, "start": 1569.92, "end": 1576.24, "text": " Or it will be sending small chunks of small Ethernet packets upwards and receiving kind of irregular", "tokens": [51373, 1610, 309, 486, 312, 7750, 1359, 24004, 295, 1359, 38636, 7129, 30364, 22167, 293, 10040, 733, 295, 29349, 51689], "temperature": 0.0, "avg_logprob": -0.23100003530812818, "compression_ratio": 1.7638888888888888, "no_speech_prob": 1.8393648149733766e-12}, {"id": 202, "seek": 157624, "start": 1576.24, "end": 1582.96, "text": " size things back. Well, they're probably just browsing the web, right? So information is power.", "tokens": [50365, 2744, 721, 646, 13, 1042, 11, 436, 434, 1391, 445, 38602, 264, 3670, 11, 558, 30, 407, 1589, 307, 1347, 13, 50701], "temperature": 0.0, "avg_logprob": -0.21850073614785837, "compression_ratio": 1.5023923444976077, "no_speech_prob": 1.877320564627749e-12}, {"id": 203, "seek": 157624, "start": 1587.2, "end": 1589.84, "text": " So one example of an", "tokens": [50913, 407, 472, 1365, 295, 364, 51045], "temperature": 0.0, "avg_logprob": -0.21850073614785837, "compression_ratio": 1.5023923444976077, "no_speech_prob": 1.877320564627749e-12}, {"id": 204, "seek": 157624, "start": 1590.4, "end": 1597.6, "text": " Ethernet, sorry, of an attack that works on the Ethernet, but is actually not an Ethernet attack,", "tokens": [51073, 38636, 7129, 11, 2597, 11, 295, 364, 2690, 300, 1985, 322, 264, 38636, 7129, 11, 457, 307, 767, 406, 364, 38636, 7129, 2690, 11, 51433], "temperature": 0.0, "avg_logprob": -0.21850073614785837, "compression_ratio": 1.5023923444976077, "no_speech_prob": 1.877320564627749e-12}, {"id": 205, "seek": 157624, "start": 1597.6, "end": 1604.48, "text": " is the SMRF. Don't try this. You may actually find a few places where this would work. It shouldn't", "tokens": [51433, 307, 264, 13115, 49, 37, 13, 1468, 380, 853, 341, 13, 509, 815, 767, 915, 257, 1326, 3190, 689, 341, 576, 589, 13, 467, 4659, 380, 51777], "temperature": 0.0, "avg_logprob": -0.21850073614785837, "compression_ratio": 1.5023923444976077, "no_speech_prob": 1.877320564627749e-12}, {"id": 206, "seek": 160448, "start": 1604.48, "end": 1612.48, "text": " work today because of some remedial measures, but the SMRF attack basically works like this. You have,", "tokens": [50365, 589, 965, 570, 295, 512, 28718, 831, 8000, 11, 457, 264, 13115, 49, 37, 2690, 1936, 1985, 411, 341, 13, 509, 362, 11, 50765], "temperature": 0.0, "avg_logprob": -0.13199516296386718, "compression_ratio": 1.6375, "no_speech_prob": 1.8128304846848353e-12}, {"id": 207, "seek": 160448, "start": 1612.48, "end": 1618.32, "text": " you see, these hosts, these computers are on the same Ethernet segment. It doesn't matter if this is", "tokens": [50765, 291, 536, 11, 613, 21573, 11, 613, 10807, 366, 322, 264, 912, 38636, 7129, 9469, 13, 467, 1177, 380, 1871, 498, 341, 307, 51057], "temperature": 0.0, "avg_logprob": -0.13199516296386718, "compression_ratio": 1.6375, "no_speech_prob": 1.8128304846848353e-12}, {"id": 208, "seek": 160448, "start": 1618.32, "end": 1623.68, "text": " wired about wires, okay? Okay, so they're on the same segment, and they're controlled by that router.", "tokens": [51057, 27415, 466, 15537, 11, 1392, 30, 1033, 11, 370, 436, 434, 322, 264, 912, 9469, 11, 293, 436, 434, 10164, 538, 300, 22492, 13, 51325], "temperature": 0.0, "avg_logprob": -0.13199516296386718, "compression_ratio": 1.6375, "no_speech_prob": 1.8128304846848353e-12}, {"id": 209, "seek": 160448, "start": 1625.28, "end": 1629.3600000000001, "text": " So if they talk to each other, they talk directly, but if they talk to anybody outside,", "tokens": [51405, 407, 498, 436, 751, 281, 1184, 661, 11, 436, 751, 3838, 11, 457, 498, 436, 751, 281, 4472, 2380, 11, 51609], "temperature": 0.0, "avg_logprob": -0.13199516296386718, "compression_ratio": 1.6375, "no_speech_prob": 1.8128304846848353e-12}, {"id": 210, "seek": 162936, "start": 1629.36, "end": 1636.9599999999998, "text": " they go through the router, okay? Kind of like we do go through the access point here. Okay, so", "tokens": [50365, 436, 352, 807, 264, 22492, 11, 1392, 30, 9242, 295, 411, 321, 360, 352, 807, 264, 2105, 935, 510, 13, 1033, 11, 370, 50745], "temperature": 0.0, "avg_logprob": -0.19011947631835938, "compression_ratio": 1.544041450777202, "no_speech_prob": 1.8133662973984777e-12}, {"id": 211, "seek": 162936, "start": 1636.9599999999998, "end": 1644.24, "text": " suppose the adversary has a victim, some computer, right? Some phone, a computer or tablet or something", "tokens": [50745, 7297, 264, 48222, 575, 257, 6760, 11, 512, 3820, 11, 558, 30, 2188, 2593, 11, 257, 3820, 420, 14136, 420, 746, 51109], "temperature": 0.0, "avg_logprob": -0.19011947631835938, "compression_ratio": 1.544041450777202, "no_speech_prob": 1.8133662973984777e-12}, {"id": 212, "seek": 162936, "start": 1644.24, "end": 1651.9199999999998, "text": " with an IP address, okay? That victim is somewhere else. Could be close nearby, could be far away.", "tokens": [51109, 365, 364, 8671, 2985, 11, 1392, 30, 663, 6760, 307, 4079, 1646, 13, 7497, 312, 1998, 11184, 11, 727, 312, 1400, 1314, 13, 51493], "temperature": 0.0, "avg_logprob": -0.19011947631835938, "compression_ratio": 1.544041450777202, "no_speech_prob": 1.8133662973984777e-12}, {"id": 213, "seek": 165192, "start": 1651.92, "end": 1660.48, "text": " Okay, so what the adversary does is it generates an ICMP packet, okay? ECHO request with ECHO request", "tokens": [50365, 1033, 11, 370, 437, 264, 48222, 775, 307, 309, 23815, 364, 14360, 12224, 20300, 11, 1392, 30, 462, 5462, 46, 5308, 365, 462, 5462, 46, 5308, 50793], "temperature": 0.0, "avg_logprob": -0.2036175791422526, "compression_ratio": 1.5317919075144508, "no_speech_prob": 2.2488191864233897e-12}, {"id": 214, "seek": 165192, "start": 1660.48, "end": 1668.24, "text": " back. And according to the protocol specs, when a host receives an ICMP ECHO request,", "tokens": [50793, 646, 13, 400, 4650, 281, 264, 10336, 27911, 11, 562, 257, 3975, 20717, 364, 14360, 12224, 462, 5462, 46, 5308, 11, 51181], "temperature": 0.0, "avg_logprob": -0.2036175791422526, "compression_ratio": 1.5317919075144508, "no_speech_prob": 2.2488191864233897e-12}, {"id": 215, "seek": 165192, "start": 1668.24, "end": 1675.68, "text": " it's supposed to reply with ICMP ECHO reply. Nothing, nothing bad about that,", "tokens": [51181, 309, 311, 3442, 281, 16972, 365, 14360, 12224, 462, 5462, 46, 16972, 13, 6693, 11, 1825, 1578, 466, 300, 11, 51553], "temperature": 0.0, "avg_logprob": -0.2036175791422526, "compression_ratio": 1.5317919075144508, "no_speech_prob": 2.2488191864233897e-12}, {"id": 216, "seek": 167568, "start": 1675.68, "end": 1684.24, "text": " but if you generate this packet from outside, right? That Ethernet segment, it goes for the router,", "tokens": [50365, 457, 498, 291, 8460, 341, 20300, 490, 2380, 11, 558, 30, 663, 38636, 7129, 9469, 11, 309, 1709, 337, 264, 22492, 11, 50793], "temperature": 0.0, "avg_logprob": -0.15196276346842447, "compression_ratio": 1.4782608695652173, "no_speech_prob": 2.5944366013191944e-12}, {"id": 217, "seek": 167568, "start": 1684.24, "end": 1690.5600000000002, "text": " and then, as long as you put the destination broadcast address, and by the way, there is such", "tokens": [50793, 293, 550, 11, 382, 938, 382, 291, 829, 264, 12236, 9975, 2985, 11, 293, 538, 264, 636, 11, 456, 307, 1270, 51109], "temperature": 0.0, "avg_logprob": -0.15196276346842447, "compression_ratio": 1.4782608695652173, "no_speech_prob": 2.5944366013191944e-12}, {"id": 218, "seek": 167568, "start": 1690.5600000000002, "end": 1697.52, "text": " a thing, right? 255, 255, 255, 255 means everybody's supposed to receive this.", "tokens": [51109, 257, 551, 11, 558, 30, 3552, 20, 11, 3552, 20, 11, 3552, 20, 11, 3552, 20, 1355, 2201, 311, 3442, 281, 4774, 341, 13, 51457], "temperature": 0.0, "avg_logprob": -0.15196276346842447, "compression_ratio": 1.4782608695652173, "no_speech_prob": 2.5944366013191944e-12}, {"id": 219, "seek": 169752, "start": 1697.52, "end": 1706.08, "text": " Everybody will receive it and dutifully generate an ECHO reply. Now, my silly picture has three", "tokens": [50365, 7646, 486, 4774, 309, 293, 274, 325, 15386, 8460, 364, 462, 5462, 46, 16972, 13, 823, 11, 452, 11774, 3036, 575, 1045, 50793], "temperature": 0.0, "avg_logprob": -0.21426386772831785, "compression_ratio": 1.4527363184079602, "no_speech_prob": 2.994664845962225e-12}, {"id": 220, "seek": 169752, "start": 1707.36, "end": 1715.44, "text": " hosts on that set. But what if there is a 10,000 host on that set? Two things will happen.", "tokens": [50857, 21573, 322, 300, 992, 13, 583, 437, 498, 456, 307, 257, 1266, 11, 1360, 3975, 322, 300, 992, 30, 4453, 721, 486, 1051, 13, 51261], "temperature": 0.0, "avg_logprob": -0.21426386772831785, "compression_ratio": 1.4527363184079602, "no_speech_prob": 2.994664845962225e-12}, {"id": 221, "seek": 169752, "start": 1716.8, "end": 1724.16, "text": " One is the router will get a bit clogged. Maybe not so much. But that victim is going to get overwhelmed,", "tokens": [51329, 1485, 307, 264, 22492, 486, 483, 257, 857, 34455, 3004, 13, 2704, 406, 370, 709, 13, 583, 300, 6760, 307, 516, 281, 483, 19042, 11, 51697], "temperature": 0.0, "avg_logprob": -0.21426386772831785, "compression_ratio": 1.4527363184079602, "no_speech_prob": 2.994664845962225e-12}, {"id": 222, "seek": 172416, "start": 1724.16, "end": 1730.96, "text": " because especially if the adversary generates at nearly the same time a bunch of those ECHO requests", "tokens": [50365, 570, 2318, 498, 264, 48222, 23815, 412, 6217, 264, 912, 565, 257, 3840, 295, 729, 462, 5462, 46, 12475, 50705], "temperature": 0.0, "avg_logprob": -0.14115149939238136, "compression_ratio": 1.4919786096256684, "no_speech_prob": 2.023134264284021e-12}, {"id": 223, "seek": 172416, "start": 1730.96, "end": 1738.0, "text": " to different Ethernet segments out there, and everyone will reply to the poor victim.", "tokens": [50705, 281, 819, 38636, 7129, 19904, 484, 456, 11, 293, 1518, 486, 16972, 281, 264, 4716, 6760, 13, 51057], "temperature": 0.0, "avg_logprob": -0.14115149939238136, "compression_ratio": 1.4919786096256684, "no_speech_prob": 2.023134264284021e-12}, {"id": 224, "seek": 172416, "start": 1740.48, "end": 1747.44, "text": " Yes. The adversary also, you see, and the source, as the source does not put his IP address,", "tokens": [51181, 1079, 13, 440, 48222, 611, 11, 291, 536, 11, 293, 264, 4009, 11, 382, 264, 4009, 775, 406, 829, 702, 8671, 2985, 11, 51529], "temperature": 0.0, "avg_logprob": -0.14115149939238136, "compression_ratio": 1.4919786096256684, "no_speech_prob": 2.023134264284021e-12}, {"id": 225, "seek": 174744, "start": 1747.44, "end": 1754.56, "text": " puts the victim's IP address in red. I think that IP address is unauthenticated.", "tokens": [50365, 8137, 264, 6760, 311, 8671, 2985, 294, 2182, 13, 286, 519, 300, 8671, 2985, 307, 517, 40198, 317, 3587, 13, 50721], "temperature": 0.0, "avg_logprob": -0.13807977388982903, "compression_ratio": 1.4887640449438202, "no_speech_prob": 3.4909848449504732e-12}, {"id": 226, "seek": 174744, "start": 1756.16, "end": 1761.8400000000001, "text": " So the router will pass it, all the hosts on that segment will receive it, and dutifully reply.", "tokens": [50801, 407, 264, 22492, 486, 1320, 309, 11, 439, 264, 21573, 322, 300, 9469, 486, 4774, 309, 11, 293, 274, 325, 15386, 16972, 13, 51085], "temperature": 0.0, "avg_logprob": -0.13807977388982903, "compression_ratio": 1.4887640449438202, "no_speech_prob": 3.4909848449504732e-12}, {"id": 227, "seek": 174744, "start": 1764.24, "end": 1769.68, "text": " Once you know the problem, it's easy to fix, right? But the problem existed for a while.", "tokens": [51205, 3443, 291, 458, 264, 1154, 11, 309, 311, 1858, 281, 3191, 11, 558, 30, 583, 264, 1154, 13135, 337, 257, 1339, 13, 51477], "temperature": 0.0, "avg_logprob": -0.13807977388982903, "compression_ratio": 1.4887640449438202, "no_speech_prob": 3.4909848449504732e-12}, {"id": 228, "seek": 176968, "start": 1769.68, "end": 1779.2, "text": " You see this problem? Don't turn off broadcast. Maybe that is a bit heavy-handed,", "tokens": [50365, 509, 536, 341, 1154, 30, 1468, 380, 1261, 766, 9975, 13, 2704, 300, 307, 257, 857, 4676, 12, 25407, 11, 50841], "temperature": 0.0, "avg_logprob": -0.21430157858227927, "compression_ratio": 1.4662921348314606, "no_speech_prob": 3.289812432888395e-12}, {"id": 229, "seek": 176968, "start": 1779.8400000000001, "end": 1784.4, "text": " because there may be legitimate reasons to use broadcast within here, within this segment.", "tokens": [50873, 570, 456, 815, 312, 17956, 4112, 281, 764, 9975, 1951, 510, 11, 1951, 341, 9469, 13, 51101], "temperature": 0.0, "avg_logprob": -0.21430157858227927, "compression_ratio": 1.4662921348314606, "no_speech_prob": 3.289812432888395e-12}, {"id": 230, "seek": 176968, "start": 1784.4, "end": 1790.24, "text": " But what you do instead, you say, fill the router. You should not allow external packets", "tokens": [51101, 583, 437, 291, 360, 2602, 11, 291, 584, 11, 2836, 264, 22492, 13, 509, 820, 406, 2089, 8320, 30364, 51393], "temperature": 0.0, "avg_logprob": -0.21430157858227927, "compression_ratio": 1.4662921348314606, "no_speech_prob": 3.289812432888395e-12}, {"id": 231, "seek": 179024, "start": 1790.24, "end": 1800.24, "text": " address to the broadcast address. Right? Simple. You cannot authenticate the source that victims address.", "tokens": [50365, 2985, 281, 264, 9975, 2985, 13, 1779, 30, 21532, 13, 509, 2644, 9214, 8700, 264, 4009, 300, 11448, 2985, 13, 50865], "temperature": 0.0, "avg_logprob": -0.1946385873330606, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.017766162487611e-12}, {"id": 232, "seek": 179024, "start": 1800.24, "end": 1805.44, "text": " You don't know if it's true or not. But what you can do is say, broadcast can only be on the inside.", "tokens": [50865, 509, 500, 380, 458, 498, 309, 311, 2074, 420, 406, 13, 583, 437, 291, 393, 360, 307, 584, 11, 9975, 393, 787, 312, 322, 264, 1854, 13, 51125], "temperature": 0.0, "avg_logprob": -0.1946385873330606, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.017766162487611e-12}, {"id": 233, "seek": 179024, "start": 1806.4, "end": 1812.16, "text": " The router does not pass any any broadcast address pattern. Just drop it. That's it.", "tokens": [51173, 440, 22492, 775, 406, 1320, 604, 604, 9975, 2985, 5102, 13, 1449, 3270, 309, 13, 663, 311, 309, 13, 51461], "temperature": 0.0, "avg_logprob": -0.1946385873330606, "compression_ratio": 1.5901639344262295, "no_speech_prob": 2.017766162487611e-12}, {"id": 234, "seek": 181216, "start": 1812.16, "end": 1820.96, "text": " Ring of death. Even that might still exist. This is very old, but that might still exist somewhere.", "tokens": [50365, 19844, 295, 2966, 13, 2754, 300, 1062, 920, 2514, 13, 639, 307, 588, 1331, 11, 457, 300, 1062, 920, 2514, 4079, 13, 50805], "temperature": 0.0, "avg_logprob": -0.23424839973449707, "compression_ratio": 1.47196261682243, "no_speech_prob": 2.3090208130932544e-12}, {"id": 235, "seek": 181216, "start": 1820.96, "end": 1828.0800000000002, "text": " Because if you have an old, like, I think 3.0 or 3.1 Windows machine, there was a bug in the kernel.", "tokens": [50805, 1436, 498, 291, 362, 364, 1331, 11, 411, 11, 286, 519, 805, 13, 15, 420, 805, 13, 16, 8591, 3479, 11, 456, 390, 257, 7426, 294, 264, 28256, 13, 51161], "temperature": 0.0, "avg_logprob": -0.23424839973449707, "compression_ratio": 1.47196261682243, "no_speech_prob": 2.3090208130932544e-12}, {"id": 236, "seek": 181216, "start": 1828.72, "end": 1836.5600000000002, "text": " And what if, because, of course, IP was inside the kernel, so an ICMP packet with a payload over 64k was received,", "tokens": [51193, 400, 437, 498, 11, 570, 11, 295, 1164, 11, 8671, 390, 1854, 264, 28256, 11, 370, 364, 14360, 12224, 20300, 365, 257, 30918, 670, 12145, 74, 390, 4613, 11, 51585], "temperature": 0.0, "avg_logprob": -0.23424839973449707, "compression_ratio": 1.47196261682243, "no_speech_prob": 2.3090208130932544e-12}, {"id": 237, "seek": 183656, "start": 1836.56, "end": 1845.44, "text": " bam, crashed. It's not supposed to send IP packets over 64k, but if somebody does, there was no check.", "tokens": [50365, 18132, 11, 24190, 13, 467, 311, 406, 3442, 281, 2845, 8671, 30364, 670, 12145, 74, 11, 457, 498, 2618, 775, 11, 456, 390, 572, 1520, 13, 50809], "temperature": 0.0, "avg_logprob": -0.13419010054390385, "compression_ratio": 1.6827309236947792, "no_speech_prob": 1.7040186536115831e-12}, {"id": 238, "seek": 183656, "start": 1846.96, "end": 1853.36, "text": " So memory was overwritten. Some important stuff was overwritten as a result. Right? Because what does", "tokens": [50885, 407, 4675, 390, 670, 26859, 13, 2188, 1021, 1507, 390, 670, 26859, 382, 257, 1874, 13, 1779, 30, 1436, 437, 775, 51205], "temperature": 0.0, "avg_logprob": -0.13419010054390385, "compression_ratio": 1.6827309236947792, "no_speech_prob": 1.7040186536115831e-12}, {"id": 239, "seek": 183656, "start": 1853.36, "end": 1858.8799999999999, "text": " it mean received? You receive a packet and you have to copy it into some buffer, right? Yeah, you all", "tokens": [51205, 309, 914, 4613, 30, 509, 4774, 257, 20300, 293, 291, 362, 281, 5055, 309, 666, 512, 21762, 11, 558, 30, 865, 11, 291, 439, 51481], "temperature": 0.0, "avg_logprob": -0.13419010054390385, "compression_ratio": 1.6827309236947792, "no_speech_prob": 1.7040186536115831e-12}, {"id": 240, "seek": 183656, "start": 1858.8799999999999, "end": 1864.8799999999999, "text": " programmed at one point in your life, right? You have to copy it into some freaking buffer. But if the buffer is", "tokens": [51481, 31092, 412, 472, 935, 294, 428, 993, 11, 558, 30, 509, 362, 281, 5055, 309, 666, 512, 14612, 21762, 13, 583, 498, 264, 21762, 307, 51781], "temperature": 0.0, "avg_logprob": -0.13419010054390385, "compression_ratio": 1.6827309236947792, "no_speech_prob": 1.7040186536115831e-12}, {"id": 241, "seek": 186488, "start": 1864.88, "end": 1870.8000000000002, "text": " set hard-coded 64k, and you receive a packet of 128k, what's going to happen if this bug is present,", "tokens": [50365, 992, 1152, 12, 66, 12340, 12145, 74, 11, 293, 291, 4774, 257, 20300, 295, 29810, 74, 11, 437, 311, 516, 281, 1051, 498, 341, 7426, 307, 1974, 11, 50661], "temperature": 0.0, "avg_logprob": -0.20384773841271034, "compression_ratio": 1.422680412371134, "no_speech_prob": 1.9780368749194865e-12}, {"id": 242, "seek": 186488, "start": 1870.8000000000002, "end": 1876.48, "text": " if you don't check the boundaries? You're going to keep writing. And the extra 64k are going to", "tokens": [50661, 498, 291, 500, 380, 1520, 264, 13180, 30, 509, 434, 516, 281, 1066, 3579, 13, 400, 264, 2857, 12145, 74, 366, 516, 281, 50945], "temperature": 0.0, "avg_logprob": -0.20384773841271034, "compression_ratio": 1.422680412371134, "no_speech_prob": 1.9780368749194865e-12}, {"id": 243, "seek": 186488, "start": 1876.48, "end": 1885.3600000000001, "text": " overwrite something damn important. Boom. Okay, it's easy to fix once you know.", "tokens": [50945, 670, 21561, 746, 8151, 1021, 13, 15523, 13, 1033, 11, 309, 311, 1858, 281, 3191, 1564, 291, 458, 13, 51389], "temperature": 0.0, "avg_logprob": -0.20384773841271034, "compression_ratio": 1.422680412371134, "no_speech_prob": 1.9780368749194865e-12}, {"id": 244, "seek": 188536, "start": 1885.36, "end": 1895.6799999999998, "text": " Right. Then there's teardrop. They all have cutesy names, right? Teardrop.", "tokens": [50365, 1779, 13, 1396, 456, 311, 535, 515, 1513, 13, 814, 439, 362, 1723, 17823, 5288, 11, 558, 30, 1989, 515, 1513, 13, 50881], "temperature": 0.0, "avg_logprob": -0.21962631665743315, "compression_ratio": 1.3043478260869565, "no_speech_prob": 2.1021272830074045e-12}, {"id": 245, "seek": 188536, "start": 1898.8, "end": 1906.8799999999999, "text": " Remember we talked about overlapping fragments, right? So that's one. Except this is for TCP, not for IP.", "tokens": [51037, 5459, 321, 2825, 466, 33535, 29197, 11, 558, 30, 407, 300, 311, 472, 13, 16192, 341, 307, 337, 48965, 11, 406, 337, 8671, 13, 51441], "temperature": 0.0, "avg_logprob": -0.21962631665743315, "compression_ratio": 1.3043478260869565, "no_speech_prob": 2.1021272830074045e-12}, {"id": 246, "seek": 190688, "start": 1906.88, "end": 1913.2, "text": " Right? So you can have this overlapping in IP. You have fragmentation offset, remember? That's for the", "tokens": [50365, 1779, 30, 407, 291, 393, 362, 341, 33535, 294, 8671, 13, 509, 362, 9241, 19631, 18687, 11, 1604, 30, 663, 311, 337, 264, 50681], "temperature": 0.0, "avg_logprob": -0.14926337202390036, "compression_ratio": 1.6995708154506437, "no_speech_prob": 1.9567624430505415e-12}, {"id": 247, "seek": 190688, "start": 1913.2, "end": 1920.4, "text": " same packet. While the same thing, similar thing happens in TCP, except remember TCP sends segments.", "tokens": [50681, 912, 20300, 13, 3987, 264, 912, 551, 11, 2531, 551, 2314, 294, 48965, 11, 3993, 1604, 48965, 14790, 19904, 13, 51041], "temperature": 0.0, "avg_logprob": -0.14926337202390036, "compression_ratio": 1.6995708154506437, "no_speech_prob": 1.9567624430505415e-12}, {"id": 248, "seek": 190688, "start": 1921.92, "end": 1926.5600000000002, "text": " And every segment has an offset field. It's not a fragmentation. It's just offset into the", "tokens": [51117, 400, 633, 9469, 575, 364, 18687, 2519, 13, 467, 311, 406, 257, 9241, 19631, 13, 467, 311, 445, 18687, 666, 264, 51349], "temperature": 0.0, "avg_logprob": -0.14926337202390036, "compression_ratio": 1.6995708154506437, "no_speech_prob": 1.9567624430505415e-12}, {"id": 249, "seek": 190688, "start": 1926.5600000000002, "end": 1935.2800000000002, "text": " conversation, right? And if you send overlapping offsets, then bad things would happen. Right? So the", "tokens": [51349, 3761, 11, 558, 30, 400, 498, 291, 2845, 33535, 39457, 1385, 11, 550, 1578, 721, 576, 1051, 13, 1779, 30, 407, 264, 51785], "temperature": 0.0, "avg_logprob": -0.14926337202390036, "compression_ratio": 1.6995708154506437, "no_speech_prob": 1.9567624430505415e-12}, {"id": 250, "seek": 193528, "start": 1935.28, "end": 1940.3999999999999, "text": " attacker says offset filter overlapping values. And then when you reassemble, remember what happens", "tokens": [50365, 35871, 1619, 18687, 6608, 33535, 4190, 13, 400, 550, 562, 291, 319, 37319, 11, 1604, 437, 2314, 50621], "temperature": 0.0, "avg_logprob": -0.1530095180833196, "compression_ratio": 1.619047619047619, "no_speech_prob": 2.3111404283404635e-12}, {"id": 251, "seek": 193528, "start": 1940.3999999999999, "end": 1945.84, "text": " when you reassemble things with overlapping values, you wind up also overwriting stuff. So it would crash.", "tokens": [50621, 562, 291, 319, 37319, 721, 365, 33535, 4190, 11, 291, 2468, 493, 611, 670, 19868, 1507, 13, 407, 309, 576, 8252, 13, 50893], "temperature": 0.0, "avg_logprob": -0.1530095180833196, "compression_ratio": 1.619047619047619, "no_speech_prob": 2.3111404283404635e-12}, {"id": 252, "seek": 193528, "start": 1947.36, "end": 1949.44, "text": " Again, easy to fix once you know.", "tokens": [50969, 3764, 11, 1858, 281, 3191, 1564, 291, 458, 13, 51073], "temperature": 0.0, "avg_logprob": -0.1530095180833196, "compression_ratio": 1.619047619047619, "no_speech_prob": 2.3111404283404635e-12}, {"id": 253, "seek": 193528, "start": 1953.6, "end": 1959.76, "text": " I love this one. I don't know why it's called land. But there was also an older version of Windows,", "tokens": [51281, 286, 959, 341, 472, 13, 286, 500, 380, 458, 983, 309, 311, 1219, 2117, 13, 583, 456, 390, 611, 364, 4906, 3037, 295, 8591, 11, 51589], "temperature": 0.0, "avg_logprob": -0.1530095180833196, "compression_ratio": 1.619047619047619, "no_speech_prob": 2.3111404283404635e-12}, {"id": 254, "seek": 195976, "start": 1959.76, "end": 1966.96, "text": " again, I think 3.0. Where if you send an IP packet with a source address and a destination address the", "tokens": [50365, 797, 11, 286, 519, 805, 13, 15, 13, 2305, 498, 291, 2845, 364, 8671, 20300, 365, 257, 4009, 2985, 293, 257, 12236, 2985, 264, 50725], "temperature": 0.0, "avg_logprob": -0.15007775170462473, "compression_ratio": 1.6771300448430493, "no_speech_prob": 4.23102611973869e-12}, {"id": 255, "seek": 195976, "start": 1966.96, "end": 1973.44, "text": " same, meaning itself. So it's like saying, oh, the packet comes from the outside, but the source", "tokens": [50725, 912, 11, 3620, 2564, 13, 407, 309, 311, 411, 1566, 11, 1954, 11, 264, 20300, 1487, 490, 264, 2380, 11, 457, 264, 4009, 51049], "temperature": 0.0, "avg_logprob": -0.15007775170462473, "compression_ratio": 1.6771300448430493, "no_speech_prob": 4.23102611973869e-12}, {"id": 256, "seek": 195976, "start": 1973.44, "end": 1978.96, "text": " address is this host. And the destination address is this host. And the port numbers are the same.", "tokens": [51049, 2985, 307, 341, 3975, 13, 400, 264, 12236, 2985, 307, 341, 3975, 13, 400, 264, 2436, 3547, 366, 264, 912, 13, 51325], "temperature": 0.0, "avg_logprob": -0.15007775170462473, "compression_ratio": 1.6771300448430493, "no_speech_prob": 4.23102611973869e-12}, {"id": 257, "seek": 195976, "start": 1979.68, "end": 1984.4, "text": " It will just, like, lock the CPU. Go into, like, obviously an endless loop.", "tokens": [51361, 467, 486, 445, 11, 411, 11, 4017, 264, 13199, 13, 1037, 666, 11, 411, 11, 2745, 364, 16144, 6367, 13, 51597], "temperature": 0.0, "avg_logprob": -0.15007775170462473, "compression_ratio": 1.6771300448430493, "no_speech_prob": 4.23102611973869e-12}, {"id": 258, "seek": 198440, "start": 1984.4, "end": 1993.44, "text": " So easy to fix. You shouldn't be receiving packets with your address as the source. Hey, right?", "tokens": [50365, 407, 1858, 281, 3191, 13, 509, 4659, 380, 312, 10040, 30364, 365, 428, 2985, 382, 264, 4009, 13, 1911, 11, 558, 30, 50817], "temperature": 0.0, "avg_logprob": -0.24389309718691068, "compression_ratio": 1.3133333333333332, "no_speech_prob": 3.3329413447885647e-12}, {"id": 259, "seek": 198440, "start": 1998.96, "end": 2008.64, "text": " Uh, okay. Reminded by TCP handshake. We're not down to TCP. Yeah. Three-way handshake. Three packets.", "tokens": [51093, 4019, 11, 1392, 13, 4080, 471, 292, 538, 48965, 2377, 34593, 13, 492, 434, 406, 760, 281, 48965, 13, 865, 13, 6244, 12, 676, 2377, 34593, 13, 6244, 30364, 13, 51577], "temperature": 0.0, "avg_logprob": -0.24389309718691068, "compression_ratio": 1.3133333333333332, "no_speech_prob": 3.3329413447885647e-12}, {"id": 260, "seek": 200864, "start": 2009.2800000000002, "end": 2015.1200000000001, "text": " So not, like, one and a half round check, really. Now remember, client starts the connection, right?", "tokens": [50397, 407, 406, 11, 411, 11, 472, 293, 257, 1922, 3098, 1520, 11, 534, 13, 823, 1604, 11, 6423, 3719, 264, 4984, 11, 558, 30, 50689], "temperature": 0.0, "avg_logprob": -0.1832136114438375, "compression_ratio": 1.7652582159624413, "no_speech_prob": 2.046630660085258e-12}, {"id": 261, "seek": 200864, "start": 2016.0800000000002, "end": 2020.16, "text": " Client starts the connection because client has something to say to the server. Now here,", "tokens": [50737, 2033, 1196, 3719, 264, 4984, 570, 6423, 575, 746, 281, 584, 281, 264, 7154, 13, 823, 510, 11, 50941], "temperature": 0.0, "avg_logprob": -0.1832136114438375, "compression_ratio": 1.7652582159624413, "no_speech_prob": 2.046630660085258e-12}, {"id": 262, "seek": 200864, "start": 2020.16, "end": 2024.16, "text": " the server doesn't have to be a web server, right? We're talking about just a connection.", "tokens": [50941, 264, 7154, 1177, 380, 362, 281, 312, 257, 3670, 7154, 11, 558, 30, 492, 434, 1417, 466, 445, 257, 4984, 13, 51141], "temperature": 0.0, "avg_logprob": -0.1832136114438375, "compression_ratio": 1.7652582159624413, "no_speech_prob": 2.046630660085258e-12}, {"id": 263, "seek": 200864, "start": 2027.2, "end": 2034.64, "text": " So just think more broadly than just a web. So the client starts with the sin packet, the sinc.", "tokens": [51293, 407, 445, 519, 544, 19511, 813, 445, 257, 3670, 13, 407, 264, 6423, 3719, 365, 264, 3343, 20300, 11, 264, 3343, 66, 13, 51665], "temperature": 0.0, "avg_logprob": -0.1832136114438375, "compression_ratio": 1.7652582159624413, "no_speech_prob": 2.046630660085258e-12}, {"id": 264, "seek": 203464, "start": 2034.64, "end": 2046.0, "text": " The server, when it receives the packet, says, oh, ah, new connection request. Wonderful. Let me allocate", "tokens": [50365, 440, 7154, 11, 562, 309, 20717, 264, 20300, 11, 1619, 11, 1954, 11, 3716, 11, 777, 4984, 5308, 13, 22768, 13, 961, 385, 35713, 50933], "temperature": 0.0, "avg_logprob": -0.16504768321388646, "compression_ratio": 1.60752688172043, "no_speech_prob": 2.231473469546663e-12}, {"id": 265, "seek": 203464, "start": 2046.0, "end": 2053.84, "text": " some state. Let me reserve a little space in my table. I have a stable of open connections. Let me", "tokens": [50933, 512, 1785, 13, 961, 385, 17824, 257, 707, 1901, 294, 452, 3199, 13, 286, 362, 257, 8351, 295, 1269, 9271, 13, 961, 385, 51325], "temperature": 0.0, "avg_logprob": -0.16504768321388646, "compression_ratio": 1.60752688172043, "no_speech_prob": 2.231473469546663e-12}, {"id": 266, "seek": 203464, "start": 2053.84, "end": 2060.0, "text": " create a new entry. Let me put the source address of this packet, meaning the client's source,", "tokens": [51325, 1884, 257, 777, 8729, 13, 961, 385, 829, 264, 4009, 2985, 295, 341, 20300, 11, 3620, 264, 6423, 311, 4009, 11, 51633], "temperature": 0.0, "avg_logprob": -0.16504768321388646, "compression_ratio": 1.60752688172043, "no_speech_prob": 2.231473469546663e-12}, {"id": 267, "seek": 206000, "start": 2060.0, "end": 2064.48, "text": " IP address there. Let me put the fact that the connection is ongoing. It's not established,", "tokens": [50365, 8671, 2985, 456, 13, 961, 385, 829, 264, 1186, 300, 264, 4984, 307, 10452, 13, 467, 311, 406, 7545, 11, 50589], "temperature": 0.0, "avg_logprob": -0.13168534596761067, "compression_ratio": 1.5526315789473684, "no_speech_prob": 2.457506203742965e-12}, {"id": 268, "seek": 206000, "start": 2065.28, "end": 2074.88, "text": " okay? And sometimes, many times, spawn a thread. That is, threading is such a cool paradigm, right?", "tokens": [50629, 1392, 30, 400, 2171, 11, 867, 1413, 11, 17088, 257, 7207, 13, 663, 307, 11, 7207, 278, 307, 1270, 257, 1627, 24709, 11, 558, 30, 51109], "temperature": 0.0, "avg_logprob": -0.13168534596761067, "compression_ratio": 1.5526315789473684, "no_speech_prob": 2.457506203742965e-12}, {"id": 269, "seek": 206000, "start": 2075.84, "end": 2083.52, "text": " Everybody loves threading, right? So spawn a new thread for that connection and go on to another thing,", "tokens": [51157, 7646, 6752, 7207, 278, 11, 558, 30, 407, 17088, 257, 777, 7207, 337, 300, 4984, 293, 352, 322, 281, 1071, 551, 11, 51541], "temperature": 0.0, "avg_logprob": -0.13168534596761067, "compression_ratio": 1.5526315789473684, "no_speech_prob": 2.457506203742965e-12}, {"id": 270, "seek": 208352, "start": 2083.52, "end": 2090.48, "text": " okay? You don't want to sit there, right? And be dumb, you know, to just like receive a packet", "tokens": [50365, 1392, 30, 509, 500, 380, 528, 281, 1394, 456, 11, 558, 30, 400, 312, 10316, 11, 291, 458, 11, 281, 445, 411, 4774, 257, 20300, 50713], "temperature": 0.0, "avg_logprob": -0.1252289573744972, "compression_ratio": 1.737991266375546, "no_speech_prob": 2.289575647129727e-12}, {"id": 271, "seek": 208352, "start": 2091.52, "end": 2098.32, "text": " and then send a packet and then wait, right? And lock up and nothing happens. Now, you spawn a thread,", "tokens": [50765, 293, 550, 2845, 257, 20300, 293, 550, 1699, 11, 558, 30, 400, 4017, 493, 293, 1825, 2314, 13, 823, 11, 291, 17088, 257, 7207, 11, 51105], "temperature": 0.0, "avg_logprob": -0.1252289573744972, "compression_ratio": 1.737991266375546, "no_speech_prob": 2.289575647129727e-12}, {"id": 272, "seek": 208352, "start": 2098.32, "end": 2104.08, "text": " that thread corresponds to this connection that is not yet established. And then you go on to do other", "tokens": [51105, 300, 7207, 23249, 281, 341, 4984, 300, 307, 406, 1939, 7545, 13, 400, 550, 291, 352, 322, 281, 360, 661, 51393], "temperature": 0.0, "avg_logprob": -0.1252289573744972, "compression_ratio": 1.737991266375546, "no_speech_prob": 2.289575647129727e-12}, {"id": 273, "seek": 208352, "start": 2104.08, "end": 2112.08, "text": " things, right? Like receiving more connection requests, okay? Makes sense. As soon as you spawn a", "tokens": [51393, 721, 11, 558, 30, 1743, 10040, 544, 4984, 12475, 11, 1392, 30, 25245, 2020, 13, 1018, 2321, 382, 291, 17088, 257, 51793], "temperature": 0.0, "avg_logprob": -0.1252289573744972, "compression_ratio": 1.737991266375546, "no_speech_prob": 2.289575647129727e-12}, {"id": 274, "seek": 211208, "start": 2112.08, "end": 2117.92, "text": " thread reply, the server replies with its, as the protocol dictates with sin s, which is the server", "tokens": [50365, 7207, 16972, 11, 264, 7154, 42289, 365, 1080, 11, 382, 264, 10336, 12569, 1024, 365, 3343, 262, 11, 597, 307, 264, 7154, 50657], "temperature": 0.0, "avg_logprob": -0.17619302100741985, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.0218768066043724e-12}, {"id": 275, "seek": 211208, "start": 2117.92, "end": 2124.96, "text": " sin, and the act saying, hey, here's client, here's your act. I acknowledge having received your connection", "tokens": [50657, 3343, 11, 293, 264, 605, 1566, 11, 4177, 11, 510, 311, 6423, 11, 510, 311, 428, 605, 13, 286, 10692, 1419, 4613, 428, 4984, 51009], "temperature": 0.0, "avg_logprob": -0.17619302100741985, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.0218768066043724e-12}, {"id": 276, "seek": 211208, "start": 2124.96, "end": 2133.2, "text": " request. The client is then supposed to reply with act to the server act s. And at this point,", "tokens": [51009, 5308, 13, 440, 6423, 307, 550, 3442, 281, 16972, 365, 605, 281, 264, 7154, 605, 262, 13, 400, 412, 341, 935, 11, 51421], "temperature": 0.0, "avg_logprob": -0.17619302100741985, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.0218768066043724e-12}, {"id": 277, "seek": 211208, "start": 2134.3199999999997, "end": 2141.04, "text": " the connection is established, okay? Remember with the firewall lecture, we had this like one example", "tokens": [51477, 264, 4984, 307, 7545, 11, 1392, 30, 5459, 365, 264, 36109, 7991, 11, 321, 632, 341, 411, 472, 1365, 51813], "temperature": 0.0, "avg_logprob": -0.17619302100741985, "compression_ratio": 1.7046413502109705, "no_speech_prob": 2.0218768066043724e-12}, {"id": 278, "seek": 214104, "start": 2141.04, "end": 2147.44, "text": " where there was a table and it's a connection like established. So it wasn't in the being", "tokens": [50365, 689, 456, 390, 257, 3199, 293, 309, 311, 257, 4984, 411, 7545, 13, 407, 309, 2067, 380, 294, 264, 885, 50685], "temperature": 0.0, "avg_logprob": -0.1648714293294878, "compression_ratio": 1.68125, "no_speech_prob": 2.615785843138041e-12}, {"id": 279, "seek": 214104, "start": 2147.44, "end": 2152.56, "text": " established, it's already established, right? So at this point, connection is established on both hands.", "tokens": [50685, 7545, 11, 309, 311, 1217, 7545, 11, 558, 30, 407, 412, 341, 935, 11, 4984, 307, 7545, 322, 1293, 2377, 13, 50941], "temperature": 0.0, "avg_logprob": -0.1648714293294878, "compression_ratio": 1.68125, "no_speech_prob": 2.615785843138041e-12}, {"id": 280, "seek": 214104, "start": 2153.6, "end": 2157.04, "text": " That's the normal way of doing things. That's how it's supposed to happen.", "tokens": [50993, 663, 311, 264, 2710, 636, 295, 884, 721, 13, 663, 311, 577, 309, 311, 3442, 281, 1051, 13, 51165], "temperature": 0.0, "avg_logprob": -0.1648714293294878, "compression_ratio": 1.68125, "no_speech_prob": 2.615785843138041e-12}, {"id": 281, "seek": 215704, "start": 2157.04, "end": 2168.16, "text": " Now here's a sin-flying attack. The adversary doesn't have to play by the rules, right? That's why it's the", "tokens": [50365, 823, 510, 311, 257, 3343, 12, 69, 7310, 2690, 13, 440, 48222, 1177, 380, 362, 281, 862, 538, 264, 4474, 11, 558, 30, 663, 311, 983, 309, 311, 264, 50921], "temperature": 0.0, "avg_logprob": -0.2029723882675171, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.2300327777040616e-12}, {"id": 282, "seek": 215704, "start": 2168.16, "end": 2178.32, "text": " adversary. The adversary generates in quick succession, or almost simultaneous, a large number of sin packets.", "tokens": [50921, 48222, 13, 440, 48222, 23815, 294, 1702, 36624, 11, 420, 1920, 46218, 11, 257, 2416, 1230, 295, 3343, 30364, 13, 51429], "temperature": 0.0, "avg_logprob": -0.2029723882675171, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.2300327777040616e-12}, {"id": 283, "seek": 215704, "start": 2178.32, "end": 2184.88, "text": " This is the opening salvo, right? The first packet in the TCP connection is a sin from the client.", "tokens": [51429, 639, 307, 264, 5193, 1845, 3080, 11, 558, 30, 440, 700, 20300, 294, 264, 48965, 4984, 307, 257, 3343, 490, 264, 6423, 13, 51757], "temperature": 0.0, "avg_logprob": -0.2029723882675171, "compression_ratio": 1.561576354679803, "no_speech_prob": 3.2300327777040616e-12}, {"id": 284, "seek": 218488, "start": 2184.88, "end": 2191.52, "text": " The second packet. Bam, bam, bam, bam, bam, bam. For every stupid sin, the server says,", "tokens": [50365, 440, 1150, 20300, 13, 26630, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 13, 1171, 633, 6631, 3343, 11, 264, 7154, 1619, 11, 50697], "temperature": 0.0, "avg_logprob": -0.25198684771036367, "compression_ratio": 1.5635593220338984, "no_speech_prob": 2.0283514451380213e-12}, {"id": 285, "seek": 218488, "start": 2192.1600000000003, "end": 2198.6400000000003, "text": " how nice, let me open a, let me spawn a thread, dedicate some buffer space or table space.", "tokens": [50729, 577, 1481, 11, 718, 385, 1269, 257, 11, 718, 385, 17088, 257, 7207, 11, 30718, 512, 21762, 1901, 420, 3199, 1901, 13, 51053], "temperature": 0.0, "avg_logprob": -0.25198684771036367, "compression_ratio": 1.5635593220338984, "no_speech_prob": 2.0283514451380213e-12}, {"id": 286, "seek": 218488, "start": 2199.84, "end": 2205.84, "text": " Do you see what's happening? This grows faster than a mushroom under the brain, right?", "tokens": [51113, 1144, 291, 536, 437, 311, 2737, 30, 639, 13156, 4663, 813, 257, 12094, 833, 264, 3567, 11, 558, 30, 51413], "temperature": 0.0, "avg_logprob": -0.25198684771036367, "compression_ratio": 1.5635593220338984, "no_speech_prob": 2.0283514451380213e-12}, {"id": 287, "seek": 218488, "start": 2206.56, "end": 2212.7200000000003, "text": " It expands immediately, like the consumption. Many threads get created, right, at almost the same time.", "tokens": [51449, 467, 33706, 4258, 11, 411, 264, 12126, 13, 5126, 19314, 483, 2942, 11, 558, 11, 412, 1920, 264, 912, 565, 13, 51757], "temperature": 0.0, "avg_logprob": -0.25198684771036367, "compression_ratio": 1.5635593220338984, "no_speech_prob": 2.0283514451380213e-12}, {"id": 288, "seek": 221272, "start": 2213.4399999999996, "end": 2222.3999999999996, "text": " The server chokes. Runs out of space. No more space. No more TCP connection. Including no more legitimate", "tokens": [50401, 440, 7154, 417, 8606, 13, 8950, 82, 484, 295, 1901, 13, 883, 544, 1901, 13, 883, 544, 48965, 4984, 13, 27137, 572, 544, 17956, 50849], "temperature": 0.0, "avg_logprob": -0.17573917234266126, "compression_ratio": 1.760233918128655, "no_speech_prob": 1.5918505662931848e-12}, {"id": 289, "seek": 221272, "start": 2222.3999999999996, "end": 2228.72, "text": " TCP connection. Do you see the point? It's not that necessarily, maybe the, maybe the adversary's", "tokens": [50849, 48965, 4984, 13, 1144, 291, 536, 264, 935, 30, 467, 311, 406, 300, 4725, 11, 1310, 264, 11, 1310, 264, 48222, 311, 51165], "temperature": 0.0, "avg_logprob": -0.17573917234266126, "compression_ratio": 1.760233918128655, "no_speech_prob": 1.5918505662931848e-12}, {"id": 290, "seek": 221272, "start": 2228.72, "end": 2233.68, "text": " goal is to just bring down the server. Or maybe the adversary's goal is to prevent legitimate TCP", "tokens": [51165, 3387, 307, 281, 445, 1565, 760, 264, 7154, 13, 1610, 1310, 264, 48222, 311, 3387, 307, 281, 4871, 17956, 48965, 51413], "temperature": 0.0, "avg_logprob": -0.17573917234266126, "compression_ratio": 1.760233918128655, "no_speech_prob": 1.5918505662931848e-12}, {"id": 291, "seek": 223368, "start": 2233.68, "end": 2242.48, "text": " connection. Same effect. Top problem.", "tokens": [50365, 4984, 13, 10635, 1802, 13, 8840, 1154, 13, 50805], "temperature": 0.0, "avg_logprob": -0.2679019504123264, "compression_ratio": 1.2410714285714286, "no_speech_prob": 2.1466962322330696e-12}, {"id": 292, "seek": 223368, "start": 2246.56, "end": 2252.96, "text": " So, it costs nothing for the attacker to do this. Also, my silly example on the previous slide showed", "tokens": [51009, 407, 11, 309, 5497, 1825, 337, 264, 35871, 281, 360, 341, 13, 2743, 11, 452, 11774, 1365, 322, 264, 3894, 4137, 4712, 51329], "temperature": 0.0, "avg_logprob": -0.2679019504123264, "compression_ratio": 1.2410714285714286, "no_speech_prob": 2.1466962322330696e-12}, {"id": 293, "seek": 225296, "start": 2252.96, "end": 2259.04, "text": " one little red devil. One attacker, right? I'll let it fool you. It could be one attacker that controls", "tokens": [50365, 472, 707, 2182, 13297, 13, 1485, 35871, 11, 558, 30, 286, 603, 718, 309, 7979, 291, 13, 467, 727, 312, 472, 35871, 300, 9003, 50669], "temperature": 0.0, "avg_logprob": -0.14336600303649902, "compression_ratio": 1.3958333333333333, "no_speech_prob": 3.2745297359054737e-12}, {"id": 294, "seek": 225296, "start": 2259.04, "end": 2266.4, "text": " multiple zombies around the internet. Right? A botnet. Every member of that botnet could generate", "tokens": [50669, 3866, 24230, 926, 264, 4705, 13, 1779, 30, 316, 10592, 7129, 13, 2048, 4006, 295, 300, 10592, 7129, 727, 8460, 51037], "temperature": 0.0, "avg_logprob": -0.14336600303649902, "compression_ratio": 1.3958333333333333, "no_speech_prob": 3.2745297359054737e-12}, {"id": 295, "seek": 226640, "start": 2266.96, "end": 2278.2400000000002, "text": " that kind of a sin storm. Get the idea? The combination. One zombie, eh. A million zombies? The server is dead.", "tokens": [50393, 300, 733, 295, 257, 3343, 7679, 13, 3240, 264, 1558, 30, 440, 6562, 13, 1485, 20310, 11, 7670, 13, 316, 2459, 24230, 30, 440, 7154, 307, 3116, 13, 50957], "temperature": 0.0, "avg_logprob": -0.25595855712890625, "compression_ratio": 1.15625, "no_speech_prob": 3.744046739306839e-12}, {"id": 296, "seek": 227824, "start": 2278.24, "end": 2285.9199999999996, "text": " It's dead. Plus, traffic gets congested, right? So, especially nice thing about controlling a zombie botnet", "tokens": [50365, 467, 311, 3116, 13, 7721, 11, 6419, 2170, 31871, 292, 11, 558, 30, 407, 11, 2318, 1481, 551, 466, 14905, 257, 20310, 10592, 7129, 50749], "temperature": 0.0, "avg_logprob": -0.28330370959113627, "compression_ratio": 1.361842105263158, "no_speech_prob": 4.1628549565797535e-12}, {"id": 297, "seek": 227824, "start": 2285.9199999999996, "end": 2292.9599999999996, "text": " is that zombies, ideally, are distributed well. Zombies everywhere in the world, they control them.", "tokens": [50749, 307, 300, 24230, 11, 22915, 11, 366, 12631, 731, 13, 33945, 530, 5315, 294, 264, 1002, 11, 436, 1969, 552, 13, 51101], "temperature": 0.0, "avg_logprob": -0.28330370959113627, "compression_ratio": 1.361842105263158, "no_speech_prob": 4.1628549565797535e-12}, {"id": 298, "seek": 229296, "start": 2292.96, "end": 2299.04, "text": " On command from the command and control center, they start generating these sins to the victim.", "tokens": [50365, 1282, 5622, 490, 264, 5622, 293, 1969, 3056, 11, 436, 722, 17746, 613, 13815, 281, 264, 6760, 13, 50669], "temperature": 0.0, "avg_logprob": -0.11862934629122417, "compression_ratio": 1.576470588235294, "no_speech_prob": 8.367629505956486e-12}, {"id": 299, "seek": 229296, "start": 2300.4, "end": 2306.64, "text": " What happens is a funnel effect. Because the zombies are distributed at the source near them, nothing bad", "tokens": [50737, 708, 2314, 307, 257, 24515, 1802, 13, 1436, 264, 24230, 366, 12631, 412, 264, 4009, 2651, 552, 11, 1825, 1578, 51049], "temperature": 0.0, "avg_logprob": -0.11862934629122417, "compression_ratio": 1.576470588235294, "no_speech_prob": 8.367629505956486e-12}, {"id": 300, "seek": 229296, "start": 2306.64, "end": 2313.92, "text": " happens. But as they get closer to the victim, right, the funnel takes place. The traffic gets more", "tokens": [51049, 2314, 13, 583, 382, 436, 483, 4966, 281, 264, 6760, 11, 558, 11, 264, 24515, 2516, 1081, 13, 440, 6419, 2170, 544, 51413], "temperature": 0.0, "avg_logprob": -0.11862934629122417, "compression_ratio": 1.576470588235294, "no_speech_prob": 8.367629505956486e-12}, {"id": 301, "seek": 229296, "start": 2314.48, "end": 2321.12, "text": " concentrated. Higher volume, yes? You see that? Like, think about the victim's ISP. All of a sudden,", "tokens": [51441, 21321, 13, 31997, 5523, 11, 2086, 30, 509, 536, 300, 30, 1743, 11, 519, 466, 264, 6760, 311, 6205, 47, 13, 1057, 295, 257, 3990, 11, 51773], "temperature": 0.0, "avg_logprob": -0.11862934629122417, "compression_ratio": 1.576470588235294, "no_speech_prob": 8.367629505956486e-12}, {"id": 302, "seek": 232112, "start": 2321.12, "end": 2325.2799999999997, "text": " the victim's ISP is going to get more concentrated. So, not only the victim is going to get screwed, but", "tokens": [50365, 264, 6760, 311, 6205, 47, 307, 516, 281, 483, 544, 21321, 13, 407, 11, 406, 787, 264, 6760, 307, 516, 281, 483, 20331, 11, 457, 50573], "temperature": 0.0, "avg_logprob": -0.16069412231445312, "compression_ratio": 1.6631578947368422, "no_speech_prob": 2.5651538185234024e-12}, {"id": 303, "seek": 232112, "start": 2326.88, "end": 2333.12, "text": " nodes next to you, IS. The ISP IS is going to get congested. So, it's going to affect more than just the victim.", "tokens": [50653, 13891, 958, 281, 291, 11, 6205, 13, 440, 6205, 47, 6205, 307, 516, 281, 483, 31871, 292, 13, 407, 11, 309, 311, 516, 281, 3345, 544, 813, 445, 264, 6760, 13, 50965], "temperature": 0.0, "avg_logprob": -0.16069412231445312, "compression_ratio": 1.6631578947368422, "no_speech_prob": 2.5651538185234024e-12}, {"id": 304, "seek": 232112, "start": 2335.12, "end": 2344.72, "text": " Okay. So, you can read this, right? The point of this attack is a classical example of a symmetry.", "tokens": [51065, 1033, 13, 407, 11, 291, 393, 1401, 341, 11, 558, 30, 440, 935, 295, 341, 2690, 307, 257, 13735, 1365, 295, 257, 25440, 13, 51545], "temperature": 0.0, "avg_logprob": -0.16069412231445312, "compression_ratio": 1.6631578947368422, "no_speech_prob": 2.5651538185234024e-12}, {"id": 305, "seek": 234472, "start": 2344.72, "end": 2348.0, "text": " Why a symmetry?", "tokens": [50365, 1545, 257, 25440, 30, 50529], "temperature": 0.0, "avg_logprob": -0.18901188429011856, "compression_ratio": 1.5935828877005347, "no_speech_prob": 5.073066966509998e-12}, {"id": 306, "seek": 234472, "start": 2348.9599999999996, "end": 2356.7999999999997, "text": " Very clear, no? It costs nothing to generate a sin. It costs nothing to generate a thousand sins.", "tokens": [50577, 4372, 1850, 11, 572, 30, 467, 5497, 1825, 281, 8460, 257, 3343, 13, 467, 5497, 1825, 281, 8460, 257, 4714, 13815, 13, 50969], "temperature": 0.0, "avg_logprob": -0.18901188429011856, "compression_ratio": 1.5935828877005347, "no_speech_prob": 5.073066966509998e-12}, {"id": 307, "seek": 234472, "start": 2357.8399999999997, "end": 2365.04, "text": " For a client. But for a server, there's an investment. It's asymmetric. It has to create", "tokens": [51021, 1171, 257, 6423, 13, 583, 337, 257, 7154, 11, 456, 311, 364, 6078, 13, 467, 311, 37277, 17475, 13, 467, 575, 281, 1884, 51381], "temperature": 0.0, "avg_logprob": -0.18901188429011856, "compression_ratio": 1.5935828877005347, "no_speech_prob": 5.073066966509998e-12}, {"id": 308, "seek": 234472, "start": 2365.7599999999998, "end": 2371.12, "text": " state, right? Allocate memory. Spawn a thread. Even you say, oh, why didn't you spawn a thread?", "tokens": [51417, 1785, 11, 558, 30, 1057, 42869, 4675, 13, 1738, 11251, 257, 7207, 13, 2754, 291, 584, 11, 1954, 11, 983, 994, 380, 291, 17088, 257, 7207, 30, 51685], "temperature": 0.0, "avg_logprob": -0.18901188429011856, "compression_ratio": 1.5935828877005347, "no_speech_prob": 5.073066966509998e-12}, {"id": 309, "seek": 237112, "start": 2371.12, "end": 2375.44, "text": " There are other paradigms you could use. Yeah, yeah, yeah, yeah. Sure. Spawning a thread is not", "tokens": [50365, 821, 366, 661, 13480, 328, 2592, 291, 727, 764, 13, 865, 11, 1338, 11, 1338, 11, 1338, 13, 4894, 13, 1738, 35880, 257, 7207, 307, 406, 50581], "temperature": 0.0, "avg_logprob": -0.14132018041129063, "compression_ratio": 1.6594827586206897, "no_speech_prob": 2.746390571559121e-12}, {"id": 310, "seek": 237112, "start": 2375.44, "end": 2380.08, "text": " required. But even if we weren't spawning a thread and using a different paradigm,", "tokens": [50581, 4739, 13, 583, 754, 498, 321, 4999, 380, 637, 35880, 257, 7207, 293, 1228, 257, 819, 24709, 11, 50813], "temperature": 0.0, "avg_logprob": -0.14132018041129063, "compression_ratio": 1.6594827586206897, "no_speech_prob": 2.746390571559121e-12}, {"id": 311, "seek": 237112, "start": 2380.96, "end": 2387.04, "text": " we'd still have to allocate space. We'd still have to have a new connection. Something to remember about", "tokens": [50857, 321, 1116, 920, 362, 281, 35713, 1901, 13, 492, 1116, 920, 362, 281, 362, 257, 777, 4984, 13, 6595, 281, 1604, 466, 51161], "temperature": 0.0, "avg_logprob": -0.14132018041129063, "compression_ratio": 1.6594827586206897, "no_speech_prob": 2.746390571559121e-12}, {"id": 312, "seek": 237112, "start": 2387.04, "end": 2395.44, "text": " this, you know, not yet established connection, yeah? That's the asymmetry. Have you seen examples of", "tokens": [51161, 341, 11, 291, 458, 11, 406, 1939, 7545, 4984, 11, 1338, 30, 663, 311, 264, 37277, 9889, 13, 3560, 291, 1612, 5110, 295, 51581], "temperature": 0.0, "avg_logprob": -0.14132018041129063, "compression_ratio": 1.6594827586206897, "no_speech_prob": 2.746390571559121e-12}, {"id": 313, "seek": 239544, "start": 2395.44, "end": 2403.12, "text": " this before? Anybody? Asymmetry. In attacks.", "tokens": [50365, 341, 949, 30, 19082, 30, 1018, 32497, 9889, 13, 682, 8122, 13, 50749], "temperature": 0.0, "avg_logprob": -0.12553795646218693, "compression_ratio": 1.3258426966292134, "no_speech_prob": 5.25661545541789e-12}, {"id": 314, "seek": 239544, "start": 2407.52, "end": 2414.8, "text": " Hell, most of you were born just probably after 9-11. 9-11, that horrific attack at the World", "tokens": [50969, 12090, 11, 881, 295, 291, 645, 4232, 445, 1391, 934, 1722, 12, 5348, 13, 1722, 12, 5348, 11, 300, 29248, 2690, 412, 264, 3937, 51333], "temperature": 0.0, "avg_logprob": -0.12553795646218693, "compression_ratio": 1.3258426966292134, "no_speech_prob": 5.25661545541789e-12}, {"id": 315, "seek": 239544, "start": 2414.8, "end": 2422.8, "text": " Trade Center was an example of asymmetry. Over 3,000 people died, two skyscrapers were destroyed,", "tokens": [51333, 23923, 5169, 390, 364, 1365, 295, 37277, 9889, 13, 4886, 805, 11, 1360, 561, 4539, 11, 732, 48227, 66, 4007, 433, 645, 8937, 11, 51733], "temperature": 0.0, "avg_logprob": -0.12553795646218693, "compression_ratio": 1.3258426966292134, "no_speech_prob": 5.25661545541789e-12}, {"id": 316, "seek": 242280, "start": 2422.8, "end": 2429.28, "text": " a plane full of hijackers and innocent passengers flew into the building. That's an asymmetric attack.", "tokens": [50365, 257, 5720, 1577, 295, 10625, 501, 433, 293, 13171, 18436, 15728, 666, 264, 2390, 13, 663, 311, 364, 37277, 17475, 2690, 13, 50689], "temperature": 0.0, "avg_logprob": -0.17263369811208626, "compression_ratio": 1.4720812182741116, "no_speech_prob": 4.382470948638417e-12}, {"id": 317, "seek": 242280, "start": 2431.44, "end": 2437.76, "text": " A guerrilla, terrorist, freedom fighter, call it whatever, with an RPG taking down a helicopter", "tokens": [50797, 316, 14486, 81, 5291, 11, 20342, 11, 5645, 15932, 11, 818, 309, 2035, 11, 365, 364, 22614, 1940, 760, 257, 19803, 51113], "temperature": 0.0, "avg_logprob": -0.17263369811208626, "compression_ratio": 1.4720812182741116, "no_speech_prob": 4.382470948638417e-12}, {"id": 318, "seek": 242280, "start": 2439.04, "end": 2447.52, "text": " is an asymmetric attack. 9-11, it costs very little. You can probably buy an RPG, you know,", "tokens": [51177, 307, 364, 37277, 17475, 2690, 13, 1722, 12, 5348, 11, 309, 5497, 588, 707, 13, 509, 393, 1391, 2256, 364, 22614, 11, 291, 458, 11, 51601], "temperature": 0.0, "avg_logprob": -0.17263369811208626, "compression_ratio": 1.4720812182741116, "no_speech_prob": 4.382470948638417e-12}, {"id": 319, "seek": 244752, "start": 2447.52, "end": 2455.2, "text": " across the border for a thousand dollars. Cheaper if you buy in bulk. A helicopter costs a gazillion", "tokens": [50365, 2108, 264, 7838, 337, 257, 4714, 3808, 13, 3351, 2332, 498, 291, 2256, 294, 16139, 13, 316, 19803, 5497, 257, 26232, 11836, 50749], "temperature": 0.0, "avg_logprob": -0.16114283196720075, "compression_ratio": 1.4736842105263157, "no_speech_prob": 4.7025720990856446e-12}, {"id": 320, "seek": 244752, "start": 2455.2, "end": 2462.96, "text": " dollars. 100, 140 million dollars. You bring down a helicopter with an RPG, that's a symmetric attack.", "tokens": [50749, 3808, 13, 2319, 11, 21548, 2459, 3808, 13, 509, 1565, 760, 257, 19803, 365, 364, 22614, 11, 300, 311, 257, 32330, 2690, 13, 51137], "temperature": 0.0, "avg_logprob": -0.16114283196720075, "compression_ratio": 1.4736842105263157, "no_speech_prob": 4.7025720990856446e-12}, {"id": 321, "seek": 244752, "start": 2463.92, "end": 2471.84, "text": " Okay? Sorry to make this automatic. You get the idea. Asymmetry. It's unfortunate, but that's how it is.", "tokens": [51185, 1033, 30, 4919, 281, 652, 341, 12509, 13, 509, 483, 264, 1558, 13, 1018, 32497, 9889, 13, 467, 311, 17843, 11, 457, 300, 311, 577, 309, 307, 13, 51581], "temperature": 0.0, "avg_logprob": -0.16114283196720075, "compression_ratio": 1.4736842105263157, "no_speech_prob": 4.7025720990856446e-12}, {"id": 322, "seek": 247184, "start": 2471.84, "end": 2478.56, "text": " Now, what can we do about it? With a helicopter? Plants flying into buildings. I'm sorry, but there's not much we can do.", "tokens": [50365, 823, 11, 437, 393, 321, 360, 466, 309, 30, 2022, 257, 19803, 30, 2149, 1719, 7137, 666, 7446, 13, 286, 478, 2597, 11, 457, 456, 311, 406, 709, 321, 393, 360, 13, 50701], "temperature": 0.0, "avg_logprob": -0.20287939372815583, "compression_ratio": 1.5213675213675213, "no_speech_prob": 3.550302413168893e-12}, {"id": 323, "seek": 247184, "start": 2481.2000000000003, "end": 2482.48, "text": " But here we could do something.", "tokens": [50833, 583, 510, 321, 727, 360, 746, 13, 50897], "temperature": 0.0, "avg_logprob": -0.20287939372815583, "compression_ratio": 1.5213675213675213, "no_speech_prob": 3.550302413168893e-12}, {"id": 324, "seek": 247184, "start": 2488.08, "end": 2493.1200000000003, "text": " First, we examine the problem. What creates it? This sort of state allocation, asymmetric.", "tokens": [51177, 2386, 11, 321, 17496, 264, 1154, 13, 708, 7829, 309, 30, 639, 1333, 295, 1785, 27599, 11, 37277, 17475, 13, 51429], "temperature": 0.0, "avg_logprob": -0.20287939372815583, "compression_ratio": 1.5213675213675213, "no_speech_prob": 3.550302413168893e-12}, {"id": 325, "seek": 247184, "start": 2493.1200000000003, "end": 2499.04, "text": " Guys, the client is not dedicating anything, right? The client, a benign client in TCP, is supposed to allocate", "tokens": [51429, 7855, 11, 264, 6423, 307, 406, 4172, 30541, 1340, 11, 558, 30, 440, 6423, 11, 257, 3271, 788, 6423, 294, 48965, 11, 307, 3442, 281, 35713, 51725], "temperature": 0.0, "avg_logprob": -0.20287939372815583, "compression_ratio": 1.5213675213675213, "no_speech_prob": 3.550302413168893e-12}, {"id": 326, "seek": 249904, "start": 2499.04, "end": 2506.48, "text": " state before sending the SIM. He says, hey, I'm going to open a connection, right? So it creates a", "tokens": [50365, 1785, 949, 7750, 264, 24738, 13, 634, 1619, 11, 4177, 11, 286, 478, 516, 281, 1269, 257, 4984, 11, 558, 30, 407, 309, 7829, 257, 50737], "temperature": 0.0, "avg_logprob": -0.1804554732804446, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.654084200678919e-12}, {"id": 327, "seek": 249904, "start": 2506.48, "end": 2510.48, "text": " state space, and it's, you know, a table. It doesn't necessarily spawn a thread. It could.", "tokens": [50737, 1785, 1901, 11, 293, 309, 311, 11, 291, 458, 11, 257, 3199, 13, 467, 1177, 380, 4725, 17088, 257, 7207, 13, 467, 727, 13, 50937], "temperature": 0.0, "avg_logprob": -0.1804554732804446, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.654084200678919e-12}, {"id": 328, "seek": 249904, "start": 2512.56, "end": 2517.36, "text": " So it creates space, allocates memory, whatever, and then sends the sensee.", "tokens": [51041, 407, 309, 7829, 1901, 11, 12660, 1024, 4675, 11, 2035, 11, 293, 550, 14790, 264, 2020, 68, 13, 51281], "temperature": 0.0, "avg_logprob": -0.1804554732804446, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.654084200678919e-12}, {"id": 329, "seek": 249904, "start": 2518.88, "end": 2522.96, "text": " But an adversary doesn't have to play with the rules. It doesn't need to allocate anything.", "tokens": [51357, 583, 364, 48222, 1177, 380, 362, 281, 862, 365, 264, 4474, 13, 467, 1177, 380, 643, 281, 35713, 1340, 13, 51561], "temperature": 0.0, "avg_logprob": -0.1804554732804446, "compression_ratio": 1.6227272727272728, "no_speech_prob": 2.654084200678919e-12}, {"id": 330, "seek": 252296, "start": 2522.96, "end": 2531.28, "text": " It just can generate sensees at infinity. So he's not losing anything. Just sending packets.", "tokens": [50365, 467, 445, 393, 8460, 2020, 279, 412, 13202, 13, 407, 415, 311, 406, 7027, 1340, 13, 1449, 7750, 30364, 13, 50781], "temperature": 0.0, "avg_logprob": -0.1593383738869115, "compression_ratio": 1.4772727272727273, "no_speech_prob": 1.5241530910634071e-12}, {"id": 331, "seek": 252296, "start": 2532.8, "end": 2539.04, "text": " Now, one solution is cookies. And you think, oh, it's going to use web. No, no, it's not web,", "tokens": [50857, 823, 11, 472, 3827, 307, 13670, 13, 400, 291, 519, 11, 1954, 11, 309, 311, 516, 281, 764, 3670, 13, 883, 11, 572, 11, 309, 311, 406, 3670, 11, 51169], "temperature": 0.0, "avg_logprob": -0.1593383738869115, "compression_ratio": 1.4772727272727273, "no_speech_prob": 1.5241530910634071e-12}, {"id": 332, "seek": 252296, "start": 2539.04, "end": 2545.6, "text": " but it's similar to the web cookies. Okay? And the idea is, if instead of", "tokens": [51169, 457, 309, 311, 2531, 281, 264, 3670, 13670, 13, 1033, 30, 400, 264, 1558, 307, 11, 498, 2602, 295, 51497], "temperature": 0.0, "avg_logprob": -0.1593383738869115, "compression_ratio": 1.4772727272727273, "no_speech_prob": 1.5241530910634071e-12}, {"id": 333, "seek": 254560, "start": 2545.6, "end": 2553.7599999999998, "text": " state allocation on the server side, will it receive that SIM from the client, if the server could", "tokens": [50365, 1785, 27599, 322, 264, 7154, 1252, 11, 486, 309, 4774, 300, 24738, 490, 264, 6423, 11, 498, 264, 7154, 727, 50773], "temperature": 0.0, "avg_logprob": -0.2073751003184217, "compression_ratio": 1.4265734265734267, "no_speech_prob": 2.761386171806768e-12}, {"id": 334, "seek": 254560, "start": 2553.7599999999998, "end": 2563.8399999999997, "text": " somehow avoid creating state, then maybe it would solve this problem. And that's what this solution does.", "tokens": [50773, 6063, 5042, 4084, 1785, 11, 550, 1310, 309, 576, 5039, 341, 1154, 13, 400, 300, 311, 437, 341, 3827, 775, 13, 51277], "temperature": 0.0, "avg_logprob": -0.2073751003184217, "compression_ratio": 1.4265734265734267, "no_speech_prob": 2.761386171806768e-12}, {"id": 335, "seek": 256384, "start": 2563.84, "end": 2578.48, "text": " So here's a cute little solution. This is from about 15 years ago. It is, in fact, deployed. It is", "tokens": [50365, 407, 510, 311, 257, 4052, 707, 3827, 13, 639, 307, 490, 466, 2119, 924, 2057, 13, 467, 307, 11, 294, 1186, 11, 17826, 13, 467, 307, 51097], "temperature": 0.0, "avg_logprob": -0.23180564244588217, "compression_ratio": 1.2838709677419355, "no_speech_prob": 3.1148759786769897e-12}, {"id": 336, "seek": 256384, "start": 2578.48, "end": 2585.44, "text": " compatible with TCP. So you wouldn't know if it's deployed on a particular server, right? Unless you", "tokens": [51097, 18218, 365, 48965, 13, 407, 291, 2759, 380, 458, 498, 309, 311, 17826, 322, 257, 1729, 7154, 11, 558, 30, 16581, 291, 51445], "temperature": 0.0, "avg_logprob": -0.23180564244588217, "compression_ratio": 1.2838709677419355, "no_speech_prob": 3.1148759786769897e-12}, {"id": 337, "seek": 258544, "start": 2585.44, "end": 2595.76, "text": " actually snoop on traffic. Okay? So the client starts with a sensee, right? Just like it does. We don't", "tokens": [50365, 767, 43287, 404, 322, 6419, 13, 1033, 30, 407, 264, 6423, 3719, 365, 257, 2020, 68, 11, 558, 30, 1449, 411, 309, 775, 13, 492, 500, 380, 50881], "temperature": 0.0, "avg_logprob": -0.2064711180600253, "compression_ratio": 1.5265700483091786, "no_speech_prob": 2.0228335066013736e-12}, {"id": 338, "seek": 258544, "start": 2595.76, "end": 2604.08, "text": " know if this client is good, bad, or ugly. Just a client. The server receives that sin. And remember,", "tokens": [50881, 458, 498, 341, 6423, 307, 665, 11, 1578, 11, 420, 12246, 13, 1449, 257, 6423, 13, 440, 7154, 20717, 300, 3343, 13, 400, 1604, 11, 51297], "temperature": 0.0, "avg_logprob": -0.2064711180600253, "compression_ratio": 1.5265700483091786, "no_speech_prob": 2.0228335066013736e-12}, {"id": 339, "seek": 258544, "start": 2604.08, "end": 2609.76, "text": " TCP server is over listening, right? That's why it's called the server. It's listening. So it gets the sensee,", "tokens": [51297, 48965, 7154, 307, 670, 4764, 11, 558, 30, 663, 311, 983, 309, 311, 1219, 264, 7154, 13, 467, 311, 4764, 13, 407, 309, 2170, 264, 2020, 68, 11, 51581], "temperature": 0.0, "avg_logprob": -0.2064711180600253, "compression_ratio": 1.5265700483091786, "no_speech_prob": 2.0228335066013736e-12}, {"id": 340, "seek": 260976, "start": 2609.76, "end": 2617.1200000000003, "text": " but that does not spawn a thread, does not create any state. That's the cool part. What it does,", "tokens": [50365, 457, 300, 775, 406, 17088, 257, 7207, 11, 775, 406, 1884, 604, 1785, 13, 663, 311, 264, 1627, 644, 13, 708, 309, 775, 11, 50733], "temperature": 0.0, "avg_logprob": -0.15869597899608123, "compression_ratio": 1.6089385474860336, "no_speech_prob": 2.1394036715804976e-12}, {"id": 341, "seek": 260976, "start": 2617.1200000000003, "end": 2621.92, "text": " it replies with a sin as an axi, which is that second packet, the way it's supposed to,", "tokens": [50733, 309, 42289, 365, 257, 3343, 382, 364, 6360, 72, 11, 597, 307, 300, 1150, 20300, 11, 264, 636, 309, 311, 3442, 281, 11, 50973], "temperature": 0.0, "avg_logprob": -0.15869597899608123, "compression_ratio": 1.6089385474860336, "no_speech_prob": 2.1394036715804976e-12}, {"id": 342, "seek": 260976, "start": 2621.92, "end": 2633.2000000000003, "text": " but it abuses or repurposes one of the field, which is a sequence number. Now the sequence number there", "tokens": [50973, 457, 309, 47681, 420, 1085, 20130, 4201, 472, 295, 264, 2519, 11, 597, 307, 257, 8310, 1230, 13, 823, 264, 8310, 1230, 456, 51537], "temperature": 0.0, "avg_logprob": -0.15869597899608123, "compression_ratio": 1.6089385474860336, "no_speech_prob": 2.1394036715804976e-12}, {"id": 343, "seek": 263320, "start": 2633.2, "end": 2642.3999999999996, "text": " in the reply, okay, is like, you get 16 bits, right? I think it's 16 bits. So what it does is,", "tokens": [50365, 294, 264, 16972, 11, 1392, 11, 307, 411, 11, 291, 483, 3165, 9239, 11, 558, 30, 286, 519, 309, 311, 3165, 9239, 13, 407, 437, 309, 775, 307, 11, 50825], "temperature": 0.0, "avg_logprob": -0.1537343893158302, "compression_ratio": 1.482233502538071, "no_speech_prob": 2.0799590348674624e-12}, {"id": 344, "seek": 263320, "start": 2642.3999999999996, "end": 2648.64, "text": " no, 32 bits, excuse me. And instead of leaving it be, to be whatever, zero, zero, right? Because", "tokens": [50825, 572, 11, 8858, 9239, 11, 8960, 385, 13, 400, 2602, 295, 5012, 309, 312, 11, 281, 312, 2035, 11, 4018, 11, 4018, 11, 558, 30, 1436, 51137], "temperature": 0.0, "avg_logprob": -0.1537343893158302, "compression_ratio": 1.482233502538071, "no_speech_prob": 2.0799590348674624e-12}, {"id": 345, "seek": 263320, "start": 2648.64, "end": 2656.16, "text": " at that point, no data has been, you know, sent back and forth. No real data, right? No application.", "tokens": [51137, 412, 300, 935, 11, 572, 1412, 575, 668, 11, 291, 458, 11, 2279, 646, 293, 5220, 13, 883, 957, 1412, 11, 558, 30, 883, 3861, 13, 51513], "temperature": 0.0, "avg_logprob": -0.1537343893158302, "compression_ratio": 1.482233502538071, "no_speech_prob": 2.0799590348674624e-12}, {"id": 346, "seek": 265616, "start": 2656.16, "end": 2663.3599999999997, "text": " It puts a certain value, and that value is a function. You see the function f of source address,", "tokens": [50365, 467, 8137, 257, 1629, 2158, 11, 293, 300, 2158, 307, 257, 2445, 13, 509, 536, 264, 2445, 283, 295, 4009, 2985, 11, 50725], "temperature": 0.0, "avg_logprob": -0.11889666318893433, "compression_ratio": 1.72, "no_speech_prob": 1.7864085861615808e-12}, {"id": 347, "seek": 265616, "start": 2664.16, "end": 2670.16, "text": " destination, sorry, source port, destination address, destination port, course time,", "tokens": [50765, 12236, 11, 2597, 11, 4009, 2436, 11, 12236, 2985, 11, 12236, 2436, 11, 1164, 565, 11, 51065], "temperature": 0.0, "avg_logprob": -0.11889666318893433, "compression_ratio": 1.72, "no_speech_prob": 1.7864085861615808e-12}, {"id": 348, "seek": 265616, "start": 2670.96, "end": 2677.44, "text": " that's server's own time, right? Maybe rounded, not exactly like nanosecond precision, but let's say", "tokens": [51105, 300, 311, 7154, 311, 1065, 565, 11, 558, 30, 2704, 23382, 11, 406, 2293, 411, 14067, 541, 18882, 18356, 11, 457, 718, 311, 584, 51429], "temperature": 0.0, "avg_logprob": -0.11889666318893433, "compression_ratio": 1.72, "no_speech_prob": 1.7864085861615808e-12}, {"id": 349, "seek": 265616, "start": 2677.44, "end": 2683.92, "text": " rounded to the nearest, I don't know, 10 milliseconds or something like that. That's server's own clock.", "tokens": [51429, 23382, 281, 264, 23831, 11, 286, 500, 380, 458, 11, 1266, 34184, 420, 746, 411, 300, 13, 663, 311, 7154, 311, 1065, 7830, 13, 51753], "temperature": 0.0, "avg_logprob": -0.11889666318893433, "compression_ratio": 1.72, "no_speech_prob": 1.7864085861615808e-12}, {"id": 350, "seek": 268392, "start": 2683.92, "end": 2693.36, "text": " And most importantly, server's secret, the key. A key that only server knows, so it's not shared with anyone.", "tokens": [50365, 400, 881, 8906, 11, 7154, 311, 4054, 11, 264, 2141, 13, 316, 2141, 300, 787, 7154, 3255, 11, 370, 309, 311, 406, 5507, 365, 2878, 13, 50837], "temperature": 0.0, "avg_logprob": -0.19502432529742902, "compression_ratio": 1.3401360544217686, "no_speech_prob": 2.4104288443710375e-12}, {"id": 351, "seek": 268392, "start": 2695.28, "end": 2703.6, "text": " Okay, so it computes this 32-bit quantity and stuffs it into the sequence number field.", "tokens": [50933, 1033, 11, 370, 309, 715, 1819, 341, 8858, 12, 5260, 11275, 293, 48719, 309, 666, 264, 8310, 1230, 2519, 13, 51349], "temperature": 0.0, "avg_logprob": -0.19502432529742902, "compression_ratio": 1.3401360544217686, "no_speech_prob": 2.4104288443710375e-12}, {"id": 352, "seek": 270360, "start": 2703.6, "end": 2714.96, "text": " The client receives the SNS-ACC packet and actually doesn't do anything. It's supposed to echo the sequence", "tokens": [50365, 440, 6423, 20717, 264, 13955, 50, 12, 4378, 34, 20300, 293, 767, 1177, 380, 360, 1340, 13, 467, 311, 3442, 281, 14300, 264, 8310, 50933], "temperature": 0.0, "avg_logprob": -0.2426684617996216, "compression_ratio": 1.6020408163265305, "no_speech_prob": 2.4610788667417394e-12}, {"id": 353, "seek": 270360, "start": 2714.96, "end": 2721.2, "text": " number back. That's according to the rules. It's supposed to echo that sequence. That's TCP rules. So the", "tokens": [50933, 1230, 646, 13, 663, 311, 4650, 281, 264, 4474, 13, 467, 311, 3442, 281, 14300, 300, 8310, 13, 663, 311, 48965, 4474, 13, 407, 264, 51245], "temperature": 0.0, "avg_logprob": -0.2426684617996216, "compression_ratio": 1.6020408163265305, "no_speech_prob": 2.4610788667417394e-12}, {"id": 354, "seek": 270360, "start": 2721.2, "end": 2729.44, "text": " client does not know what's going on. He is not aware of any of this defense. So he just beautifully", "tokens": [51245, 6423, 775, 406, 458, 437, 311, 516, 322, 13, 634, 307, 406, 3650, 295, 604, 295, 341, 7654, 13, 407, 415, 445, 16525, 51657], "temperature": 0.0, "avg_logprob": -0.2426684617996216, "compression_ratio": 1.6020408163265305, "no_speech_prob": 2.4610788667417394e-12}, {"id": 355, "seek": 272944, "start": 2729.44, "end": 2736.32, "text": " generates S for, you know, and includes the cookie, which he copies from the, is supposed to, as supposed", "tokens": [50365, 23815, 318, 337, 11, 291, 458, 11, 293, 5974, 264, 14417, 11, 597, 415, 14341, 490, 264, 11, 307, 3442, 281, 11, 382, 3442, 50709], "temperature": 0.0, "avg_logprob": -0.21113231514073624, "compression_ratio": 1.583756345177665, "no_speech_prob": 2.3719355472795467e-12}, {"id": 356, "seek": 272944, "start": 2736.32, "end": 2746.32, "text": " to from the sequence number. Aha! So now the server says, okay, I am going to recompute the cookie.", "tokens": [50709, 281, 490, 264, 8310, 1230, 13, 27448, 0, 407, 586, 264, 7154, 1619, 11, 1392, 11, 286, 669, 516, 281, 48000, 1169, 264, 14417, 13, 51209], "temperature": 0.0, "avg_logprob": -0.21113231514073624, "compression_ratio": 1.583756345177665, "no_speech_prob": 2.3719355472795467e-12}, {"id": 357, "seek": 272944, "start": 2747.04, "end": 2753.52, "text": " Why? Because you see, where does this source address, source port, destination, position report come from?", "tokens": [51245, 1545, 30, 1436, 291, 536, 11, 689, 775, 341, 4009, 2985, 11, 4009, 2436, 11, 12236, 11, 2535, 2275, 808, 490, 30, 51569], "temperature": 0.0, "avg_logprob": -0.21113231514073624, "compression_ratio": 1.583756345177665, "no_speech_prob": 2.3719355472795467e-12}, {"id": 358, "seek": 275352, "start": 2753.52, "end": 2762.4, "text": " They come from the IP packet. That is that first one, right? The SIN-C. Make sense?", "tokens": [50365, 814, 808, 490, 264, 8671, 20300, 13, 663, 307, 300, 700, 472, 11, 558, 30, 440, 318, 1464, 12, 34, 13, 4387, 2020, 30, 50809], "temperature": 0.0, "avg_logprob": -0.18684637705485027, "compression_ratio": 1.6055555555555556, "no_speech_prob": 2.3417916911183667e-12}, {"id": 359, "seek": 275352, "start": 2764.32, "end": 2771.36, "text": " So that magenta field, right? It captures the source address, destination address of the original packet", "tokens": [50905, 407, 300, 2258, 8938, 2519, 11, 558, 30, 467, 27986, 264, 4009, 2985, 11, 12236, 2985, 295, 264, 3380, 20300, 51257], "temperature": 0.0, "avg_logprob": -0.18684637705485027, "compression_ratio": 1.6055555555555556, "no_speech_prob": 2.3417916911183667e-12}, {"id": 360, "seek": 275352, "start": 2771.92, "end": 2779.52, "text": " that opened the connection, the ones to open the connection. Now this S is also an IP packet, right?", "tokens": [51285, 300, 5625, 264, 4984, 11, 264, 2306, 281, 1269, 264, 4984, 13, 823, 341, 318, 307, 611, 364, 8671, 20300, 11, 558, 30, 51665], "temperature": 0.0, "avg_logprob": -0.18684637705485027, "compression_ratio": 1.6055555555555556, "no_speech_prob": 2.3417916911183667e-12}, {"id": 361, "seek": 277952, "start": 2779.52, "end": 2786.88, "text": " To the TCP, et cetera, et cetera. But the IP header, if it's an honest client, will contain the same IP", "tokens": [50365, 1407, 264, 48965, 11, 1030, 11458, 11, 1030, 11458, 13, 583, 264, 8671, 23117, 11, 498, 309, 311, 364, 3245, 6423, 11, 486, 5304, 264, 912, 8671, 50733], "temperature": 0.0, "avg_logprob": -0.1545476046475497, "compression_ratio": 1.606060606060606, "no_speech_prob": 3.1265907831506956e-12}, {"id": 362, "seek": 277952, "start": 2786.88, "end": 2791.7599999999998, "text": " source and the same IP destination and port numbers as it did in the original packet, yes?", "tokens": [50733, 4009, 293, 264, 912, 8671, 12236, 293, 2436, 3547, 382, 309, 630, 294, 264, 3380, 20300, 11, 2086, 30, 50977], "temperature": 0.0, "avg_logprob": -0.1545476046475497, "compression_ratio": 1.606060606060606, "no_speech_prob": 3.1265907831506956e-12}, {"id": 363, "seek": 277952, "start": 2793.6, "end": 2794.88, "text": " If the client is honest.", "tokens": [51069, 759, 264, 6423, 307, 3245, 13, 51133], "temperature": 0.0, "avg_logprob": -0.1545476046475497, "compression_ratio": 1.606060606060606, "no_speech_prob": 3.1265907831506956e-12}, {"id": 364, "seek": 277952, "start": 2797.84, "end": 2805.52, "text": " So what the server does is says, ah, extracts the cookie and says, well, let me get the IP source,", "tokens": [51281, 407, 437, 264, 7154, 775, 307, 1619, 11, 3716, 11, 8947, 82, 264, 14417, 293, 1619, 11, 731, 11, 718, 385, 483, 264, 8671, 4009, 11, 51665], "temperature": 0.0, "avg_logprob": -0.1545476046475497, "compression_ratio": 1.606060606060606, "no_speech_prob": 3.1265907831506956e-12}, {"id": 365, "seek": 280552, "start": 2805.52, "end": 2811.2, "text": " IP destination, the port numbers from this packet. I know my own secret.", "tokens": [50365, 8671, 12236, 11, 264, 2436, 3547, 490, 341, 20300, 13, 286, 458, 452, 1065, 4054, 13, 50649], "temperature": 0.0, "avg_logprob": -0.12453089690789944, "compression_ratio": 1.641025641025641, "no_speech_prob": 2.8297182305681012e-12}, {"id": 366, "seek": 280552, "start": 2812.96, "end": 2818.64, "text": " I know the course time, right? Because the time, not much time has passed, right?", "tokens": [50737, 286, 458, 264, 1164, 565, 11, 558, 30, 1436, 264, 565, 11, 406, 709, 565, 575, 4678, 11, 558, 30, 51021], "temperature": 0.0, "avg_logprob": -0.12453089690789944, "compression_ratio": 1.641025641025641, "no_speech_prob": 2.8297182305681012e-12}, {"id": 367, "seek": 280552, "start": 2820.96, "end": 2825.2, "text": " So it just recomputes the cookie and compares it to the one received in this packet.", "tokens": [51137, 407, 309, 445, 48000, 1819, 264, 14417, 293, 38334, 309, 281, 264, 472, 4613, 294, 341, 20300, 13, 51349], "temperature": 0.0, "avg_logprob": -0.12453089690789944, "compression_ratio": 1.641025641025641, "no_speech_prob": 2.8297182305681012e-12}, {"id": 368, "seek": 280552, "start": 2826.0, "end": 2831.2, "text": " If the cookie values match, then it says connection is open, it creates a state.", "tokens": [51389, 759, 264, 14417, 4190, 2995, 11, 550, 309, 1619, 4984, 307, 1269, 11, 309, 7829, 257, 1785, 13, 51649], "temperature": 0.0, "avg_logprob": -0.12453089690789944, "compression_ratio": 1.641025641025641, "no_speech_prob": 2.8297182305681012e-12}, {"id": 369, "seek": 283120, "start": 2831.2, "end": 2840.0, "text": " One second. If they don't match, throws it away. That's it. No big loss, right?", "tokens": [50365, 1485, 1150, 13, 759, 436, 500, 380, 2995, 11, 19251, 309, 1314, 13, 663, 311, 309, 13, 883, 955, 4470, 11, 558, 30, 50805], "temperature": 0.0, "avg_logprob": -0.20966997686422095, "compression_ratio": 1.2615384615384615, "no_speech_prob": 3.0038437015544872e-12}, {"id": 370, "seek": 283120, "start": 2840.8799999999997, "end": 2842.16, "text": " As if it has never happened.", "tokens": [50849, 1018, 498, 309, 575, 1128, 2011, 13, 50913], "temperature": 0.0, "avg_logprob": -0.20966997686422095, "compression_ratio": 1.2615384615384615, "no_speech_prob": 3.0038437015544872e-12}, {"id": 371, "seek": 283120, "start": 2847.4399999999996, "end": 2850.3999999999996, "text": " Ah, good question, right? Okay, I was waiting for that.", "tokens": [51177, 2438, 11, 665, 1168, 11, 558, 30, 1033, 11, 286, 390, 3806, 337, 300, 13, 51325], "temperature": 0.0, "avg_logprob": -0.20966997686422095, "compression_ratio": 1.2615384615384615, "no_speech_prob": 3.0038437015544872e-12}, {"id": 372, "seek": 285040, "start": 2850.4, "end": 2857.76, "text": " Why doesn't the attacker just play along? Tell me, why?", "tokens": [50365, 1545, 1177, 380, 264, 35871, 445, 862, 2051, 30, 5115, 385, 11, 983, 30, 50733], "temperature": 0.0, "avg_logprob": -0.3159509941383644, "compression_ratio": 1.4191176470588236, "no_speech_prob": 2.543279822853073e-12}, {"id": 373, "seek": 285040, "start": 2862.8, "end": 2864.88, "text": " Excellent exam question, but now it's gone.", "tokens": [50985, 16723, 1139, 1168, 11, 457, 586, 309, 311, 2780, 13, 51089], "temperature": 0.0, "avg_logprob": -0.3159509941383644, "compression_ratio": 1.4191176470588236, "no_speech_prob": 2.543279822853073e-12}, {"id": 374, "seek": 285040, "start": 2870.88, "end": 2876.1600000000003, "text": " Why doesn't the attacker do the same thing? He knows what the, he knows the cookies look off.", "tokens": [51389, 1545, 1177, 380, 264, 35871, 360, 264, 912, 551, 30, 634, 3255, 437, 264, 11, 415, 3255, 264, 13670, 574, 766, 13, 51653], "temperature": 0.0, "avg_logprob": -0.3159509941383644, "compression_ratio": 1.4191176470588236, "no_speech_prob": 2.543279822853073e-12}, {"id": 375, "seek": 287616, "start": 2876.16, "end": 2880.64, "text": " He can guess that the server is playing along, or he's playing this game. He can just do it.", "tokens": [50365, 634, 393, 2041, 300, 264, 7154, 307, 2433, 2051, 11, 420, 415, 311, 2433, 341, 1216, 13, 634, 393, 445, 360, 309, 13, 50589], "temperature": 0.0, "avg_logprob": -0.29212331771850586, "compression_ratio": 1.376923076923077, "no_speech_prob": 3.652119405506138e-12}, {"id": 376, "seek": 287616, "start": 2882.08, "end": 2883.52, "text": " Pretend that, otherwise, sure.", "tokens": [50661, 9739, 521, 300, 11, 5911, 11, 988, 13, 50733], "temperature": 0.0, "avg_logprob": -0.29212331771850586, "compression_ratio": 1.376923076923077, "no_speech_prob": 3.652119405506138e-12}, {"id": 377, "seek": 287616, "start": 2886.48, "end": 2888.3199999999997, "text": " Any ideas? Any ideas at all?", "tokens": [50881, 2639, 3487, 30, 2639, 3487, 412, 439, 30, 50973], "temperature": 0.0, "avg_logprob": -0.29212331771850586, "compression_ratio": 1.376923076923077, "no_speech_prob": 3.652119405506138e-12}, {"id": 378, "seek": 287616, "start": 2890.3999999999996, "end": 2891.68, "text": " Why does this help at all?", "tokens": [51077, 1545, 775, 341, 854, 412, 439, 30, 51141], "temperature": 0.0, "avg_logprob": -0.29212331771850586, "compression_ratio": 1.376923076923077, "no_speech_prob": 3.652119405506138e-12}, {"id": 379, "seek": 289168, "start": 2891.68, "end": 2906.24, "text": " It helps because, remember the original attack, machine gun, bam, bam, bam, bam, right?", "tokens": [50365, 467, 3665, 570, 11, 1604, 264, 3380, 2690, 11, 3479, 3874, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 11, 558, 30, 51093], "temperature": 0.0, "avg_logprob": -0.28135707460600756, "compression_ratio": 1.5461538461538462, "no_speech_prob": 1.9671306684260204e-12}, {"id": 380, "seek": 289168, "start": 2906.7999999999997, "end": 2909.2, "text": " One sin after another, bam, bam, bam, bam, bam.", "tokens": [51121, 1485, 3343, 934, 1071, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 11, 18132, 13, 51241], "temperature": 0.0, "avg_logprob": -0.28135707460600756, "compression_ratio": 1.5461538461538462, "no_speech_prob": 1.9671306684260204e-12}, {"id": 381, "seek": 289168, "start": 2910.7999999999997, "end": 2913.2799999999997, "text": " You can put different distance, source addresses in there, right?", "tokens": [51321, 509, 393, 829, 819, 4560, 11, 4009, 16862, 294, 456, 11, 558, 30, 51445], "temperature": 0.0, "avg_logprob": -0.28135707460600756, "compression_ratio": 1.5461538461538462, "no_speech_prob": 1.9671306684260204e-12}, {"id": 382, "seek": 291328, "start": 2913.28, "end": 2924.32, "text": " Yes? But now things have changed. The adversary before, let's for a second consider the adversary", "tokens": [50365, 1079, 30, 583, 586, 721, 362, 3105, 13, 440, 48222, 949, 11, 718, 311, 337, 257, 1150, 1949, 264, 48222, 50917], "temperature": 0.0, "avg_logprob": -0.2303973544727672, "compression_ratio": 1.5, "no_speech_prob": 2.5811030830019677e-12}, {"id": 383, "seek": 291328, "start": 2924.32, "end": 2930.96, "text": " with a single host coming from a single computer, single IP group. The adversary would generate", "tokens": [50917, 365, 257, 2167, 3975, 1348, 490, 257, 2167, 3820, 11, 2167, 8671, 1594, 13, 440, 48222, 576, 8460, 51249], "temperature": 0.0, "avg_logprob": -0.2303973544727672, "compression_ratio": 1.5, "no_speech_prob": 2.5811030830019677e-12}, {"id": 384, "seek": 291328, "start": 2930.96, "end": 2938.8, "text": " a large number of SIN requests, right? The initial packet, essentially machine gun the server,", "tokens": [51249, 257, 2416, 1230, 295, 318, 1464, 12475, 11, 558, 30, 440, 5883, 20300, 11, 4476, 3479, 3874, 264, 7154, 11, 51641], "temperature": 0.0, "avg_logprob": -0.2303973544727672, "compression_ratio": 1.5, "no_speech_prob": 2.5811030830019677e-12}, {"id": 385, "seek": 293880, "start": 2938.8, "end": 2948.0, "text": " starting, you know, strangling itself to death. But now, in order for the server to delegate any", "tokens": [50365, 2891, 11, 291, 458, 11, 24404, 1688, 2564, 281, 2966, 13, 583, 586, 11, 294, 1668, 337, 264, 7154, 281, 40999, 604, 50825], "temperature": 0.0, "avg_logprob": -0.23751804563734266, "compression_ratio": 1.3666666666666667, "no_speech_prob": 3.2376156876984252e-12}, {"id": 386, "seek": 293880, "start": 2948.0, "end": 2960.1600000000003, "text": " resources, the client has to be there to receive the SIN ACK, right? Otherwise, server hasn't done anything.", "tokens": [50825, 3593, 11, 264, 6423, 575, 281, 312, 456, 281, 4774, 264, 318, 1464, 8157, 42, 11, 558, 30, 10328, 11, 7154, 6132, 380, 1096, 1340, 13, 51433], "temperature": 0.0, "avg_logprob": -0.23751804563734266, "compression_ratio": 1.3666666666666667, "no_speech_prob": 3.2376156876984252e-12}, {"id": 387, "seek": 296016, "start": 2960.16, "end": 2968.8799999999997, "text": " You get it? You get it? So, if the client did not receive the SIN ACK, he cannot generate ACK S,", "tokens": [50365, 509, 483, 309, 30, 509, 483, 309, 30, 407, 11, 498, 264, 6423, 630, 406, 4774, 264, 318, 1464, 8157, 42, 11, 415, 2644, 8460, 8157, 42, 318, 11, 50801], "temperature": 0.0, "avg_logprob": -0.19495316474668442, "compression_ratio": 1.4592592592592593, "no_speech_prob": 3.2843020837669545e-12}, {"id": 388, "seek": 296016, "start": 2969.7599999999998, "end": 2976.64, "text": " because he doesn't know the cookie. He doesn't know the cookie.", "tokens": [50845, 570, 415, 1177, 380, 458, 264, 14417, 13, 634, 1177, 380, 458, 264, 14417, 13, 51189], "temperature": 0.0, "avg_logprob": -0.19495316474668442, "compression_ratio": 1.4592592592592593, "no_speech_prob": 3.2843020837669545e-12}, {"id": 389, "seek": 296016, "start": 2978.3999999999996, "end": 2981.68, "text": " One variation of this is to say, oh,", "tokens": [51277, 1485, 12990, 295, 341, 307, 281, 584, 11, 1954, 11, 51441], "temperature": 0.0, "avg_logprob": -0.19495316474668442, "compression_ratio": 1.4592592592592593, "no_speech_prob": 3.2843020837669545e-12}, {"id": 390, "seek": 298168, "start": 2981.68, "end": 2992.16, "text": " the server, forget the cookies, let's not use cookies, but let's change TCP on the server so", "tokens": [50365, 264, 7154, 11, 2870, 264, 13670, 11, 718, 311, 406, 764, 13670, 11, 457, 718, 311, 1319, 48965, 322, 264, 7154, 370, 50889], "temperature": 0.0, "avg_logprob": -0.16614712459940306, "compression_ratio": 1.5632183908045978, "no_speech_prob": 3.238146513082074e-12}, {"id": 391, "seek": 298168, "start": 2992.16, "end": 2996.56, "text": " that server only allocates space after he receives an ACK S for the client.", "tokens": [50889, 300, 7154, 787, 12660, 1024, 1901, 934, 415, 20717, 364, 8157, 42, 318, 337, 264, 6423, 13, 51109], "temperature": 0.0, "avg_logprob": -0.16614712459940306, "compression_ratio": 1.5632183908045978, "no_speech_prob": 3.238146513082074e-12}, {"id": 392, "seek": 298168, "start": 2998.72, "end": 3006.96, "text": " That's not a keyword. That's equally stupid as the original. You see why that is? Because if the server", "tokens": [51217, 663, 311, 406, 257, 20428, 13, 663, 311, 12309, 6631, 382, 264, 3380, 13, 509, 536, 983, 300, 307, 30, 1436, 498, 264, 7154, 51629], "temperature": 0.0, "avg_logprob": -0.16614712459940306, "compression_ratio": 1.5632183908045978, "no_speech_prob": 3.238146513082074e-12}, {"id": 393, "seek": 300696, "start": 3006.96, "end": 3013.68, "text": " only allocates state after he receives ACK S without the cookie, generating ACK S is easy for any client,", "tokens": [50365, 787, 12660, 1024, 1785, 934, 415, 20717, 8157, 42, 318, 1553, 264, 14417, 11, 17746, 8157, 42, 318, 307, 1858, 337, 604, 6423, 11, 50701], "temperature": 0.0, "avg_logprob": -0.15758958544049945, "compression_ratio": 1.582010582010582, "no_speech_prob": 3.034304144750033e-12}, {"id": 394, "seek": 300696, "start": 3015.84, "end": 3022.16, "text": " because it contains nothing secret. But the trick in this specific solution is that the cookie is", "tokens": [50809, 570, 309, 8306, 1825, 4054, 13, 583, 264, 4282, 294, 341, 2685, 3827, 307, 300, 264, 14417, 307, 51125], "temperature": 0.0, "avg_logprob": -0.15758958544049945, "compression_ratio": 1.582010582010582, "no_speech_prob": 3.034304144750033e-12}, {"id": 395, "seek": 300696, "start": 3022.16, "end": 3028.88, "text": " computed with a secret known to the server, and no one can create valid cookies but the server.", "tokens": [51125, 40610, 365, 257, 4054, 2570, 281, 264, 7154, 11, 293, 572, 472, 393, 1884, 7363, 13670, 457, 264, 7154, 13, 51461], "temperature": 0.0, "avg_logprob": -0.15758958544049945, "compression_ratio": 1.582010582010582, "no_speech_prob": 3.034304144750033e-12}, {"id": 396, "seek": 302888, "start": 3028.88, "end": 3041.84, "text": " Now, somebody can snoop on a cookie. You can copy a cookie. But a cookie is only valid for a little bit of time.", "tokens": [50365, 823, 11, 2618, 393, 43287, 404, 322, 257, 14417, 13, 509, 393, 5055, 257, 14417, 13, 583, 257, 14417, 307, 787, 7363, 337, 257, 707, 857, 295, 565, 13, 51013], "temperature": 0.0, "avg_logprob": -0.1871218915845527, "compression_ratio": 1.3975155279503106, "no_speech_prob": 3.868447229216088e-12}, {"id": 397, "seek": 302888, "start": 3043.04, "end": 3053.2000000000003, "text": " Okay? And if the source address doesn't match, cookie will be thrown away. So the whole idea is that it does not", "tokens": [51073, 1033, 30, 400, 498, 264, 4009, 2985, 1177, 380, 2995, 11, 14417, 486, 312, 11732, 1314, 13, 407, 264, 1379, 1558, 307, 300, 309, 775, 406, 51581], "temperature": 0.0, "avg_logprob": -0.1871218915845527, "compression_ratio": 1.3975155279503106, "no_speech_prob": 3.868447229216088e-12}, {"id": 398, "seek": 305320, "start": 3053.2, "end": 3062.64, "text": " prevent the attack complicate. It makes it much harder for the adversary, because the adversary has to", "tokens": [50365, 4871, 264, 2690, 1209, 8700, 13, 467, 1669, 309, 709, 6081, 337, 264, 48222, 11, 570, 264, 48222, 575, 281, 50837], "temperature": 0.0, "avg_logprob": -0.14150045977698433, "compression_ratio": 1.6578947368421053, "no_speech_prob": 2.4367200965325075e-12}, {"id": 399, "seek": 305320, "start": 3062.64, "end": 3069.3599999999997, "text": " essentially complete that three-way handshake with the server for every fake connection it tries to establish.", "tokens": [50837, 4476, 3566, 300, 1045, 12, 676, 2377, 34593, 365, 264, 7154, 337, 633, 7592, 4984, 309, 9898, 281, 8327, 13, 51173], "temperature": 0.0, "avg_logprob": -0.14150045977698433, "compression_ratio": 1.6578947368421053, "no_speech_prob": 2.4367200965325075e-12}, {"id": 400, "seek": 305320, "start": 3070.48, "end": 3076.16, "text": " So yes, the server will still create the state and maybe spawn a threat, but it will only do it here,", "tokens": [51229, 407, 2086, 11, 264, 7154, 486, 920, 1884, 264, 1785, 293, 1310, 17088, 257, 4734, 11, 457, 309, 486, 787, 360, 309, 510, 11, 51513], "temperature": 0.0, "avg_logprob": -0.14150045977698433, "compression_ratio": 1.6578947368421053, "no_speech_prob": 2.4367200965325075e-12}, {"id": 401, "seek": 307616, "start": 3076.16, "end": 3084.3999999999996, "text": " when this succeeds. Not there when it first receives the path, the original path. Questions?", "tokens": [50365, 562, 341, 49263, 13, 1726, 456, 562, 309, 700, 20717, 264, 3100, 11, 264, 3380, 3100, 13, 27738, 30, 50777], "temperature": 0.0, "avg_logprob": -0.3446090548646216, "compression_ratio": 1.3243243243243243, "no_speech_prob": 2.1278825056147976e-12}, {"id": 402, "seek": 307616, "start": 3093.2, "end": 3101.12, "text": " So, in reality, what is F? Because, okay, 32 bits is not really an encryption technique. So it's really", "tokens": [51217, 407, 11, 294, 4103, 11, 437, 307, 479, 30, 1436, 11, 1392, 11, 8858, 9239, 307, 406, 534, 364, 29575, 6532, 13, 407, 309, 311, 534, 51613], "temperature": 0.0, "avg_logprob": -0.3446090548646216, "compression_ratio": 1.3243243243243243, "no_speech_prob": 2.1278825056147976e-12}, {"id": 403, "seek": 310112, "start": 3101.12, "end": 3107.44, "text": " more like a hash function. Okay? Because you kind of like stuff encryption in there. It's a hash function.", "tokens": [50365, 544, 411, 257, 22019, 2445, 13, 1033, 30, 1436, 291, 733, 295, 411, 1507, 29575, 294, 456, 13, 467, 311, 257, 22019, 2445, 13, 50681], "temperature": 0.0, "avg_logprob": -0.22482614838675166, "compression_ratio": 1.4928909952606635, "no_speech_prob": 1.8995525638554334e-12}, {"id": 404, "seek": 310112, "start": 3107.44, "end": 3115.12, "text": " Like the one with cryptographic hash. Typically, it's an AES, like AES-based hash or truncated SHA.", "tokens": [50681, 1743, 264, 472, 365, 9844, 12295, 22019, 13, 23129, 11, 309, 311, 364, 316, 2358, 11, 411, 316, 2358, 12, 6032, 22019, 420, 504, 409, 66, 770, 38820, 13, 51065], "temperature": 0.0, "avg_logprob": -0.22482614838675166, "compression_ratio": 1.4928909952606635, "no_speech_prob": 1.8995525638554334e-12}, {"id": 405, "seek": 310112, "start": 3115.8399999999997, "end": 3124.96, "text": " Truncated means the server computes, recomputes the hash, which is like 128 bits, but only uses 32 of those.", "tokens": [51101, 1765, 409, 66, 770, 1355, 264, 7154, 715, 1819, 11, 48000, 1819, 264, 22019, 11, 597, 307, 411, 29810, 9239, 11, 457, 787, 4960, 8858, 295, 729, 13, 51557], "temperature": 0.0, "avg_logprob": -0.22482614838675166, "compression_ratio": 1.4928909952606635, "no_speech_prob": 1.8995525638554334e-12}, {"id": 406, "seek": 312496, "start": 3124.96, "end": 3133.84, "text": " So the unfortunate thing about this approach is that it is restricted to 32 bits, which means that", "tokens": [50365, 407, 264, 17843, 551, 466, 341, 3109, 307, 300, 309, 307, 20608, 281, 8858, 9239, 11, 597, 1355, 300, 50809], "temperature": 0.0, "avg_logprob": -0.19256524306077225, "compression_ratio": 1.5321637426900585, "no_speech_prob": 2.7931333461406194e-12}, {"id": 407, "seek": 312496, "start": 3133.84, "end": 3141.76, "text": " if somebody guesses a cookie, they can attack this technique. But guessing a cookie is probably", "tokens": [50809, 498, 2618, 42703, 257, 14417, 11, 436, 393, 2690, 341, 6532, 13, 583, 17939, 257, 14417, 307, 1391, 51205], "temperature": 0.0, "avg_logprob": -0.19256524306077225, "compression_ratio": 1.5321637426900585, "no_speech_prob": 2.7931333461406194e-12}, {"id": 408, "seek": 312496, "start": 3141.76, "end": 3145.36, "text": " the 1 over 2 to the 3 too. So it's not that easy to guess a cookie.", "tokens": [51205, 264, 502, 670, 568, 281, 264, 805, 886, 13, 407, 309, 311, 406, 300, 1858, 281, 2041, 257, 14417, 13, 51385], "temperature": 0.0, "avg_logprob": -0.19256524306077225, "compression_ratio": 1.5321637426900585, "no_speech_prob": 2.7931333461406194e-12}, {"id": 409, "seek": 314536, "start": 3145.36, "end": 3156.56, "text": " Right. All right, this is just a verbal description. There's that, just take a second to read through", "tokens": [50365, 1779, 13, 1057, 558, 11, 341, 307, 445, 257, 24781, 3855, 13, 821, 311, 300, 11, 445, 747, 257, 1150, 281, 1401, 807, 50925], "temperature": 0.0, "avg_logprob": -0.2776987692889045, "compression_ratio": 1.441860465116279, "no_speech_prob": 2.644134260501585e-12}, {"id": 410, "seek": 314536, "start": 3156.56, "end": 3158.7200000000003, "text": " this, but basically it's a word I already said.", "tokens": [50925, 341, 11, 457, 1936, 309, 311, 257, 1349, 286, 1217, 848, 13, 51033], "temperature": 0.0, "avg_logprob": -0.2776987692889045, "compression_ratio": 1.441860465116279, "no_speech_prob": 2.644134260501585e-12}, {"id": 411, "seek": 314536, "start": 3166.08, "end": 3171.92, "text": " Right, so this will be, one thing to know is, of course, the IP address of the source may still be", "tokens": [51401, 1779, 11, 370, 341, 486, 312, 11, 472, 551, 281, 458, 307, 11, 295, 1164, 11, 264, 8671, 2985, 295, 264, 4009, 815, 920, 312, 51693], "temperature": 0.0, "avg_logprob": -0.2776987692889045, "compression_ratio": 1.441860465116279, "no_speech_prob": 2.644134260501585e-12}, {"id": 412, "seek": 317192, "start": 3171.92, "end": 3178.16, "text": " both. But that's not really a service for money. The server doesn't really care about it.", "tokens": [50365, 1293, 13, 583, 300, 311, 406, 534, 257, 2643, 337, 1460, 13, 440, 7154, 1177, 380, 534, 1127, 466, 309, 13, 50677], "temperature": 0.0, "avg_logprob": -0.2703996785481771, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.312848046762128e-12}, {"id": 413, "seek": 317192, "start": 3183.92, "end": 3191.6, "text": " Okay, a completely different approach, which uses no secrets, and is just a little bit kind of over", "tokens": [50965, 1033, 11, 257, 2584, 819, 3109, 11, 597, 4960, 572, 14093, 11, 293, 307, 445, 257, 707, 857, 733, 295, 670, 51349], "temperature": 0.0, "avg_logprob": -0.2703996785481771, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.312848046762128e-12}, {"id": 414, "seek": 317192, "start": 3191.6, "end": 3198.08, "text": " the top, but works surprisingly well, it's called random deletion. And that is, it works like this.", "tokens": [51349, 264, 1192, 11, 457, 1985, 17600, 731, 11, 309, 311, 1219, 4974, 1103, 302, 313, 13, 400, 300, 307, 11, 309, 1985, 411, 341, 13, 51673], "temperature": 0.0, "avg_logprob": -0.2703996785481771, "compression_ratio": 1.4595959595959596, "no_speech_prob": 2.312848046762128e-12}, {"id": 415, "seek": 319808, "start": 3198.08, "end": 3203.6, "text": " It works like this. When a server gets these connection requests, the initial connection", "tokens": [50365, 467, 1985, 411, 341, 13, 1133, 257, 7154, 2170, 613, 4984, 12475, 11, 264, 5883, 4984, 50641], "temperature": 0.0, "avg_logprob": -0.2568310587029708, "compression_ratio": 1.669683257918552, "no_speech_prob": 2.0347937744469302e-12}, {"id": 416, "seek": 319808, "start": 3203.6, "end": 3210.64, "text": " requests to send C from the client, what it does, it creates an entry in this table. Right?", "tokens": [50641, 12475, 281, 2845, 383, 490, 264, 6423, 11, 437, 309, 775, 11, 309, 7829, 364, 8729, 294, 341, 3199, 13, 1779, 30, 50993], "temperature": 0.0, "avg_logprob": -0.2568310587029708, "compression_ratio": 1.669683257918552, "no_speech_prob": 2.0347937744469302e-12}, {"id": 417, "seek": 319808, "start": 3210.64, "end": 3215.36, "text": " Kind of like this, I have a half open means the connection is in progress. It's not, it's not", "tokens": [50993, 9242, 295, 411, 341, 11, 286, 362, 257, 1922, 1269, 1355, 264, 4984, 307, 294, 4205, 13, 467, 311, 406, 11, 309, 311, 406, 51229], "temperature": 0.0, "avg_logprob": -0.2568310587029708, "compression_ratio": 1.669683257918552, "no_speech_prob": 2.0347937744469302e-12}, {"id": 418, "seek": 319808, "start": 3215.36, "end": 3222.3199999999997, "text": " established yet. So that C results in a new entry in the table. I don't show the entire table,", "tokens": [51229, 7545, 1939, 13, 407, 300, 383, 3542, 294, 257, 777, 8729, 294, 264, 3199, 13, 286, 500, 380, 855, 264, 2302, 3199, 11, 51577], "temperature": 0.0, "avg_logprob": -0.2568310587029708, "compression_ratio": 1.669683257918552, "no_speech_prob": 2.0347937744469302e-12}, {"id": 419, "seek": 322232, "start": 3222.32, "end": 3228.0800000000004, "text": " I'm just showing that. This says, oh, I have a connection that is in the process of being open", "tokens": [50365, 286, 478, 445, 4099, 300, 13, 639, 1619, 11, 1954, 11, 286, 362, 257, 4984, 300, 307, 294, 264, 1399, 295, 885, 1269, 50653], "temperature": 0.0, "avg_logprob": -0.19432982915564428, "compression_ratio": 1.4818652849740932, "no_speech_prob": 1.8211738540829803e-12}, {"id": 420, "seek": 322232, "start": 3228.0800000000004, "end": 3235.92, "text": " with all of these four hosts, right? It's not established yet. And so this table has limitations,", "tokens": [50653, 365, 439, 295, 613, 1451, 21573, 11, 558, 30, 467, 311, 406, 7545, 1939, 13, 400, 370, 341, 3199, 575, 15705, 11, 51045], "temperature": 0.0, "avg_logprob": -0.19432982915564428, "compression_ratio": 1.4818652849740932, "no_speech_prob": 1.8211738540829803e-12}, {"id": 421, "seek": 322232, "start": 3235.92, "end": 3241.04, "text": " right? It's like maximum size of some sort, right? About 10,000, a million, right? Depends on", "tokens": [51045, 558, 30, 467, 311, 411, 6674, 2744, 295, 512, 1333, 11, 558, 30, 7769, 1266, 11, 1360, 11, 257, 2459, 11, 558, 30, 4056, 2581, 322, 51301], "temperature": 0.0, "avg_logprob": -0.19432982915564428, "compression_ratio": 1.4818652849740932, "no_speech_prob": 1.8211738540829803e-12}, {"id": 422, "seek": 324104, "start": 3241.04, "end": 3250.48, "text": " a lot. It's a web server, it could be many millions. But when it reaches its limit, right? What you do is", "tokens": [50365, 257, 688, 13, 467, 311, 257, 3670, 7154, 11, 309, 727, 312, 867, 6803, 13, 583, 562, 309, 14235, 1080, 4948, 11, 558, 30, 708, 291, 360, 307, 50837], "temperature": 0.0, "avg_logprob": -0.25938122446944073, "compression_ratio": 1.5422885572139304, "no_speech_prob": 1.4162543750598222e-12}, {"id": 423, "seek": 324104, "start": 3251.04, "end": 3260.56, "text": " you just delete random entries. Just pick the brand number and delete one. Okay? Next time it's full,", "tokens": [50865, 291, 445, 12097, 4974, 23041, 13, 1449, 1888, 264, 3360, 1230, 293, 12097, 472, 13, 1033, 30, 3087, 565, 309, 311, 1577, 11, 51341], "temperature": 0.0, "avg_logprob": -0.25938122446944073, "compression_ratio": 1.5422885572139304, "no_speech_prob": 1.4162543750598222e-12}, {"id": 424, "seek": 324104, "start": 3260.56, "end": 3265.92, "text": " delete one. Now when connections close, right? The entries get flushed anyway, right? Connections get,", "tokens": [51341, 12097, 472, 13, 823, 562, 9271, 1998, 11, 558, 30, 440, 23041, 483, 19568, 292, 4033, 11, 558, 30, 11653, 626, 483, 11, 51609], "temperature": 0.0, "avg_logprob": -0.25938122446944073, "compression_ratio": 1.5422885572139304, "no_speech_prob": 1.4162543750598222e-12}, {"id": 425, "seek": 326592, "start": 3265.92, "end": 3271.76, "text": " in TCP, I don't remember if I said that. There's an explicit connection teardown, right? Using RSD reset", "tokens": [50365, 294, 48965, 11, 286, 500, 380, 1604, 498, 286, 848, 300, 13, 821, 311, 364, 13691, 4984, 535, 515, 648, 11, 558, 30, 11142, 497, 23969, 14322, 50657], "temperature": 0.0, "avg_logprob": -0.1601496358071604, "compression_ratio": 1.7877697841726619, "no_speech_prob": 1.5548621418171038e-12}, {"id": 426, "seek": 326592, "start": 3271.76, "end": 3278.96, "text": " plan that terminates the connection. There's like a handshake there too. Or connection can be terminated", "tokens": [50657, 1393, 300, 10761, 1024, 264, 4984, 13, 821, 311, 411, 257, 2377, 34593, 456, 886, 13, 1610, 4984, 393, 312, 1433, 5410, 51017], "temperature": 0.0, "avg_logprob": -0.1601496358071604, "compression_ratio": 1.7877697841726619, "no_speech_prob": 1.5548621418171038e-12}, {"id": 427, "seek": 326592, "start": 3278.96, "end": 3284.64, "text": " due to timeouts. And whenever connection terminates, of course, the server will remove the entry, right?", "tokens": [51017, 3462, 281, 565, 7711, 13, 400, 5699, 4984, 10761, 1024, 11, 295, 1164, 11, 264, 7154, 486, 4159, 264, 8729, 11, 558, 30, 51301], "temperature": 0.0, "avg_logprob": -0.1601496358071604, "compression_ratio": 1.7877697841726619, "no_speech_prob": 1.5548621418171038e-12}, {"id": 428, "seek": 326592, "start": 3284.64, "end": 3290.56, "text": " Free the entry. So some entries will be terminated one way or another and some will be just randomly", "tokens": [51301, 11551, 264, 8729, 13, 407, 512, 23041, 486, 312, 1433, 5410, 472, 636, 420, 1071, 293, 512, 486, 312, 445, 16979, 51597], "temperature": 0.0, "avg_logprob": -0.1601496358071604, "compression_ratio": 1.7877697841726619, "no_speech_prob": 1.5548621418171038e-12}, {"id": 429, "seek": 326592, "start": 3290.56, "end": 3294.8, "text": " deleted. Now what does that do? That's bad for an honest connection. That is like", "tokens": [51597, 22981, 13, 823, 437, 775, 300, 360, 30, 663, 311, 1578, 337, 364, 3245, 4984, 13, 663, 307, 411, 51809], "temperature": 0.0, "avg_logprob": -0.1601496358071604, "compression_ratio": 1.7877697841726619, "no_speech_prob": 1.5548621418171038e-12}, {"id": 430, "seek": 329480, "start": 3295.44, "end": 3298.0, "text": " an honest host that is trying to establish a connection.", "tokens": [50397, 364, 3245, 3975, 300, 307, 1382, 281, 8327, 257, 4984, 13, 50525], "temperature": 0.0, "avg_logprob": -0.1500392076445789, "compression_ratio": 1.619718309859155, "no_speech_prob": 1.99691673787028e-12}, {"id": 431, "seek": 329480, "start": 3300.2400000000002, "end": 3305.6800000000003, "text": " But it's also bad for the fake connections, right? Because if you put it random, right,", "tokens": [50637, 583, 309, 311, 611, 1578, 337, 264, 7592, 9271, 11, 558, 30, 1436, 498, 291, 829, 309, 4974, 11, 558, 11, 50909], "temperature": 0.0, "avg_logprob": -0.1500392076445789, "compression_ratio": 1.619718309859155, "no_speech_prob": 1.99691673787028e-12}, {"id": 432, "seek": 329480, "start": 3306.7200000000003, "end": 3311.92, "text": " the entry to delete, you're penalizing everybody equal. So legitimate connections have a chance to", "tokens": [50961, 264, 8729, 281, 12097, 11, 291, 434, 13661, 3319, 2201, 2681, 13, 407, 17956, 9271, 362, 257, 2931, 281, 51221], "temperature": 0.0, "avg_logprob": -0.1500392076445789, "compression_ratio": 1.619718309859155, "no_speech_prob": 1.99691673787028e-12}, {"id": 433, "seek": 329480, "start": 3311.92, "end": 3318.32, "text": " complete and fake will be eventually deleted, right? Because they will timeout. Now the other thing I", "tokens": [51221, 3566, 293, 7592, 486, 312, 4728, 22981, 11, 558, 30, 1436, 436, 486, 565, 346, 13, 823, 264, 661, 551, 286, 51541], "temperature": 0.0, "avg_logprob": -0.1500392076445789, "compression_ratio": 1.619718309859155, "no_speech_prob": 1.99691673787028e-12}, {"id": 434, "seek": 331832, "start": 3318.32, "end": 3325.2000000000003, "text": " should have mentioned earlier is, of course, the server when it dedicates space, right, or creates a", "tokens": [50365, 820, 362, 2835, 3071, 307, 11, 295, 1164, 11, 264, 7154, 562, 309, 37071, 1024, 1901, 11, 558, 11, 420, 7829, 257, 50709], "temperature": 0.0, "avg_logprob": -0.15829386776440765, "compression_ratio": 1.6820809248554913, "no_speech_prob": 3.5652448875100884e-12}, {"id": 435, "seek": 331832, "start": 3325.2000000000003, "end": 3330.4, "text": " state that is for a connection that is not established, right, during the three-way handshake,", "tokens": [50709, 1785, 300, 307, 337, 257, 4984, 300, 307, 406, 7545, 11, 558, 11, 1830, 264, 1045, 12, 676, 2377, 34593, 11, 50969], "temperature": 0.0, "avg_logprob": -0.15829386776440765, "compression_ratio": 1.6820809248554913, "no_speech_prob": 3.5652448875100884e-12}, {"id": 436, "seek": 331832, "start": 3331.44, "end": 3338.1600000000003, "text": " if the three-way handshake does not complete, that connection will timeout. It will be deleted.", "tokens": [51021, 498, 264, 1045, 12, 676, 2377, 34593, 775, 406, 3566, 11, 300, 4984, 486, 565, 346, 13, 467, 486, 312, 22981, 13, 51357], "temperature": 0.0, "avg_logprob": -0.15829386776440765, "compression_ratio": 1.6820809248554913, "no_speech_prob": 3.5652448875100884e-12}, {"id": 437, "seek": 333816, "start": 3338.16, "end": 3344.7999999999997, "text": " Okay, so it's not like it spawns a thread, dedicates space, and it stays there forever. No, it gets flushed out,", "tokens": [50365, 1033, 11, 370, 309, 311, 406, 411, 309, 17088, 82, 257, 7207, 11, 37071, 1024, 1901, 11, 293, 309, 10834, 456, 5680, 13, 883, 11, 309, 2170, 19568, 292, 484, 11, 50697], "temperature": 0.0, "avg_logprob": -0.23514961313318322, "compression_ratio": 1.3691275167785235, "no_speech_prob": 2.472274555215259e-12}, {"id": 438, "seek": 333816, "start": 3344.7999999999997, "end": 3352.64, "text": " but not soon enough. That's why that original attack worked, because the industry generated", "tokens": [50697, 457, 406, 2321, 1547, 13, 663, 311, 983, 300, 3380, 2690, 2732, 11, 570, 264, 3518, 10833, 51089], "temperature": 0.0, "avg_logprob": -0.23514961313318322, "compression_ratio": 1.3691275167785235, "no_speech_prob": 2.472274555215259e-12}, {"id": 439, "seek": 335264, "start": 3352.64, "end": 3356.8799999999997, "text": " many, many, many, many connection requests at the same time, or almost the same time.", "tokens": [50365, 867, 11, 867, 11, 867, 11, 867, 4984, 12475, 412, 264, 912, 565, 11, 420, 1920, 264, 912, 565, 13, 50577], "temperature": 0.0, "avg_logprob": -0.18425270179649453, "compression_ratio": 1.7804878048780488, "no_speech_prob": 1.8315117217976296e-12}, {"id": 440, "seek": 335264, "start": 3361.8399999999997, "end": 3368.8799999999997, "text": " Right. Spoofing. So the other thing is, remember I said sequence number, port numbers, right? Sequence", "tokens": [50825, 1779, 13, 1738, 29496, 278, 13, 407, 264, 661, 551, 307, 11, 1604, 286, 848, 8310, 1230, 11, 2436, 3547, 11, 558, 30, 46859, 655, 51177], "temperature": 0.0, "avg_logprob": -0.18425270179649453, "compression_ratio": 1.7804878048780488, "no_speech_prob": 1.8315117217976296e-12}, {"id": 441, "seek": 335264, "start": 3368.8799999999997, "end": 3374.48, "text": " are like offset, right? When I say sequence number and offset, they're the same thing. And port number,", "tokens": [51177, 366, 411, 18687, 11, 558, 30, 1133, 286, 584, 8310, 1230, 293, 18687, 11, 436, 434, 264, 912, 551, 13, 400, 2436, 1230, 11, 51457], "temperature": 0.0, "avg_logprob": -0.18425270179649453, "compression_ratio": 1.7804878048780488, "no_speech_prob": 1.8315117217976296e-12}, {"id": 442, "seek": 337448, "start": 3374.48, "end": 3383.36, "text": " right? Every connection is associated with the port number. So there is nothing inherently secret in a TCP", "tokens": [50365, 558, 30, 2048, 4984, 307, 6615, 365, 264, 2436, 1230, 13, 407, 456, 307, 1825, 27993, 4054, 294, 257, 48965, 50809], "temperature": 0.0, "avg_logprob": -0.24262592527601454, "compression_ratio": 1.513157894736842, "no_speech_prob": 2.096816210245267e-12}, {"id": 443, "seek": 337448, "start": 3383.36, "end": 3393.76, "text": " connection state. Port numbers, especially for server ports, are easy to guess, right? You don't need to guess them, right?", "tokens": [50809, 4984, 1785, 13, 6733, 3547, 11, 2318, 337, 7154, 18160, 11, 366, 1858, 281, 2041, 11, 558, 30, 509, 500, 380, 643, 281, 2041, 552, 11, 558, 30, 51329], "temperature": 0.0, "avg_logprob": -0.24262592527601454, "compression_ratio": 1.513157894736842, "no_speech_prob": 2.096816210245267e-12}, {"id": 444, "seek": 339376, "start": 3393.76, "end": 3401.36, "text": " Okay. They're well, they are signed, right? HTTP, FTP, ICMP, whatever. They're telling that they all have", "tokens": [50365, 1033, 13, 814, 434, 731, 11, 436, 366, 8175, 11, 558, 30, 33283, 11, 479, 16804, 11, 14360, 12224, 11, 2035, 13, 814, 434, 3585, 300, 436, 439, 362, 50745], "temperature": 0.0, "avg_logprob": -0.2476712181454613, "compression_ratio": 1.5858585858585859, "no_speech_prob": 2.3629980350908797e-12}, {"id": 445, "seek": 339376, "start": 3403.36, "end": 3412.4, "text": " well-known port numbers. Sequence numbers are not like fixed, right? They change. Sequence numbers means", "tokens": [50845, 731, 12, 6861, 2436, 3547, 13, 46859, 655, 3547, 366, 406, 411, 6806, 11, 558, 30, 814, 1319, 13, 46859, 655, 3547, 1355, 51297], "temperature": 0.0, "avg_logprob": -0.2476712181454613, "compression_ratio": 1.5858585858585859, "no_speech_prob": 2.3629980350908797e-12}, {"id": 446, "seek": 339376, "start": 3412.4, "end": 3419.44, "text": " you start with zero, then you send 1500 bytes, then it becomes 1500, right? You send another 500 bytes,", "tokens": [51297, 291, 722, 365, 4018, 11, 550, 291, 2845, 22671, 36088, 11, 550, 309, 3643, 22671, 11, 558, 30, 509, 2845, 1071, 5923, 36088, 11, 51649], "temperature": 0.0, "avg_logprob": -0.2476712181454613, "compression_ratio": 1.5858585858585859, "no_speech_prob": 2.3629980350908797e-12}, {"id": 447, "seek": 341944, "start": 3419.44, "end": 3423.92, "text": " then it becomes 2000, right? So these are the sequence numbers. Number of bytes exchanged so far,", "tokens": [50365, 550, 309, 3643, 8132, 11, 558, 30, 407, 613, 366, 264, 8310, 3547, 13, 5118, 295, 36088, 38378, 370, 1400, 11, 50589], "temperature": 0.0, "avg_logprob": -0.1527706339389463, "compression_ratio": 1.6169154228855722, "no_speech_prob": 1.9521428744340152e-12}, {"id": 448, "seek": 341944, "start": 3423.92, "end": 3432.7200000000003, "text": " in one direction. Well, an adversary who is sitting along the path between a sender and a receiver,", "tokens": [50589, 294, 472, 3513, 13, 1042, 11, 364, 48222, 567, 307, 3798, 2051, 264, 3100, 1296, 257, 2845, 260, 293, 257, 20086, 11, 51029], "temperature": 0.0, "avg_logprob": -0.1527706339389463, "compression_ratio": 1.6169154228855722, "no_speech_prob": 1.9521428744340152e-12}, {"id": 449, "seek": 341944, "start": 3432.7200000000003, "end": 3439.28, "text": " right? As the adversary is here, between, might actually see the sequence numbers.", "tokens": [51029, 558, 30, 1018, 264, 48222, 307, 510, 11, 1296, 11, 1062, 767, 536, 264, 8310, 3547, 13, 51357], "temperature": 0.0, "avg_logprob": -0.1527706339389463, "compression_ratio": 1.6169154228855722, "no_speech_prob": 1.9521428744340152e-12}, {"id": 450, "seek": 341944, "start": 3441.2000000000003, "end": 3444.08, "text": " So that adversary can generate like a reset,", "tokens": [51453, 407, 300, 48222, 393, 8460, 411, 257, 14322, 11, 51597], "temperature": 0.0, "avg_logprob": -0.1527706339389463, "compression_ratio": 1.6169154228855722, "no_speech_prob": 1.9521428744340152e-12}, {"id": 451, "seek": 344408, "start": 3444.08, "end": 3449.92, "text": " and then close the connection, or inject packets into the connection, you see?", "tokens": [50365, 293, 550, 1998, 264, 4984, 11, 420, 10711, 30364, 666, 264, 4984, 11, 291, 536, 30, 50657], "temperature": 0.0, "avg_logprob": -0.1703974018926206, "compression_ratio": 1.8, "no_speech_prob": 2.403074050513765e-12}, {"id": 452, "seek": 344408, "start": 3452.3199999999997, "end": 3457.6, "text": " Pretending that, you know, that they're part of this connection. But the more interesting thing,", "tokens": [50777, 9739, 2029, 300, 11, 291, 458, 11, 300, 436, 434, 644, 295, 341, 4984, 13, 583, 264, 544, 1880, 551, 11, 51041], "temperature": 0.0, "avg_logprob": -0.1703974018926206, "compression_ratio": 1.8, "no_speech_prob": 2.403074050513765e-12}, {"id": 453, "seek": 344408, "start": 3457.6, "end": 3461.36, "text": " but that's, you could say, well, you know, you could protect against that, maybe this is", "tokens": [51041, 457, 300, 311, 11, 291, 727, 584, 11, 731, 11, 291, 458, 11, 291, 727, 2371, 1970, 300, 11, 1310, 341, 307, 51229], "temperature": 0.0, "avg_logprob": -0.1703974018926206, "compression_ratio": 1.8, "no_speech_prob": 2.403074050513765e-12}, {"id": 454, "seek": 344408, "start": 3461.36, "end": 3468.16, "text": " inside an organization or behind some kind of a firewall or whatever. But it doesn't have to be inside a", "tokens": [51229, 1854, 364, 4475, 420, 2261, 512, 733, 295, 257, 36109, 420, 2035, 13, 583, 309, 1177, 380, 362, 281, 312, 1854, 257, 51569], "temperature": 0.0, "avg_logprob": -0.1703974018926206, "compression_ratio": 1.8, "no_speech_prob": 2.403074050513765e-12}, {"id": 455, "seek": 344408, "start": 3468.16, "end": 3473.84, "text": " firewall organization. It's just that the adversary might be like here, far away, not on the path,", "tokens": [51569, 36109, 4475, 13, 467, 311, 445, 300, 264, 48222, 1062, 312, 411, 510, 11, 1400, 1314, 11, 406, 322, 264, 3100, 11, 51853], "temperature": 0.0, "avg_logprob": -0.1703974018926206, "compression_ratio": 1.8, "no_speech_prob": 2.403074050513765e-12}, {"id": 456, "seek": 347384, "start": 3473.84, "end": 3480.08, "text": " between the source and destination, right? Most cases, in the realistic cases, in the internet,", "tokens": [50365, 1296, 264, 4009, 293, 12236, 11, 558, 30, 4534, 3331, 11, 294, 264, 12465, 3331, 11, 294, 264, 4705, 11, 50677], "temperature": 0.0, "avg_logprob": -0.17631691060167679, "compression_ratio": 1.8248847926267282, "no_speech_prob": 1.9361222694525004e-12}, {"id": 457, "seek": 347384, "start": 3480.08, "end": 3486.4, "text": " right? The adversary isn't actively snooping up, or is actively interfering. He's not on the path", "tokens": [50677, 558, 30, 440, 48222, 1943, 380, 13022, 43287, 26125, 493, 11, 420, 307, 13022, 48721, 13, 634, 311, 406, 322, 264, 3100, 50993], "temperature": 0.0, "avg_logprob": -0.17631691060167679, "compression_ratio": 1.8248847926267282, "no_speech_prob": 1.9361222694525004e-12}, {"id": 458, "seek": 347384, "start": 3486.4, "end": 3491.44, "text": " between source and destination. The adversary is somewhere else in the basement of his grandma's home", "tokens": [50993, 1296, 4009, 293, 12236, 13, 440, 48222, 307, 4079, 1646, 294, 264, 16893, 295, 702, 15766, 311, 1280, 51245], "temperature": 0.0, "avg_logprob": -0.17631691060167679, "compression_ratio": 1.8248847926267282, "no_speech_prob": 1.9361222694525004e-12}, {"id": 459, "seek": 347384, "start": 3491.44, "end": 3499.36, "text": " in Slavonia, okay? So how is that adversary attack? Well, that's the interesting part. The adversary", "tokens": [51245, 294, 6187, 706, 16999, 11, 1392, 30, 407, 577, 307, 300, 48222, 2690, 30, 1042, 11, 300, 311, 264, 1880, 644, 13, 440, 48222, 51641], "temperature": 0.0, "avg_logprob": -0.17631691060167679, "compression_ratio": 1.8248847926267282, "no_speech_prob": 1.9361222694525004e-12}, {"id": 460, "seek": 349936, "start": 3499.36, "end": 3504.32, "text": " can actually guess, he knows the initial sequence number is always zero, right? I mean, it's a", "tokens": [50365, 393, 767, 2041, 11, 415, 3255, 264, 5883, 8310, 1230, 307, 1009, 4018, 11, 558, 30, 286, 914, 11, 309, 311, 257, 50613], "temperature": 0.0, "avg_logprob": -0.25130213419596353, "compression_ratio": 1.5260416666666667, "no_speech_prob": 1.9690119760357172e-12}, {"id": 461, "seek": 349936, "start": 3504.32, "end": 3511.76, "text": " typical connection, because it starts with zero bytes. And then he can guess, okay? You just guess.", "tokens": [50613, 7476, 4984, 11, 570, 309, 3719, 365, 4018, 36088, 13, 400, 550, 415, 393, 2041, 11, 1392, 30, 509, 445, 2041, 13, 50985], "temperature": 0.0, "avg_logprob": -0.25130213419596353, "compression_ratio": 1.5260416666666667, "no_speech_prob": 1.9690119760357172e-12}, {"id": 462, "seek": 349936, "start": 3512.96, "end": 3517.6800000000003, "text": " Well, you say, you know, guessing is hard, because remember I said the sequence number is 32 bits,", "tokens": [51045, 1042, 11, 291, 584, 11, 291, 458, 11, 17939, 307, 1152, 11, 570, 1604, 286, 848, 264, 8310, 1230, 307, 8858, 9239, 11, 51281], "temperature": 0.0, "avg_logprob": -0.25130213419596353, "compression_ratio": 1.5260416666666667, "no_speech_prob": 1.9690119760357172e-12}, {"id": 463, "seek": 351768, "start": 3517.68, "end": 3529.2799999999997, "text": " right? So guessing 232, not that easy. But remember window size? So if the DCP window size is zero,", "tokens": [50365, 558, 30, 407, 17939, 6673, 17, 11, 406, 300, 1858, 13, 583, 1604, 4910, 2744, 30, 407, 498, 264, 9114, 47, 4910, 2744, 307, 4018, 11, 50945], "temperature": 0.0, "avg_logprob": -0.2050202067305402, "compression_ratio": 1.5343137254901962, "no_speech_prob": 1.9851375317875286e-12}, {"id": 464, "seek": 351768, "start": 3529.2799999999997, "end": 3536.08, "text": " which means DCP is super strict, it wants to receive things exactly in order, this attack will not work.", "tokens": [50945, 597, 1355, 9114, 47, 307, 1687, 10910, 11, 309, 2738, 281, 4774, 721, 2293, 294, 1668, 11, 341, 2690, 486, 406, 589, 13, 51285], "temperature": 0.0, "avg_logprob": -0.2050202067305402, "compression_ratio": 1.5343137254901962, "no_speech_prob": 1.9851375317875286e-12}, {"id": 465, "seek": 351768, "start": 3536.08, "end": 3543.04, "text": " But in the real world, over the internet, right? We communicate DCP session over the internet. There's loss,", "tokens": [51285, 583, 294, 264, 957, 1002, 11, 670, 264, 4705, 11, 558, 30, 492, 7890, 9114, 47, 5481, 670, 264, 4705, 13, 821, 311, 4470, 11, 51633], "temperature": 0.0, "avg_logprob": -0.2050202067305402, "compression_ratio": 1.5343137254901962, "no_speech_prob": 1.9851375317875286e-12}, {"id": 466, "seek": 354304, "start": 3543.04, "end": 3550.72, "text": " packet loss, there's congestion, there's all the other factors that dictate for DCP to have a", "tokens": [50365, 20300, 4470, 11, 456, 311, 40816, 11, 456, 311, 439, 264, 661, 6771, 300, 36071, 337, 9114, 47, 281, 362, 257, 50749], "temperature": 0.0, "avg_logprob": -0.17831070856614548, "compression_ratio": 1.7407407407407407, "no_speech_prob": 2.8129983151853333e-12}, {"id": 467, "seek": 354304, "start": 3550.72, "end": 3557.68, "text": " flexible window size, the window size of the packets, or offsets it willing to receive, on the", "tokens": [50749, 11358, 4910, 2744, 11, 264, 4910, 2744, 295, 264, 30364, 11, 420, 39457, 1385, 309, 4950, 281, 4774, 11, 322, 264, 51097], "temperature": 0.0, "avg_logprob": -0.17831070856614548, "compression_ratio": 1.7407407407407407, "no_speech_prob": 2.8129983151853333e-12}, {"id": 468, "seek": 354304, "start": 3557.68, "end": 3564.64, "text": " recipient right there. Which means the adversary has a larger space to play with. As long as the", "tokens": [51097, 26216, 558, 456, 13, 3013, 1355, 264, 48222, 575, 257, 4833, 1901, 281, 862, 365, 13, 1018, 938, 382, 264, 51445], "temperature": 0.0, "avg_logprob": -0.17831070856614548, "compression_ratio": 1.7407407407407407, "no_speech_prob": 2.8129983151853333e-12}, {"id": 469, "seek": 354304, "start": 3564.64, "end": 3570.24, "text": " adversary generates packets with the offset within the window size, they will be accepted.", "tokens": [51445, 48222, 23815, 30364, 365, 264, 18687, 1951, 264, 4910, 2744, 11, 436, 486, 312, 9035, 13, 51725], "temperature": 0.0, "avg_logprob": -0.17831070856614548, "compression_ratio": 1.7407407407407407, "no_speech_prob": 2.8129983151853333e-12}, {"id": 470, "seek": 357024, "start": 3570.24, "end": 3582.0, "text": " It makes sense. So, that's what we have. And this is especially the case when you are like", "tokens": [50365, 467, 1669, 2020, 13, 407, 11, 300, 311, 437, 321, 362, 13, 400, 341, 307, 2318, 264, 1389, 562, 291, 366, 411, 50953], "temperature": 0.0, "avg_logprob": -0.21097826957702637, "compression_ratio": 1.4870466321243523, "no_speech_prob": 2.647430235105941e-12}, {"id": 471, "seek": 357024, "start": 3582.0, "end": 3589.2799999999997, "text": " communicating with, I say, with your portable devices, with like smartphones. And I see you're driving,", "tokens": [50953, 17559, 365, 11, 286, 584, 11, 365, 428, 21800, 5759, 11, 365, 411, 26782, 13, 400, 286, 536, 291, 434, 4840, 11, 51317], "temperature": 0.0, "avg_logprob": -0.21097826957702637, "compression_ratio": 1.4870466321243523, "no_speech_prob": 2.647430235105941e-12}, {"id": 472, "seek": 357024, "start": 3589.2799999999997, "end": 3593.9199999999996, "text": " walking around, you're somewhere where the connectivity is not very good, and you have a DCP", "tokens": [51317, 4494, 926, 11, 291, 434, 4079, 689, 264, 21095, 307, 406, 588, 665, 11, 293, 291, 362, 257, 9114, 47, 51549], "temperature": 0.0, "avg_logprob": -0.21097826957702637, "compression_ratio": 1.4870466321243523, "no_speech_prob": 2.647430235105941e-12}, {"id": 473, "seek": 359392, "start": 3593.92, "end": 3597.6800000000003, "text": " connection. And you're watching streaming video, you could be browsing the web, whatever.", "tokens": [50365, 4984, 13, 400, 291, 434, 1976, 11791, 960, 11, 291, 727, 312, 38602, 264, 3670, 11, 2035, 13, 50553], "temperature": 0.0, "avg_logprob": -0.24819882041529606, "compression_ratio": 1.6266666666666667, "no_speech_prob": 2.3143980221879135e-12}, {"id": 474, "seek": 359392, "start": 3598.88, "end": 3604.48, "text": " But, what happens in these environments, is that there can be sudden, like massive packet loss.", "tokens": [50613, 583, 11, 437, 2314, 294, 613, 12388, 11, 307, 300, 456, 393, 312, 3990, 11, 411, 5994, 20300, 4470, 13, 50893], "temperature": 0.0, "avg_logprob": -0.24819882041529606, "compression_ratio": 1.6266666666666667, "no_speech_prob": 2.3143980221879135e-12}, {"id": 475, "seek": 359392, "start": 3605.6, "end": 3610.7200000000003, "text": " You know, you have a poor connection. It happens. Like, I drive for Crystal Cove,", "tokens": [50949, 509, 458, 11, 291, 362, 257, 4716, 4984, 13, 467, 2314, 13, 1743, 11, 286, 3332, 337, 23489, 383, 1682, 11, 51205], "temperature": 0.0, "avg_logprob": -0.24819882041529606, "compression_ratio": 1.6266666666666667, "no_speech_prob": 2.3143980221879135e-12}, {"id": 476, "seek": 359392, "start": 3611.84, "end": 3616.8, "text": " a bunch of times, every week. You drive on PCH for Crystal Cove, you're going to have that happen.", "tokens": [51261, 257, 3840, 295, 1413, 11, 633, 1243, 13, 509, 3332, 322, 430, 5462, 337, 23489, 383, 1682, 11, 291, 434, 516, 281, 362, 300, 1051, 13, 51509], "temperature": 0.0, "avg_logprob": -0.24819882041529606, "compression_ratio": 1.6266666666666667, "no_speech_prob": 2.3143980221879135e-12}, {"id": 477, "seek": 361680, "start": 3617.52, "end": 3622.0800000000004, "text": " Because the cellular connection is terrible. And of course, IP runs over cells. So,", "tokens": [50401, 1436, 264, 29267, 4984, 307, 6237, 13, 400, 295, 1164, 11, 8671, 6676, 670, 5438, 13, 407, 11, 50629], "temperature": 0.0, "avg_logprob": -0.20299266885828088, "compression_ratio": 1.7389558232931728, "no_speech_prob": 2.525098619782229e-12}, {"id": 478, "seek": 361680, "start": 3622.0800000000004, "end": 3626.88, "text": " there's always a massive packet loss. So, clearly, the window size, on the receiving end,", "tokens": [50629, 456, 311, 1009, 257, 5994, 20300, 4470, 13, 407, 11, 4448, 11, 264, 4910, 2744, 11, 322, 264, 10040, 917, 11, 50869], "temperature": 0.0, "avg_logprob": -0.20299266885828088, "compression_ratio": 1.7389558232931728, "no_speech_prob": 2.525098619782229e-12}, {"id": 479, "seek": 361680, "start": 3626.88, "end": 3629.92, "text": " not to lose the connection, has to accommodate that. And the window size has to be large.", "tokens": [50869, 406, 281, 3624, 264, 4984, 11, 575, 281, 21410, 300, 13, 400, 264, 4910, 2744, 575, 281, 312, 2416, 13, 51021], "temperature": 0.0, "avg_logprob": -0.20299266885828088, "compression_ratio": 1.7389558232931728, "no_speech_prob": 2.525098619782229e-12}, {"id": 480, "seek": 361680, "start": 3631.44, "end": 3634.8, "text": " Right? So, what the adversary can do, is instead of sending one packet,", "tokens": [51097, 1779, 30, 407, 11, 437, 264, 48222, 393, 360, 11, 307, 2602, 295, 7750, 472, 20300, 11, 51265], "temperature": 0.0, "avg_logprob": -0.20299266885828088, "compression_ratio": 1.7389558232931728, "no_speech_prob": 2.525098619782229e-12}, {"id": 481, "seek": 361680, "start": 3635.52, "end": 3640.5600000000004, "text": " fake packet, injecting into DCP connection, the adversary can just generate the flood of packets,", "tokens": [51301, 7592, 20300, 11, 10711, 278, 666, 9114, 47, 4984, 11, 264, 48222, 393, 445, 8460, 264, 10481, 295, 30364, 11, 51553], "temperature": 0.0, "avg_logprob": -0.20299266885828088, "compression_ratio": 1.7389558232931728, "no_speech_prob": 2.525098619782229e-12}, {"id": 482, "seek": 364056, "start": 3640.56, "end": 3645.92, "text": " all with different offsets, right? Or sequence numbers. Hoping that at least one of them will", "tokens": [50365, 439, 365, 819, 39457, 1385, 11, 558, 30, 1610, 8310, 3547, 13, 13438, 278, 300, 412, 1935, 472, 295, 552, 486, 50633], "temperature": 0.0, "avg_logprob": -0.18734782596804062, "compression_ratio": 1.6334841628959276, "no_speech_prob": 2.1259129439482605e-12}, {"id": 483, "seek": 364056, "start": 3645.92, "end": 3652.32, "text": " fit in the window. And if one of them does, well, great. It will be accepted.", "tokens": [50633, 3318, 294, 264, 4910, 13, 400, 498, 472, 295, 552, 775, 11, 731, 11, 869, 13, 467, 486, 312, 9035, 13, 50953], "temperature": 0.0, "avg_logprob": -0.18734782596804062, "compression_ratio": 1.6334841628959276, "no_speech_prob": 2.1259129439482605e-12}, {"id": 484, "seek": 364056, "start": 3658.24, "end": 3663.04, "text": " Including reset. So, you can also, like, if reset is, like, terminate the connection. It's a,", "tokens": [51249, 27137, 14322, 13, 407, 11, 291, 393, 611, 11, 411, 11, 498, 14322, 307, 11, 411, 11, 10761, 473, 264, 4984, 13, 467, 311, 257, 11, 51489], "temperature": 0.0, "avg_logprob": -0.18734782596804062, "compression_ratio": 1.6334841628959276, "no_speech_prob": 2.1259129439482605e-12}, {"id": 485, "seek": 364056, "start": 3663.04, "end": 3667.84, "text": " there's a flag, like, send flag, add flag. In the DCP header, there's, remember, there's a flag", "tokens": [51489, 456, 311, 257, 7166, 11, 411, 11, 2845, 7166, 11, 909, 7166, 13, 682, 264, 9114, 47, 23117, 11, 456, 311, 11, 1604, 11, 456, 311, 257, 7166, 51729], "temperature": 0.0, "avg_logprob": -0.18734782596804062, "compression_ratio": 1.6334841628959276, "no_speech_prob": 2.1259129439482605e-12}, {"id": 486, "seek": 366784, "start": 3667.84, "end": 3673.6800000000003, "text": " still. And one of the flags is RST, or reset. And that signals to the receiving party that the", "tokens": [50365, 920, 13, 400, 472, 295, 264, 23265, 307, 497, 6840, 11, 420, 14322, 13, 400, 300, 12354, 281, 264, 10040, 3595, 300, 264, 50657], "temperature": 0.0, "avg_logprob": -0.14121293614053318, "compression_ratio": 1.7803030303030303, "no_speech_prob": 1.8698575673936624e-12}, {"id": 487, "seek": 366784, "start": 3673.6800000000003, "end": 3678.56, "text": " connection is being terminated. What's the nature? Well, I mean, it's kind of denial of service,", "tokens": [50657, 4984, 307, 885, 1433, 5410, 13, 708, 311, 264, 3687, 30, 1042, 11, 286, 914, 11, 309, 311, 733, 295, 28754, 295, 2643, 11, 50901], "temperature": 0.0, "avg_logprob": -0.14121293614053318, "compression_ratio": 1.7803030303030303, "no_speech_prob": 1.8698575673936624e-12}, {"id": 488, "seek": 366784, "start": 3678.56, "end": 3682.4, "text": " right? Your connection is suddenly reset. You may have seen, you may see this sometimes,", "tokens": [50901, 558, 30, 2260, 4984, 307, 5800, 14322, 13, 509, 815, 362, 1612, 11, 291, 815, 536, 341, 2171, 11, 51093], "temperature": 0.0, "avg_logprob": -0.14121293614053318, "compression_ratio": 1.7803030303030303, "no_speech_prob": 1.8698575673936624e-12}, {"id": 489, "seek": 366784, "start": 3683.76, "end": 3687.44, "text": " what in, in some browsers will display, like, connection reset. Have you seen that message?", "tokens": [51161, 437, 294, 11, 294, 512, 36069, 486, 4674, 11, 411, 11, 4984, 14322, 13, 3560, 291, 1612, 300, 3636, 30, 51345], "temperature": 0.0, "avg_logprob": -0.14121293614053318, "compression_ratio": 1.7803030303030303, "no_speech_prob": 1.8698575673936624e-12}, {"id": 490, "seek": 366784, "start": 3688.96, "end": 3693.44, "text": " Black screen, connection reset. Yeah, that means something, the server terminated the connection,", "tokens": [51421, 4076, 2568, 11, 4984, 14322, 13, 865, 11, 300, 1355, 746, 11, 264, 7154, 1433, 5410, 264, 4984, 11, 51645], "temperature": 0.0, "avg_logprob": -0.14121293614053318, "compression_ratio": 1.7803030303030303, "no_speech_prob": 1.8698575673936624e-12}, {"id": 491, "seek": 369344, "start": 3693.44, "end": 3698.16, "text": " or time had it occurred. Usually, the explicit connection was terminated for some reason. So,", "tokens": [50365, 420, 565, 632, 309, 11068, 13, 11419, 11, 264, 13691, 4984, 390, 1433, 5410, 337, 512, 1778, 13, 407, 11, 50601], "temperature": 0.0, "avg_logprob": -0.1893618384072947, "compression_ratio": 1.5278969957081545, "no_speech_prob": 1.8096025979769115e-12}, {"id": 492, "seek": 369344, "start": 3698.16, "end": 3707.36, "text": " so that's what happens. Not a huge problem in many cases, unless the TPCP connection is critical.", "tokens": [50601, 370, 300, 311, 437, 2314, 13, 1726, 257, 2603, 1154, 294, 867, 3331, 11, 5969, 264, 314, 12986, 47, 4984, 307, 4924, 13, 51061], "temperature": 0.0, "avg_logprob": -0.1893618384072947, "compression_ratio": 1.5278969957081545, "no_speech_prob": 1.8096025979769115e-12}, {"id": 493, "seek": 369344, "start": 3708.4, "end": 3711.52, "text": " Like, for example, some routing protocols, remember routing,", "tokens": [51113, 1743, 11, 337, 1365, 11, 512, 32722, 20618, 11, 1604, 32722, 11, 51269], "temperature": 0.0, "avg_logprob": -0.1893618384072947, "compression_ratio": 1.5278969957081545, "no_speech_prob": 1.8096025979769115e-12}, {"id": 494, "seek": 369344, "start": 3713.84, "end": 3720.48, "text": " maintain long-lived TCP connections between adjacent routers. Especially, let's say this is one domain,", "tokens": [51385, 6909, 938, 12, 46554, 48965, 9271, 1296, 24441, 4020, 433, 13, 8545, 11, 718, 311, 584, 341, 307, 472, 9274, 11, 51717], "temperature": 0.0, "avg_logprob": -0.1893618384072947, "compression_ratio": 1.5278969957081545, "no_speech_prob": 1.8096025979769115e-12}, {"id": 495, "seek": 372048, "start": 3720.48, "end": 3725.84, "text": " and this is another domain, and here we have two border routers. And they maintain this connection.", "tokens": [50365, 293, 341, 307, 1071, 9274, 11, 293, 510, 321, 362, 732, 7838, 4020, 433, 13, 400, 436, 6909, 341, 4984, 13, 50633], "temperature": 0.0, "avg_logprob": -0.12035149541394465, "compression_ratio": 1.7063197026022305, "no_speech_prob": 2.725986103513378e-12}, {"id": 496, "seek": 372048, "start": 3726.48, "end": 3732.4, "text": " Long-lived TCP connection. Not for forwarding packets, but for exchanging routing information.", "tokens": [50665, 8282, 12, 46554, 48965, 4984, 13, 1726, 337, 2128, 278, 30364, 11, 457, 337, 6210, 9741, 32722, 1589, 13, 50961], "temperature": 0.0, "avg_logprob": -0.12035149541394465, "compression_ratio": 1.7063197026022305, "no_speech_prob": 2.725986103513378e-12}, {"id": 497, "seek": 372048, "start": 3733.76, "end": 3739.52, "text": " Okay? Like DGP. We'll talk about it later. And if you reset this connection,", "tokens": [51029, 1033, 30, 1743, 413, 38, 47, 13, 492, 603, 751, 466, 309, 1780, 13, 400, 498, 291, 14322, 341, 4984, 11, 51317], "temperature": 0.0, "avg_logprob": -0.12035149541394465, "compression_ratio": 1.7063197026022305, "no_speech_prob": 2.725986103513378e-12}, {"id": 498, "seek": 372048, "start": 3741.68, "end": 3746.16, "text": " that requires them to reset the connection and restart. And routers don't like to do that,", "tokens": [51425, 300, 7029, 552, 281, 14322, 264, 4984, 293, 21022, 13, 400, 4020, 433, 500, 380, 411, 281, 360, 300, 11, 51649], "temperature": 0.0, "avg_logprob": -0.12035149541394465, "compression_ratio": 1.7063197026022305, "no_speech_prob": 2.725986103513378e-12}, {"id": 499, "seek": 372048, "start": 3746.16, "end": 3750.32, "text": " because that's not their critical path. That's not what they do. In fact, they need to do things", "tokens": [51649, 570, 300, 311, 406, 641, 4924, 3100, 13, 663, 311, 406, 437, 436, 360, 13, 682, 1186, 11, 436, 643, 281, 360, 721, 51857], "temperature": 0.0, "avg_logprob": -0.12035149541394465, "compression_ratio": 1.7063197026022305, "no_speech_prob": 2.725986103513378e-12}, {"id": 500, "seek": 375032, "start": 3750.32, "end": 3757.44, "text": " fast. Restarting a new routing, sorry, TCP connection takes time. So, that's real denial of service.", "tokens": [50365, 2370, 13, 13094, 446, 278, 257, 777, 32722, 11, 2597, 11, 48965, 4984, 2516, 565, 13, 407, 11, 300, 311, 957, 28754, 295, 2643, 13, 50721], "temperature": 0.0, "avg_logprob": -0.1271856242212756, "compression_ratio": 1.4504950495049505, "no_speech_prob": 2.5548443569056722e-12}, {"id": 501, "seek": 375032, "start": 3760.6400000000003, "end": 3768.88, "text": " Also, UDP. UDP is not as popular as TCP, but it is used. Okay? It's unreliable. Use stands for", "tokens": [50881, 2743, 11, 624, 11373, 13, 624, 11373, 307, 406, 382, 3743, 382, 48965, 11, 457, 309, 307, 1143, 13, 1033, 30, 467, 311, 20584, 2081, 712, 13, 8278, 7382, 337, 51293], "temperature": 0.0, "avg_logprob": -0.1271856242212756, "compression_ratio": 1.4504950495049505, "no_speech_prob": 2.5548443569056722e-12}, {"id": 502, "seek": 375032, "start": 3768.88, "end": 3776.4, "text": " unreliable. Tells you everything. Unreliable datagram protocol, which is a very, very lightweight", "tokens": [51293, 20584, 2081, 712, 13, 5115, 82, 291, 1203, 13, 1156, 265, 2081, 712, 1137, 3914, 10336, 11, 597, 307, 257, 588, 11, 588, 22052, 51669], "temperature": 0.0, "avg_logprob": -0.1271856242212756, "compression_ratio": 1.4504950495049505, "no_speech_prob": 2.5548443569056722e-12}, {"id": 503, "seek": 377640, "start": 3776.4, "end": 3785.6800000000003, "text": " transport layout that runs on top of IP. It has port numbers, just like TCP, but", "tokens": [50365, 5495, 13333, 300, 6676, 322, 1192, 295, 8671, 13, 467, 575, 2436, 3547, 11, 445, 411, 48965, 11, 457, 50829], "temperature": 0.0, "avg_logprob": -0.24676982094259822, "compression_ratio": 1.3678756476683938, "no_speech_prob": 2.3814646001735218e-12}, {"id": 504, "seek": 377640, "start": 3788.1600000000003, "end": 3794.48, "text": " doesn't have a connection established with DGP. It was super popular years ago for these P2P", "tokens": [50953, 1177, 380, 362, 257, 4984, 7545, 365, 413, 38, 47, 13, 467, 390, 1687, 3743, 924, 2057, 337, 613, 430, 17, 47, 51269], "temperature": 0.0, "avg_logprob": -0.24676982094259822, "compression_ratio": 1.3678756476683938, "no_speech_prob": 2.3814646001735218e-12}, {"id": 505, "seek": 377640, "start": 3794.48, "end": 3801.6, "text": " applications. Anybody remember P2P peer streaming? Yeah. So, it was really popular because", "tokens": [51269, 5821, 13, 19082, 1604, 430, 17, 47, 15108, 11791, 30, 865, 13, 407, 11, 309, 390, 534, 3743, 570, 51625], "temperature": 0.0, "avg_logprob": -0.24676982094259822, "compression_ratio": 1.3678756476683938, "no_speech_prob": 2.3814646001735218e-12}, {"id": 506, "seek": 380160, "start": 3801.6, "end": 3809.7599999999998, "text": " the idea was that it was too hard to run TCP servers, right? On like small devices. So, instead,", "tokens": [50365, 264, 1558, 390, 300, 309, 390, 886, 1152, 281, 1190, 48965, 15909, 11, 558, 30, 1282, 411, 1359, 5759, 13, 407, 11, 2602, 11, 50773], "temperature": 0.0, "avg_logprob": -0.19742111206054688, "compression_ratio": 1.5918367346938775, "no_speech_prob": 1.6088557352675337e-12}, {"id": 507, "seek": 380160, "start": 3809.7599999999998, "end": 3814.72, "text": " if you run UDP, you didn't have to run a server. You could just like have light. There's no", "tokens": [50773, 498, 291, 1190, 624, 11373, 11, 291, 994, 380, 362, 281, 1190, 257, 7154, 13, 509, 727, 445, 411, 362, 1442, 13, 821, 311, 572, 51021], "temperature": 0.0, "avg_logprob": -0.19742111206054688, "compression_ratio": 1.5918367346938775, "no_speech_prob": 1.6088557352675337e-12}, {"id": 508, "seek": 380160, "start": 3814.72, "end": 3820.0, "text": " establishment connection, no teardown. You just like wanted to grab an illegally copied movie from", "tokens": [51021, 20971, 4984, 11, 572, 535, 515, 648, 13, 509, 445, 411, 1415, 281, 4444, 364, 39585, 25365, 3169, 490, 51285], "temperature": 0.0, "avg_logprob": -0.19742111206054688, "compression_ratio": 1.5918367346938775, "no_speech_prob": 1.6088557352675337e-12}, {"id": 509, "seek": 380160, "start": 3820.0, "end": 3825.04, "text": " somebody near, you know, on a laptop. It just did it quickly without having to establish a connection.", "tokens": [51285, 2618, 2651, 11, 291, 458, 11, 322, 257, 10732, 13, 467, 445, 630, 309, 2661, 1553, 1419, 281, 8327, 257, 4984, 13, 51537], "temperature": 0.0, "avg_logprob": -0.19742111206054688, "compression_ratio": 1.5918367346938775, "no_speech_prob": 1.6088557352675337e-12}, {"id": 510, "seek": 382504, "start": 3825.04, "end": 3833.2, "text": " But UDP provides no closeness, no flow control, no windows, nothing. So, UDP flooding is easy.", "tokens": [50365, 583, 624, 11373, 6417, 572, 2611, 15264, 11, 572, 3095, 1969, 11, 572, 9309, 11, 1825, 13, 407, 11, 624, 11373, 24132, 307, 1858, 13, 50773], "temperature": 0.0, "avg_logprob": -0.214115588695972, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4942068809624685e-12}, {"id": 511, "seek": 382504, "start": 3834.48, "end": 3839.84, "text": " They just generate a bunch of UDP packets. Now, some, some operating systems, some hosts do not", "tokens": [50837, 814, 445, 8460, 257, 3840, 295, 624, 11373, 30364, 13, 823, 11, 512, 11, 512, 7447, 3652, 11, 512, 21573, 360, 406, 51105], "temperature": 0.0, "avg_logprob": -0.214115588695972, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4942068809624685e-12}, {"id": 512, "seek": 382504, "start": 3839.84, "end": 3845.2799999999997, "text": " accept UDP traffic. Some screen it more. But natively, UDP traffic is not screened.", "tokens": [51105, 3241, 624, 11373, 6419, 13, 2188, 2568, 309, 544, 13, 583, 8470, 356, 11, 624, 11373, 6419, 307, 406, 2568, 292, 13, 51377], "temperature": 0.0, "avg_logprob": -0.214115588695972, "compression_ratio": 1.5054945054945055, "no_speech_prob": 2.4942068809624685e-12}, {"id": 513, "seek": 384528, "start": 3845.28, "end": 3853.76, "text": " So, well, what can we do about all of this, all of these data? Well, you know, at the Bob", "tokens": [50365, 407, 11, 731, 11, 437, 393, 321, 360, 466, 439, 295, 341, 11, 439, 295, 613, 1412, 30, 1042, 11, 291, 458, 11, 412, 264, 6085, 50789], "temperature": 0.0, "avg_logprob": -0.4327036539713542, "compression_ratio": 1.5449101796407185, "no_speech_prob": 2.580250466413525e-12}, {"id": 514, "seek": 384528, "start": 3853.76, "end": 3859.28, "text": " transport layer, we can use things like a purpose, sure, right? Remember that.", "tokens": [50789, 5495, 4583, 11, 321, 393, 764, 721, 411, 257, 4334, 11, 988, 11, 558, 30, 5459, 300, 13, 51065], "temperature": 0.0, "avg_logprob": -0.4327036539713542, "compression_ratio": 1.5449101796407185, "no_speech_prob": 2.580250466413525e-12}, {"id": 515, "seek": 384528, "start": 3862.2400000000002, "end": 3868.1600000000003, "text": " A Bob network layer, we can use this as a cell TLS or as a stage. I think Cap is a stage,", "tokens": [51213, 316, 6085, 3209, 4583, 11, 321, 393, 764, 341, 382, 257, 2815, 314, 19198, 420, 382, 257, 3233, 13, 286, 519, 8363, 307, 257, 3233, 11, 51509], "temperature": 0.0, "avg_logprob": -0.4327036539713542, "compression_ratio": 1.5449101796407185, "no_speech_prob": 2.580250466413525e-12}, {"id": 516, "seek": 386816, "start": 3868.16, "end": 3877.04, "text": " a different alternative. And the network layer. Also, okay, but that's, that's a purpose.", "tokens": [50365, 257, 819, 8535, 13, 400, 264, 3209, 4583, 13, 2743, 11, 1392, 11, 457, 300, 311, 11, 300, 311, 257, 4334, 13, 50809], "temperature": 0.6000000000000001, "avg_logprob": -0.41880179511176213, "compression_ratio": 1.6866359447004609, "no_speech_prob": 1.9460368646390114e-12}, {"id": 517, "seek": 386816, "start": 3877.04, "end": 3880.7999999999997, "text": " Remember, it provides user authentication, client authentication, server authentication,", "tokens": [50809, 5459, 11, 309, 6417, 4195, 26643, 11, 6423, 26643, 11, 7154, 26643, 11, 50997], "temperature": 0.6000000000000001, "avg_logprob": -0.41880179511176213, "compression_ratio": 1.6866359447004609, "no_speech_prob": 1.9460368646390114e-12}, {"id": 518, "seek": 386816, "start": 3881.7599999999998, "end": 3887.92, "text": " but does not protect you against, like, network attacks. So, any kind of connection hijacking,", "tokens": [51045, 457, 775, 406, 2371, 291, 1970, 11, 411, 11, 3209, 8122, 13, 407, 11, 604, 733, 295, 4984, 10625, 14134, 11, 51353], "temperature": 0.6000000000000001, "avg_logprob": -0.41880179511176213, "compression_ratio": 1.6866359447004609, "no_speech_prob": 1.9460368646390114e-12}, {"id": 519, "seek": 386816, "start": 3887.92, "end": 3894.3199999999997, "text": " connection spoofing, you know. SSL TLS will protect you at this, kind of this session layer,", "tokens": [51353, 4984, 637, 29496, 278, 11, 291, 458, 13, 12238, 43, 314, 19198, 486, 2371, 291, 412, 341, 11, 733, 295, 341, 5481, 4583, 11, 51673], "temperature": 0.6000000000000001, "avg_logprob": -0.41880179511176213, "compression_ratio": 1.6866359447004609, "no_speech_prob": 1.9460368646390114e-12}, {"id": 520, "seek": 389432, "start": 3894.32, "end": 3899.32, "text": " but does not", "tokens": [50365, 457, 775, 406, 50615], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 521, "seek": 389432, "start": 3899.32, "end": 3903.32, "text": " against denial of service. For example, SYN flooding. You cannot", "tokens": [50615, 1970, 28754, 295, 2643, 13, 1171, 1365, 11, 318, 22315, 24132, 13, 509, 2644, 50815], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 522, "seek": 389432, "start": 3903.32, "end": 3907.32, "text": " prevent with SSL TLS. Or UDP flooding.", "tokens": [50815, 4871, 365, 12238, 43, 314, 19198, 13, 1610, 624, 11373, 24132, 13, 51015], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 523, "seek": 389432, "start": 3907.32, "end": 3911.32, "text": " As a network player, you can use IPsec.", "tokens": [51015, 1018, 257, 3209, 4256, 11, 291, 393, 764, 8671, 8159, 13, 51215], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 524, "seek": 389432, "start": 3911.32, "end": 3915.32, "text": " IPsec is great. It will protect you against", "tokens": [51215, 8671, 8159, 307, 869, 13, 467, 486, 2371, 291, 1970, 51415], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 525, "seek": 389432, "start": 3915.32, "end": 3919.32, "text": " connection, hijacking, injection, all of the attacks. Pretty much all the attacks I just", "tokens": [51415, 4984, 11, 10625, 14134, 11, 22873, 11, 439, 295, 264, 8122, 13, 10693, 709, 439, 264, 8122, 286, 445, 51615], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 526, "seek": 389432, "start": 3919.32, "end": 3923.32, "text": " described can be fixed with using IPsec.", "tokens": [51615, 7619, 393, 312, 6806, 365, 1228, 8671, 8159, 13, 51815], "temperature": 0.0, "avg_logprob": -0.2942875192520466, "compression_ratio": 1.5207373271889402, "no_speech_prob": 1.6056107181652846e-12}, {"id": 527, "seek": 392332, "start": 3923.32, "end": 3927.32, "text": " But IPsec is a heavy", "tokens": [50365, 583, 8671, 8159, 307, 257, 4676, 50565], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 528, "seek": 392332, "start": 3927.32, "end": 3931.32, "text": " machinery. It demands what we didn't cover is like", "tokens": [50565, 27302, 13, 467, 15107, 437, 321, 994, 380, 2060, 307, 411, 50765], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 529, "seek": 392332, "start": 3931.32, "end": 3935.32, "text": " establishment of keys and then the actual connection", "tokens": [50765, 20971, 295, 9317, 293, 550, 264, 3539, 4984, 50965], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 530, "seek": 392332, "start": 3935.32, "end": 3939.32, "text": " in maintenance there. It's not free. You will see a performance degradation", "tokens": [50965, 294, 11258, 456, 13, 467, 311, 406, 1737, 13, 509, 486, 536, 257, 3389, 40519, 51165], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 531, "seek": 392332, "start": 3939.32, "end": 3943.32, "text": " for your network.", "tokens": [51165, 337, 428, 3209, 13, 51365], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 532, "seek": 392332, "start": 3943.32, "end": 3947.32, "text": " So it's", "tokens": [51365, 407, 309, 311, 51565], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 533, "seek": 392332, "start": 3947.32, "end": 3951.32, "text": " pretty much the best solution there is for preventing these kinds of attacks.", "tokens": [51565, 1238, 709, 264, 1151, 3827, 456, 307, 337, 19965, 613, 3685, 295, 8122, 13, 51765], "temperature": 0.0, "avg_logprob": -0.25922857012067524, "compression_ratio": 1.4901960784313726, "no_speech_prob": 1.416462758717374e-12}, {"id": 534, "seek": 395132, "start": 3951.32, "end": 3955.32, "text": " mitigating these types of attacks. But like I said, there's", "tokens": [50365, 15699, 990, 613, 3467, 295, 8122, 13, 583, 411, 286, 848, 11, 456, 311, 50565], "temperature": 0.0, "avg_logprob": -0.2137897218976702, "compression_ratio": 1.3910614525139664, "no_speech_prob": 1.385373695102221e-12}, {"id": 535, "seek": 395132, "start": 3955.32, "end": 3957.32, "text": " performance penalty and also the key management", "tokens": [50565, 3389, 16263, 293, 611, 264, 2141, 4592, 50665], "temperature": 0.0, "avg_logprob": -0.2137897218976702, "compression_ratio": 1.3910614525139664, "no_speech_prob": 1.385373695102221e-12}, {"id": 536, "seek": 395132, "start": 3957.32, "end": 3959.32, "text": " is just very, very complicated.", "tokens": [50665, 307, 445, 588, 11, 588, 6179, 13, 50765], "temperature": 0.0, "avg_logprob": -0.2137897218976702, "compression_ratio": 1.3910614525139664, "no_speech_prob": 1.385373695102221e-12}, {"id": 537, "seek": 395132, "start": 3959.32, "end": 3961.32, "text": " Okay? So if you work for", "tokens": [50765, 1033, 30, 407, 498, 291, 589, 337, 50865], "temperature": 0.0, "avg_logprob": -0.2137897218976702, "compression_ratio": 1.3910614525139664, "no_speech_prob": 1.385373695102221e-12}, {"id": 538, "seek": 395132, "start": 3961.32, "end": 3965.32, "text": " organization where they set up IPsec, that's great.", "tokens": [50865, 4475, 689, 436, 992, 493, 8671, 8159, 11, 300, 311, 869, 13, 51065], "temperature": 0.0, "avg_logprob": -0.2137897218976702, "compression_ratio": 1.3910614525139664, "no_speech_prob": 1.385373695102221e-12}, {"id": 539, "seek": 395132, "start": 3965.32, "end": 3967.32, "text": " But for yourself, it's not easy.", "tokens": [51065, 583, 337, 1803, 11, 309, 311, 406, 1858, 13, 51165], "temperature": 0.0, "avg_logprob": -0.2137897218976702, "compression_ratio": 1.3910614525139664, "no_speech_prob": 1.385373695102221e-12}, {"id": 540, "seek": 396732, "start": 3967.32, "end": 3971.32, "text": " And below network layer, none of these", "tokens": [50365, 400, 2507, 3209, 4583, 11, 6022, 295, 613, 50565], "temperature": 0.0, "avg_logprob": -0.30366045114945395, "compression_ratio": 1.2686567164179106, "no_speech_prob": 1.960326866112805e-12}, {"id": 541, "seek": 396732, "start": 3971.32, "end": 3975.32, "text": " attacks can be solved except for the one that", "tokens": [50565, 8122, 393, 312, 13041, 3993, 337, 264, 472, 300, 50765], "temperature": 0.0, "avg_logprob": -0.30366045114945395, "compression_ratio": 1.2686567164179106, "no_speech_prob": 1.960326866112805e-12}, {"id": 542, "seek": 396732, "start": 3975.32, "end": 3977.32, "text": " the SMART.", "tokens": [50765, 264, 13115, 15118, 13, 50865], "temperature": 0.0, "avg_logprob": -0.30366045114945395, "compression_ratio": 1.2686567164179106, "no_speech_prob": 1.960326866112805e-12}, {"id": 543, "seek": 396732, "start": 3977.32, "end": 3981.32, "text": " Okay, I think we'll end here because the rest of it has to do with routing", "tokens": [50865, 1033, 11, 286, 519, 321, 603, 917, 510, 570, 264, 1472, 295, 309, 575, 281, 360, 365, 32722, 51065], "temperature": 0.0, "avg_logprob": -0.30366045114945395, "compression_ratio": 1.2686567164179106, "no_speech_prob": 1.960326866112805e-12}, {"id": 544, "seek": 398132, "start": 3981.32, "end": 3987.32, "text": " and you'll probably forget if I just start.", "tokens": [50365, 293, 291, 603, 1391, 2870, 498, 286, 445, 722, 13, 50665], "temperature": 0.0, "avg_logprob": -0.35915648418924084, "compression_ratio": 0.96, "no_speech_prob": 3.7891790399813274e-12}, {"id": 545, "seek": 398132, "start": 3987.32, "end": 3991.32, "text": " All right, see you Thursday.", "tokens": [50665, 1057, 558, 11, 536, 291, 10383, 13, 50865], "temperature": 0.0, "avg_logprob": -0.35915648418924084, "compression_ratio": 0.96, "no_speech_prob": 3.7891790399813274e-12}, {"id": 546, "seek": 399132, "start": 3991.32, "end": 4008.32, "text": " We'll see you from", "tokens": [50365, 492, 603, 536, 291, 490, 51215], "temperature": 1.0, "avg_logprob": -2.5596230824788413, "compression_ratio": 0.6923076923076923, "no_speech_prob": 6.772527417348018e-12}], "language": "English"}
1
00:00:00,000 --> 00:00:14,880
Routing protocols came back to the late 50s, early 60s and they predate the internet because

2
00:00:14,880 --> 00:00:20,320
there were other networks out there in the world besides the internet.

3
00:00:20,320 --> 00:00:27,040
In fact, even today there are other networks, we just don't study them as much, they don't

4
00:00:27,040 --> 00:00:33,520
impact us very much. There were other architectures that were used for private networking and even

5
00:00:33,520 --> 00:00:43,040
internet but different types of internet. Anyway, there are two, okay, how many people have heard

6
00:00:43,040 --> 00:00:54,160
of Dijkstra's algorithm? Oh, that's better. So what does Dijkstra's algorithm do? Shortest

7
00:00:54,160 --> 00:01:01,760
path. So, right, given a network or a graph, and a graph and a network are kind of the same,

8
00:01:02,800 --> 00:01:09,360
right, given a connected, not fully connected, but just a connected graph, Dijkstra's algorithm

9
00:01:09,360 --> 00:01:21,440
will find you a route, i.e. path between A and B. Okay, and it does it depth first.

10
00:01:23,360 --> 00:01:31,360
How many people heard of Bellman Ford? Oh, good, so you heard it in the same context probably in an

11
00:01:31,360 --> 00:01:37,360
algorithms course or some other kind of elementary course. Usually they're covered also, re-covered,

12
00:01:37,360 --> 00:01:44,960
in networks course, as a prelude to route. Bellman Ford is also an algorithm for graphs,

13
00:01:45,920 --> 00:01:51,040
which are networks, connected, right? If you have a disconnected graph, it doesn't work.

14
00:01:51,040 --> 00:02:05,520
And it is breadth first, okay? Not depth first, breadth first. And so for the last 70 years,

15
00:02:06,080 --> 00:02:13,040
there's been a lot of debate about which one is better, right? They're not compatible. They're sort

16
00:02:13,040 --> 00:02:22,560
of mutually exclusive. You either do breadth first or you do depth first. And so today's internet started

17
00:02:22,560 --> 00:02:34,720
out, okay, by using a depth first, right? Something called OSPF, okay? And today it's using,

18
00:02:34,720 --> 00:02:42,160
sorry, it was started out using depth first, now it's using kind of a breadth first. Something called distance vectors.

19
00:02:42,720 --> 00:02:49,440
Okay, I'll explain quickly how distance vector link state works because they don't have slides

20
00:02:49,440 --> 00:02:55,280
on it thinking that you already know. Link state works like this. It basically dice this.

21
00:02:55,280 --> 00:03:02,480
Every node in the network, okay? And imagine we are a graph. So every adjacent person to you is a link, right?

22
00:03:06,160 --> 00:03:12,880
Everybody broadcasts the state of their links. For example, I'm connected to this guy and this guy.

23
00:03:14,560 --> 00:03:22,080
And I'm going to broadcast to anybody who hears that these are my connections. Let's go. Alice, Bob.

24
00:03:22,080 --> 00:03:32,960
Everybody else does the same thing. He broadcasts that he connected just to one person, him. He broadcasts that

25
00:03:32,960 --> 00:03:39,280
he's connected to, I don't know, two people. Everybody broadcasts that the state of their connection,

26
00:03:39,280 --> 00:03:47,200
who they are adjacent to. And that broadcast is flooded. Does everybody know what flooded means?

27
00:03:48,160 --> 00:03:55,040
It means when you receive a packet, you forward it out on all other interfaces, right? Which means on all other

28
00:03:55,040 --> 00:04:07,840
connections. You following me? So this generalizes into following. Everyone receives the state

29
00:04:07,840 --> 00:04:19,680
state of every other node in the network. Yeah? You following me? If everything is flooded and broadcast,

30
00:04:19,680 --> 00:04:30,400
and let's say at roughly the same time, then everyone learns who is connected to whom directly. Yes?

31
00:04:30,400 --> 00:04:40,560
Okay, that allows you to construct a graph. And do the shortest path, for example, the extra set.

32
00:04:41,680 --> 00:04:49,200
Okay? Explicitly knowing what the path is. Right? You actually learn the path.

33
00:04:49,200 --> 00:04:56,000
Right? So for example, to get to you over there, I will learn the path I have to go from him and him.

34
00:04:56,000 --> 00:05:01,760
That's my shortest path. I could also go around, but the shortest path is like this. Okay?

35
00:05:02,400 --> 00:05:04,400
This Daxter's algorithm tells me that.

36
00:05:04,400 --> 00:05:14,800
So that's link state. Why it's called link state? Because everybody broadcasts the state of their links.

37
00:05:14,800 --> 00:05:18,160
Links means immediate connections. Immediate, right? Who am I connected to?

38
00:05:18,160 --> 00:05:26,800
So if my connection to him is down, well, I obviously don't broadcast the fact that I'm connected to him.

39
00:05:26,800 --> 00:05:33,200
I only broadcast the fact that I'm connected to him. And in fact, he's the only one who hears my broadcast.

40
00:05:33,200 --> 00:05:40,240
But then he rebroadcasts my broadcast, and everybody knows that, oh, well, he attends his name, right?

41
00:05:40,240 --> 00:05:44,960
But everybody knows that, oh, let's see, this guy has a path of length one to me.

42
00:05:44,960 --> 00:05:56,720
You learn this. You learn this. Later you rebroadcast. He learns that, he learns that you have a path of length three to me.

43
00:05:56,720 --> 00:06:07,280
And he knows exactly the path. Okay. That's link state. Distance vector is very different. Distance vector says

44
00:06:07,280 --> 00:06:16,640
everybody in the beginning has a table of all other nodes. So we know the population.

45
00:06:18,720 --> 00:06:25,360
Okay. But I tell, I essentially tell my neighbor, my direct neighbor, let's say I'm here.

46
00:06:26,480 --> 00:06:31,600
My direct neighbor is these two. I tell them my routing table.

47
00:06:31,600 --> 00:06:39,840
In the beginning, my routing table is very simple. It lists all of you all with a distance infinity.

48
00:06:41,520 --> 00:06:52,720
Except for them. It says, I can get, I'm connected to him with one half. I'm connected to him with one half.

49
00:06:53,680 --> 00:06:57,200
If I'm telling you that I'm connected to you with one half, it's useless. You already know this.

50
00:06:57,200 --> 00:07:08,160
But what you don't know is I have one half to him. Okay. So all of a sudden, now you, instead of having distance infinity to him, say,

51
00:07:08,160 --> 00:07:15,520
oh, the distance is two and I am the next half. Does everybody understand this example?

52
00:07:15,520 --> 00:07:25,840
And then he broadcasts his own table, which has infinity for everybody except for me, him, and the two people here.

53
00:07:28,400 --> 00:07:34,560
This converges. Everybody does the same thing in the distributed fashion. This converges.

54
00:07:34,560 --> 00:07:44,320
This converges. And at the end, every node has a table with every possible destination, but not the path.

55
00:07:45,520 --> 00:07:52,480
They don't know the graph at all. What you do know is that to get to Isita over there,

56
00:07:52,480 --> 00:08:03,440
I, it costs one, two, three, four hops, and the next hop is him. But I don't know how it goes after that.

57
00:08:03,440 --> 00:08:11,360
Totally ignorant. To get to that guy in the white hat, it will be one, two, three, four. Again, next hop is him.

58
00:08:11,360 --> 00:08:17,280
To get to that guy over there, next hop is him, and the distance is three. One, two, three.

59
00:08:17,280 --> 00:08:24,160
One, two, three. That's what we learned in the end in distance vector. Why? Distance vector.

60
00:08:24,160 --> 00:08:30,960
Because the table shows the distance. And the stuff we exchange out is called distance vectors.

61
00:08:33,280 --> 00:08:35,200
That is a crash course for free.

62
00:08:35,200 --> 00:08:51,520
Well, today's internet, okay, does not use either, truly speaking. It uses a hybrid. It's called path vector.

63
00:08:52,960 --> 00:09:00,160
So, and it does not use actual IP addresses as a destination, or it does not even, in fact,

64
00:09:01,120 --> 00:09:07,200
you can think of it as using autonomous systems. Remember ASs, ADs, as destinations. So, it does it

65
00:09:07,200 --> 00:09:14,880
at a coarser granularity, right? Now, there's some details here, the IP prefixes included, but I'm

66
00:09:14,880 --> 00:09:20,800
going to abstract it all the way. So, think about it that today's internet operates on the granularity

67
00:09:20,800 --> 00:09:26,960
of autonomous domains or autonomous systems, right? Because they're just these blocks, right? What happens

68
00:09:26,960 --> 00:09:33,120
within each autonomous system, which could be small or large, is of no concern to BGP, which is the

69
00:09:33,120 --> 00:09:38,080
protocol that runs it. Inside, you can run whatever routing protocol you want. You could run the same

70
00:09:38,080 --> 00:09:45,040
BGP, border gateway, inside, or you can run OSPF, which is open shortest path first, or you can run RIP,

71
00:09:45,040 --> 00:09:52,640
which is a reliable internet, routing internet protocol. There are a number of other options

72
00:09:52,640 --> 00:09:59,680
you can do. You can do static routing inside also, like manually configured static routing,

73
00:09:59,680 --> 00:10:05,520
and check out, from the andres of the era that I described here, okay? So, what you do inside it,

74
00:10:05,520 --> 00:10:11,920
inside it, AS or AD is up to you, but the main thing is, if you want to connect to the internet,

75
00:10:11,920 --> 00:10:27,280
right, your border routers, right, must run BGP, which is how ASs do routing, okay? So, today,

76
00:10:28,720 --> 00:10:36,880
routing is done, and then it's BGP level done on the basis of ASs or IDs, but they are still using IP

77
00:10:36,880 --> 00:10:43,840
addresses for routing, right? The actual routers use IP addresses, and that's because for each AS or AD,

78
00:10:43,840 --> 00:10:50,880
there is a bunch of IP prefixes associated. So, when you know a route to a particular AS,

79
00:10:50,880 --> 00:10:57,600
you can associate a bunch of IP prefixes with it, okay? And that allows us to route IP back.

80
00:10:57,600 --> 00:11:10,640
Right. So, as I said before, and you know, routing, mechanical actually, routing can be by explicit

81
00:11:10,640 --> 00:11:17,760
IP addresses, but usually it's done by longest prefix match. Remember I discussed that? Longest prefix.

82
00:11:17,760 --> 00:11:22,240
When the router looks in its table, it looks for the longest prefix. The longest prefix may actually

83
00:11:22,240 --> 00:11:28,000
be an explicit address, the full address, or it may be some part of the address, like the preface,

84
00:11:28,000 --> 00:11:32,240
but it looks for the longest prefix, because that's likely to be the best route.

85
00:11:36,400 --> 00:11:38,320
Right. So, this is basically what I told you.

86
00:11:41,440 --> 00:11:45,840
So, we're going to forget link state for now, and we're going to forget the dyke strap. I'm going to

87
00:11:45,840 --> 00:11:50,480
look at Bellman Ford, right? And this is essentially what is at the heart of BGP today.

88
00:11:54,080 --> 00:12:00,320
There are some pitfalls here, and some of the problems with routing aren't necessarily security

89
00:12:00,320 --> 00:12:07,600
problems. They are sometimes reliability and fault tolerance problems, except often we cannot tell

90
00:12:07,600 --> 00:12:13,040
what causes it, right? Is it like accidental malfunction, stupid operators,

91
00:12:13,040 --> 00:12:22,080
just making mistakes, or is it, or implementation errors in the routing protocol implementation,

92
00:12:22,080 --> 00:12:28,880
or an attack? So, one of the problems that occurs in distance vector protocol is what's called a

93
00:12:28,880 --> 00:12:34,960
split horizon update. I don't should just understand how that works. So, I'm going to, this picture shows

94
00:12:34,960 --> 00:12:41,840
you a kind of a very silly network, which is called a line network, where it's not very interesting,

95
00:12:41,840 --> 00:12:50,240
right? But it happens in the real world, where you have essentially, well, these entities. You can

96
00:12:50,240 --> 00:12:56,000
think of them as domains, or you can think of them as just routers or hosts. It doesn't really matter.

97
00:12:56,000 --> 00:13:05,440
But the thick white lines represent direct connections, okay? So, the idea is, like in distance

98
00:13:05,440 --> 00:13:16,160
vectors, I just tried to explain, that you see here, G1, it is directly connected to A.

99
00:13:17,840 --> 00:13:24,880
So, what it does in a normal distance vector protocol, it says, look, it advertises. It tells everybody,

100
00:13:24,880 --> 00:13:34,240
hey, hey, I have a hop one distance to A. Okay? So, it informs G2. It cannot inform anybody else,

101
00:13:34,240 --> 00:13:40,560
right? It just, well, it can inform A, but A already knows. So, it informs G2. And so, they quickly,

102
00:13:40,560 --> 00:13:50,800
and then G2 says, oh, and good news, wonderful. And now I have a two hop route to A. So, it advertises to G3.

103
00:13:50,800 --> 00:14:01,280
And G3 says, yay, I have a three hop route to A. Oh, why? And G2, right? And then, so on. And G4 lands it

104
00:14:01,280 --> 00:14:08,320
with a distance four. Finally, G5 lands it. After a bit, it says, I have a five hop route to A. Okay.

105
00:14:11,840 --> 00:14:19,120
But suppose the link here goes down. Maybe an accident, maybe a hack, we don't care.

106
00:14:19,120 --> 00:14:28,800
Something bad happens. And this G1 and A get disconnected. So, what the protocol does,

107
00:14:29,920 --> 00:14:40,240
naively, G2 says, I have a route of length two to A. Remember that? From the previous slide.

108
00:14:40,240 --> 00:14:49,760
So, G1 says, I have a route with a length infinity. I cannot reach A. The link is down.

109
00:14:51,120 --> 00:14:57,520
Right? That's a fact. So, when the link is down, you're supposed to mark something with infinity.

110
00:14:57,520 --> 00:15:05,200
Because you cannot destination unreachable. But, G2 remembers good news from the previous slide.

111
00:15:05,200 --> 00:15:13,040
And it says, I can get to G1. Sorry, I can get to A in two hops. Remember, distance vector does not

112
00:15:13,040 --> 00:15:20,320
remember routes. It remembers distances and next hop. That's how it's specified.

113
00:15:20,320 --> 00:15:29,040
So, basically, what will happen is, G1 will say, all right, two is better than infinity.

114
00:15:30,320 --> 00:15:39,920
Strictly less. So, now I have a route of length three to eight. That's what G1 thinks.

115
00:15:39,920 --> 00:15:51,280
And then it starts sending packets. Right? To G1. Sorry, if G1 has packets to A,

116
00:15:51,280 --> 00:15:56,080
we'll send it to G2. G2 will send it back to G1. G1 will then send it to two. And there's a loop.

117
00:15:57,840 --> 00:16:06,160
Okay? So, there you have it. And then, what's called is, they're counting to infinity. Because

118
00:16:06,160 --> 00:16:14,000
as they realize, oh, well, you know, there's no path of length two, they're going to increment it. Right?

119
00:16:14,000 --> 00:16:22,240
One by one. And it keeps going. It's called counting to infinity problem. Okay?

120
00:16:24,400 --> 00:16:32,160
Now, once you understand the problem, the solution is easy. Okay? The solution is easy. It says,

121
00:16:32,160 --> 00:16:40,160
you know, do not advertise on the same interface that your receipts are. That is, do not re-advertise.

122
00:16:40,160 --> 00:16:44,640
Do not tell me that I can reach things in. Do you follow?

123
00:16:44,640 --> 00:17:02,480
So, as they exchange routing tables, they both start incrementing, right, by one, the cost to get to A.

124
00:17:03,120 --> 00:17:08,080
A is completely unreachable. There's no way to reach A. But they both think that there is a way to reach.

125
00:17:08,080 --> 00:17:13,600
Just the cost goes up. And this can take for a very long time. Infinity is a large number.

126
00:17:14,320 --> 00:17:19,840
Or whatever the number of bits reserved for the hop count, right, eventually will overrun. So,

127
00:17:21,520 --> 00:17:28,400
if you start, if you stop doing that, right, so you don't, you don't advertise, re-advertise a route

128
00:17:28,400 --> 00:17:33,280
on the interface you received it from. That solves the problem. But it only solves the problem if you

129
00:17:33,280 --> 00:17:38,960
have these kind of very small loops. Does that make sense?

130
00:17:42,160 --> 00:17:48,960
Now, link state does not have this problem. Remember how I described link state? In a link state

131
00:17:48,960 --> 00:17:55,120
protocol, every node in the network receives an entire map of the network. So, loops are impossible.

132
00:17:55,120 --> 00:18:17,280
And so, that's why BGP, one of the reasons, BGP today is what's called path vector. So, it works like a

133
00:18:17,280 --> 00:18:22,080
distance vector, but with a, with a twist, with a, with a, with a, like a, a little bit extra feature.

134
00:18:23,040 --> 00:18:38,080
That, in addition to every table, it's actually every node.

135
00:18:38,080 --> 00:18:47,120
So, normally, a distance vector table would be like this. You will have three columns,

136
00:18:47,840 --> 00:18:54,080
and here will be destination, uh, cost,

137
00:18:54,080 --> 00:19:06,800
next hop. Right, that's a distance vector table. And here it will say something like, I don't know,

138
00:19:06,800 --> 00:19:12,720
uci.edu. I'm just, I'm not putting it, it could be numeric, okay, but I'm just putting, let's say,

139
00:19:12,720 --> 00:19:20,320
some prefix corresponding to uci.edu. And, uh, this could be, I don't know, 12, meaning 12 hops away.

140
00:19:20,320 --> 00:19:29,760
And the next hop is, uh, well, depending, if this is, I don't know, uh, uci.davis,

141
00:19:31,600 --> 00:19:36,320
that, that's the table at uci.davis, and this would be the next hop is, uh, ucla.

142
00:19:40,000 --> 00:19:45,040
Okay, that's how a distance vector table sort of looks like. But, in BGP,

143
00:19:45,040 --> 00:20:02,080
this is not next hop, but that, entire path. So, this will be like uci.edu, uh, I don't know,

144
00:20:02,080 --> 00:20:11,520
SoCal, uh, blah, blah, blah, com, cox.net, et cetera, et cetera. Right? So, it will be a sequence of,

145
00:20:11,520 --> 00:20:16,560
uh, of hops, of actual hops that you have to take, like, a full rep.

146
00:20:18,400 --> 00:20:25,040
One of the reasons this is done is to avoid loops. Right? If you know the actual path, right?

147
00:20:26,800 --> 00:20:30,480
You can see when there are loops, right? You will see that, for example, something is,

148
00:20:30,480 --> 00:20:36,800
you are about to add yourself to the path, and you're already there. That's a loop. Right?

149
00:20:36,800 --> 00:20:41,120
So, this allows you to avoid loops. The other reason BGP is like this,

150
00:20:41,760 --> 00:20:47,360
anybody want to guess why? Remember, this is for the internet, right? Worldwide.

151
00:20:50,320 --> 00:20:50,880
Any idea?

152
00:20:54,080 --> 00:20:58,080
It's not a, it's not a trivial question. If you're not familiar with internet,

153
00:20:58,080 --> 00:21:00,160
individually, it has to do with politics.

154
00:21:00,160 --> 00:21:07,360
The internet covers the world. Right? Pretty much every country has access to the internet.

155
00:21:07,360 --> 00:21:10,240
Every country has at least one AS. At least one.

156
00:21:13,760 --> 00:21:15,920
Countries provide transit services, right?

157
00:21:18,480 --> 00:21:25,200
This explicit remuneration of the path is there so that countries can decide,

158
00:21:25,200 --> 00:21:28,800
oh, I don't want to take this path. I prefer this other path.

159
00:21:30,880 --> 00:21:36,960
Okay? So, for example, if you're sending packets, if you're sending traffic from here to India,

160
00:21:38,240 --> 00:21:43,120
maybe you don't want to transit Iran, even though they offer attractive transit service.

161
00:21:44,320 --> 00:21:50,240
Right? Or maybe if you're in South Korea and you want to go, you know, connect to Mongolia,

162
00:21:50,240 --> 00:21:56,560
you don't want to go through North Korea, even though they'll promise you amazing transit service.

163
00:21:57,680 --> 00:22:00,320
Okay? That's why.

164
00:22:01,200 --> 00:22:05,840
So, if this, if you have just distance vector that shows you the distance and the next path,

165
00:22:05,840 --> 00:22:11,360
you don't know the route, right? But when you, with path vector, which is what the GP is,

166
00:22:11,360 --> 00:22:16,160
you actually not only know the distance, but you also know the cost, but you also know the actual path.

167
00:22:16,720 --> 00:22:22,480
But the path is not at the level of ID routers. The path is at the level of domain.

168
00:22:24,080 --> 00:22:30,960
Does that make sense? Because you don't really care, and it's too much, it's really TMI to know which hops you'll take.

169
00:22:30,960 --> 00:22:37,520
What's important is which domains you will cross. In other words, who is going to look at your traffic?

170
00:22:37,520 --> 00:22:54,560
So, fundamentally, it works just like distance vector, right? The adjacent routers exchange

171
00:22:55,120 --> 00:23:00,000
their routing tables, but the routing tables also contain, you know, in addition to the distance,

172
00:23:00,000 --> 00:23:09,440
these paths, right? So, and you can have multiple paths, and there's another thing. You can, in fact,

173
00:23:09,440 --> 00:23:15,760
should have multiple paths for each destination, because you may prefer one path over another.

174
00:23:16,720 --> 00:23:21,360
Like, for example, if you have only one path to get to, I don't know, Mongolia, and it goes to North Korea,

175
00:23:22,000 --> 00:23:26,800
you don't have a choice. If you don't like North Korea, you don't communicate with Mongolia.

176
00:23:28,000 --> 00:23:33,760
But, you know, there is internet, it's very unlikely there is only one path, right? Maybe you can go

177
00:23:33,760 --> 00:23:42,960
through Russia. Could be a little safe, or not? I mean, you can go through, you know, Leos,

178
00:23:44,640 --> 00:23:49,600
low Earth orbit satellites. I gotta do that. Everybody's favorite, Elon Musk.

179
00:23:52,080 --> 00:23:59,520
That's a domain, by the way, right? The Starlink system is a domain, is an internet domain. It's just

180
00:23:59,520 --> 00:24:05,600
not on, it's not on this Earth, but it's still a domain, right? So, you communicate via the internet,

181
00:24:05,600 --> 00:24:09,840
you go, you go to the satellite, for the satellite, then you, you're transiting a satellite domain.

182
00:24:10,400 --> 00:24:10,880
It's barely.

183
00:24:15,280 --> 00:24:19,920
So, here's a BGP example, just that makes it a little bit, perhaps a little more. So, here we have a very

184
00:24:19,920 --> 00:24:25,440
small toy network, right? These are, these are domain, or ASs, right? Autonomic systems. So,

185
00:24:25,440 --> 00:24:32,160
not individual hosts. So, here we have, these are strangely connected networks, but the main thing

186
00:24:32,160 --> 00:24:37,360
is that, for example, AS2, right? The one in the middle, provides transit service for 7. It's

187
00:24:37,360 --> 00:24:44,000
a kind of a transit domain. So, basically, traffic to and from 7 goes through 2, except for 8, right?

188
00:24:44,000 --> 00:24:53,840
8 can reach 7. So, what does 2 advertise? 2 says, well, sorry, 7 says, hello, to its neighbors, right?

189
00:24:53,840 --> 00:24:58,560
I don't know how to reach anybody, but I'm 7, and I'm one hop away from you.

190
00:25:02,960 --> 00:25:10,000
And 2 says, to its neighbors, hello, I'm 2, and if you want to reach 7, you got to go for me,

191
00:25:10,000 --> 00:25:19,920
and the path is to 7. So, like, 1, the main 1 says, oh, if I want to go to 7, I have to,

192
00:25:19,920 --> 00:25:24,800
the path is first 2, then 7, and that's it, right? That's the path.

193
00:25:24,800 --> 00:25:34,080
The vector, right? And they, let's see, 3 and 6, in turn, also advertise to their neighbors,

194
00:25:34,080 --> 00:25:41,120
that if you want to go to 7, you got to go for them, right? So, 3 says to 4. You want to go to 7?

195
00:25:41,120 --> 00:25:48,400
That's me, right? And the path is 3, 2, 7. And 5 learns that the path to 7 is 6, 2, 7.

196
00:25:48,400 --> 00:25:53,920
You see the fundamental difference here. Sometimes it's not, it's not, it's a little subtle, right?

197
00:25:53,920 --> 00:25:59,760
So, in development 4, or the distance vector, path vector protocols, nobody computes the routes,

198
00:25:59,760 --> 00:26:05,840
like, from a graph. You follow? In link state, everybody actually gets a graph,

199
00:26:06,640 --> 00:26:12,560
information about the complete graph, and computes, cranks the, you know, the Dijkstra's protocol,

200
00:26:12,560 --> 00:26:17,520
and computes the route to every destination. Here, you don't compute the route. You kind of,

201
00:26:17,520 --> 00:26:25,360
like, adjust your tables. So, computationally, that's the claim, it's an argument going on for

202
00:26:25,360 --> 00:26:29,440
50 years among networking people and theory people, so which particle is better?

203
00:26:31,760 --> 00:26:39,920
Nobody knows, but one claim is that, oh, well, this one is computationally less costly, yeah?

204
00:26:42,240 --> 00:26:46,400
And so, finally, like, again, I'm not going to go through the whole example, but, you know,

205
00:26:46,400 --> 00:26:54,880
and then 5 says, oh, I'm 5, and sends to his neighbors, and then 6 re-advertises that,

206
00:26:54,880 --> 00:27:00,480
and then the 2 learns to get to 5, you have to go for 6, and then, et cetera, et cetera, right? Okay?

207
00:27:01,600 --> 00:27:02,400
Enough, right?

208
00:27:02,400 --> 00:27:11,440
So, everybody learns like that. So, this slide is, unfortunately, woefully outdated.

209
00:27:12,800 --> 00:27:18,240
I don't know, it's like 8 years old, at least. Sorry about that. But nothing is lower than what you see.

210
00:27:19,040 --> 00:27:29,920
Numbers are higher. So, BGP routing tables, 125,000 address prefixes, right? Typical BGP routing tables.

211
00:27:30,880 --> 00:27:35,520
That's not ASs. I mean, although routing is done at AS level, it's still prefixes, right?

212
00:27:35,520 --> 00:27:41,920
And these prefixes map to about 70,000 to 80,000. Map the paths. Why such disparity?

213
00:27:44,320 --> 00:27:50,880
Why there are, like, about a magnitude more prefix or IP prefixes than there are paths?

214
00:27:50,880 --> 00:28:10,400
Many prefixes live in the same AS, right? So, right, the IP prefixes, you know, at endpoints,

215
00:28:10,400 --> 00:28:19,280
right? We don't route to transit domains, right? Why would you, you know, normally, right? You don't

216
00:28:19,280 --> 00:28:26,640
communicate. There's no web server in a giant, fast, 500,000 dollar router in the middle of the internet.

217
00:28:27,360 --> 00:28:34,720
Right? You don't go to it. You go to the endpoints, yeah? Or CDNs, right? Sort of endpoints.

218
00:28:34,720 --> 00:28:43,120
Okay? So, that's one. There are way more destination prefixes than there are paths. So,

219
00:28:43,120 --> 00:28:47,600
many of them live in the same place. Like, UCI probably has a bunch of IP prefixes.

220
00:28:48,480 --> 00:28:53,440
But anybody who wants to route packets to UCI still uses the same path to get to them.

221
00:28:55,840 --> 00:29:00,800
I think that figure is about double. So, there are probably, like, 20,000 BGP routers.

222
00:29:01,360 --> 00:29:06,800
But mind you, when I say BGP routers, I mean border routers are all autonomous systems.

223
00:29:08,240 --> 00:29:14,480
And every autonomous system, right here, must have at least one if it's a stub autonomous system,

224
00:29:14,480 --> 00:29:18,800
meaning it's like the endpoint, right? And at least two if it provides transit services.

225
00:29:18,800 --> 00:29:25,120
But usually, if it provides transit services, like NISP is kind of a transit service, like COX

226
00:29:26,320 --> 00:29:29,600
or AT&T, they'll have hundreds of BGP routers.

227
00:29:31,680 --> 00:29:37,600
Okay. Again, there's probably about 3,000 ASs today. Don't know. You can probably look this up

228
00:29:37,600 --> 00:29:40,960
very quickly. Somebody should look up on Google and tell me how many ASs there are today.

229
00:29:41,680 --> 00:29:45,600
Definitely more than 2,000. But this information should be available.

230
00:29:46,880 --> 00:29:52,320
Some 6,000 or so. That probably did not change very much. But 6,000 organizations own prefixes,

231
00:29:52,320 --> 00:29:59,520
meaning they have registered prefixes that are assigned to them. There's parts of the IP address space

232
00:29:59,520 --> 00:30:08,080
that is fixed for them. And this is still the case, I believe. I think I recently saw a paper

233
00:30:08,080 --> 00:30:13,040
where they confirm that this is still the case. So what does that mean? It means on the internet,

234
00:30:13,040 --> 00:30:19,440
things are not as far as you think, in terms of like how many ASs you transit on the way to the

235
00:30:19,440 --> 00:30:29,920
destination. So think about it. This says an average route length for internet traffic is less than four.

236
00:30:29,920 --> 00:30:42,720
And this is length in terms of AS hops, not in terms of like IP router hops.

237
00:30:43,280 --> 00:30:50,480
IP router hops is my favorite number, but in terms of AS hops is less than four. And what it tells you is that

238
00:30:50,480 --> 00:30:58,320
there's the AS where the packet starts and AS where the packet ends. That's two.

239
00:31:00,400 --> 00:31:05,200
And there's at least one transit usually, right? Unless the two ASs are connected, which is usually

240
00:31:05,200 --> 00:31:12,080
not the case. But so there's like three is kind of a given. But then think about the real world,

241
00:31:12,080 --> 00:31:20,400
right? You could be connecting to like, I don't know, Solomon Islands, or Madagascar, or somewhere

242
00:31:20,400 --> 00:31:27,920
in the North Pole to a US Arctic station. And still, there may be AS paths that are longer, like six or

243
00:31:27,920 --> 00:31:33,840
seven, but the average is less than four, which means the average is like source domain, destination

244
00:31:33,840 --> 00:31:36,240
domain, and two transits in the middle. Yeah?

245
00:31:36,240 --> 00:31:41,920
But that happens to average most of my requests. I'm not going to the North Pole. I'm going probably

246
00:31:41,920 --> 00:31:49,200
somewhere within America. Okay, you are within the US. So you're going to

247
00:31:51,760 --> 00:31:53,040
Google, right?

248
00:31:55,920 --> 00:31:57,600
The route length is probably three.

249
00:31:59,840 --> 00:32:05,440
That's my guess. But you can do a tracer route, and from tracer route, not always, but you can often

250
00:32:05,440 --> 00:32:12,400
deduce how many AS hubs. Because tracer route might give you a reverse DNS lookup,

251
00:32:12,400 --> 00:32:18,240
which might actually give you that, not this VIP address of what hubs your packets are taking,

252
00:32:18,240 --> 00:32:25,040
but the actual host name. And so by the host name, you can tell the domain. And the domain often tells

253
00:32:25,040 --> 00:32:34,960
you that that's a different AS. Does that make sense? So it has to be that at least three, maybe four,

254
00:32:34,960 --> 00:32:41,920
you know? I mean, let's say you go to, I don't know, state of Florida government website, maybe it will

255
00:32:41,920 --> 00:32:49,760
be four in that case, you know? Or some small department in the University of Lower East South Dakota

256
00:32:49,760 --> 00:32:54,880
somewhere. Yeah. But that's my guess. But it has to be at least three.

257
00:32:54,880 --> 00:33:03,440
So, I don't know if it's surprising, most people get surprised by this, that it's such a small number

258
00:33:03,440 --> 00:33:10,880
of AS hubs. And 50% of the routes are less than four, and that's, tells you like that's the typical

259
00:33:10,880 --> 00:33:18,480
thing, right? Source domain, source AS, one transit, and the destination. 95 of them are less than five,

260
00:33:18,480 --> 00:33:25,440
five. Which means you really have to try hard to get, to hop through more than five domains.

261
00:33:29,200 --> 00:33:33,920
And mind you, internet includes, I think it also includes like cellular, for example,

262
00:33:33,920 --> 00:33:41,440
you're using your phone, right? And you don't have Wi-Fi access, or you're just not using Wi-Fi.

263
00:33:41,440 --> 00:33:47,760
But you're still using IP, right? And so you do IP over cellular. So you're still kind of,

264
00:33:47,760 --> 00:33:49,200
in fact, a part of the internet.

265
00:33:53,680 --> 00:33:54,400
Alright, so,

266
00:33:56,880 --> 00:34:03,760
a lot of problems in BGP, not just BGP, but other routing protocols, but BGP has been susceptible to it,

267
00:34:03,760 --> 00:34:08,080
is something called black-holing. Black-holing is when a router

268
00:34:08,080 --> 00:34:21,840
advertises routes that are too good. Right? And it's like, I have a distance one route to everyone.

269
00:34:24,000 --> 00:34:31,360
Okay? And so, what happens? Like bees and honey, right? To use a more polite analogy,

270
00:34:31,360 --> 00:34:42,000
everybody starts sending traffic to me. Okay? Which is problematic in two cases, right? First,

271
00:34:42,000 --> 00:34:48,000
if this happens accidentally, I get swamped. Clearly, right? Because everybody says, oh,

272
00:34:48,000 --> 00:34:54,720
forget all the other routes I have. This guy has route one distance to everybody. Must be amazing.

273
00:34:54,720 --> 00:35:01,760
So everybody starts sending traffic to me. There's congestion near me. I get totally, you know,

274
00:35:01,760 --> 00:35:07,440
strangled. Nobody can communicate to anybody, right? Because everybody's sending traffic to me

275
00:35:07,440 --> 00:35:14,480
that I can't handle. Right? So, big problem. Black-holing, right? But it can also be done

276
00:35:14,480 --> 00:35:20,000
maliciously. So it has happened accidentally. It has happened maliciously. When somebody says,

277
00:35:20,880 --> 00:35:27,920
I don't like this company over here. This, I don't know, this whistleblower.com. I don't like them.

278
00:35:29,120 --> 00:35:33,680
So I'm going to advertise a very low dislike. I'm one hop from whistleblower.com.

279
00:35:34,560 --> 00:35:38,880
So essentially, she's like, send me their traffic. Send me their traffic. So I can just discard it.

280
00:35:41,200 --> 00:35:47,920
Okay? This has happened as well. Back in prehistory, before you all were born, 97,

281
00:35:47,920 --> 00:35:53,840
was already after the birth of the web. That was the day the internet died. I remember it.

282
00:35:55,920 --> 00:36:03,920
This Florida ISP de-aggregated its BGP routing tables and basically re-agnetized it. It basically

283
00:36:03,920 --> 00:36:11,760
said what I just described. It said, I'm neighbors with everybody. Bam! The internet just crawled

284
00:36:11,760 --> 00:36:19,520
first like slow down like within seconds. Okay? So it has best route to everywhere on the internet.

285
00:36:19,520 --> 00:36:24,960
And of course, it has to happen in Florida. Right? The most intellectual state in the nation.

286
00:36:24,960 --> 00:36:36,000
Also, today, this is not the case, but the original BGP protocol or sort of the virgin BGP protocol,

287
00:36:36,000 --> 00:36:45,120
the vanilla one, has no security. Again, designed for a friendly internet, right? So no authentication,

288
00:36:45,120 --> 00:36:52,640
no integrity. Right? Today, it still doesn't, but there's something called BGP sec, which is the,

289
00:36:52,640 --> 00:36:58,560
like IP sec for BGP basically, kind of like. And it establishes secure tunnels

290
00:37:00,560 --> 00:37:05,280
between adjacent BGP routers. So it sends that updates over those secure tunnels.

291
00:37:06,560 --> 00:37:12,960
Now, that prevents somebody from injecting packets, right? Or modifying packets between two adjacent

292
00:37:12,960 --> 00:37:19,520
routers. But it does not prevent the malicious router from advertising, uh, from advertising valid,

293
00:37:19,520 --> 00:37:26,000
uh, sort of, uh, malicious routes because, you know, it's, it's, it has a secure connection.

294
00:37:26,880 --> 00:37:32,080
So this, this has happened a number of paths. So this is, uh, just for you to read.

295
00:37:32,080 --> 00:37:44,400
This is back in 2003, I think. So YouTube has been around for a long time, right? YouTube actually

296
00:37:44,400 --> 00:37:52,160
predates Google, even though Google owns it, uh, today. But, uh, so YouTube was popular already in

297
00:37:52,160 --> 00:38:00,080
early 2000. So YouTube advertises, see, this is IP prefix. You know, everyone knows this notation,

298
00:38:00,080 --> 00:38:06,720
you know, 22 bits, okay? Um, so it says here on YouTube, you know, and, uh, it's as an AS, right?

299
00:38:06,720 --> 00:38:10,960
It's called, you see there it says AS three, three, six, five, six, one, three, six, five, six, one,

300
00:38:10,960 --> 00:38:16,640
is the autonomous system ID assigned to YouTube. I think it's still in case today. Yeah.

301
00:38:16,640 --> 00:38:18,960
What do you mean by YouTube for names?

302
00:38:18,960 --> 00:38:24,320
Google. Well, I think YouTube was there. YouTube was a company.

303
00:38:24,320 --> 00:38:28,720
I think it came, like, seven years later. Like 2005, it was YouTube.

304
00:38:28,720 --> 00:38:33,920
Wait. 2008. Okay. Do a quick Wikipedia from here.

305
00:38:33,920 --> 00:38:37,520
I did. And? Google was 98. YouTube was 2005.

306
00:38:37,520 --> 00:38:42,320
Google was 98? Nobody heard of it until, like, 2003 or something.

307
00:38:42,320 --> 00:38:45,040
Sure. But even then, YouTube stole them.

308
00:38:45,040 --> 00:38:47,440
So it's later? Yeah, a little bit later.

309
00:38:47,440 --> 00:38:50,080
But it wasn't part of Google. No, it wasn't right now.

310
00:38:50,080 --> 00:38:51,440
Okay. So at least I got one thing right.

311
00:38:53,040 --> 00:39:00,000
Okay. Uh, so there's your YouTube advertising to the rest of the of the world that here I am.

312
00:39:00,000 --> 00:39:03,440
And here the Pakistani government decided that it doesn't like YouTube.

313
00:39:03,440 --> 00:39:09,920
And so a Pakistani ISP, right, telecom, telecom, that is 7557,

314
00:39:09,920 --> 00:39:12,720
advertising, see that 24?

315
00:39:17,440 --> 00:39:19,280
Right? 2865 and 52.

316
00:39:19,840 --> 00:39:22,240
So it basically says, I subsume.

317
00:39:22,480 --> 00:39:25,440
This is a, this is, this is saying, I subsume YouTube.

318
00:39:25,440 --> 00:39:31,520
So all worldwide YouTube traffic went to Pakistan.

319
00:39:33,280 --> 00:39:33,920
For a little bit.

320
00:39:34,800 --> 00:39:36,320
They had to manually intervene.

321
00:39:37,920 --> 00:39:39,440
And it was a two hour outage.

322
00:39:39,440 --> 00:39:40,320
People were incensed.

323
00:39:40,320 --> 00:39:44,320
Valuable videos were not watched.

324
00:39:48,320 --> 00:39:51,440
There were other incidents that one interesting one was the spammers.

325
00:39:52,400 --> 00:39:57,920
So we have a, if we get to it, because we're moving very slow in this class, but steady.

326
00:39:57,920 --> 00:40:00,080
If we get to it, there's a lecture on spam.

327
00:40:00,080 --> 00:40:07,200
But, you know, spammers hijacked a bunch of, a bunch of, kind of a segment of IP prefixes,

328
00:40:07,200 --> 00:40:12,240
allocated to Northrop Grumman, a company you might have heard of, defense company, very large,

329
00:40:12,240 --> 00:40:16,000
located here in Southern California, among other places.

330
00:40:16,720 --> 00:40:24,000
So it was an unused block of addresses that was allocated to Northrop Grumman since like 20 years

331
00:40:24,000 --> 00:40:26,240
before that, okay?

332
00:40:27,120 --> 00:40:31,120
They were, God knows what they were supposed to use it for, but it was allocated to them.

333
00:40:31,120 --> 00:40:34,880
Now, a bunch of spammers hijacked that.

334
00:40:36,000 --> 00:40:38,960
They just used those addresses to send spam.

335
00:40:40,960 --> 00:40:41,920
But guess what happened?

336
00:40:43,280 --> 00:40:46,880
I don't know if they intended it or not, but one, one important consequence is

337
00:40:47,520 --> 00:40:54,880
that because of their, there were already anti-spam measures, the entire block wound up on the, on the, on the, on the, basically blacklist.

338
00:40:56,560 --> 00:40:56,880
Okay?

339
00:40:58,400 --> 00:41:05,280
So, took two months to actually manually reclaim ownership of those addresses and remove them from the blacklist.

340
00:41:07,120 --> 00:41:12,160
Then there was this Malaysian ISP, also that hijacked the prefix of Yahoo.

341
00:41:12,160 --> 00:41:20,640
Nobody knows if it was accidental or political, not sure what Malaysia has against Yahoo, I don't think, probably it was accidental.

342
00:41:23,040 --> 00:41:28,800
This was more like, more likely to have been political, the Turkish ISP did this in 2004.

343
00:41:29,760 --> 00:41:33,520
But similar thing to what the Pakistan ISP did in a previous slide.

344
00:41:36,160 --> 00:41:39,280
This is a much more recent, this is only four years ago.

345
00:41:39,280 --> 00:41:42,320
Maybe you remember, there was a Facebook outage.

346
00:41:42,320 --> 00:41:51,920
And this was, this was accidental, but could have been malicious, but in this case, actually, no, Facebook, basically, itself, didn't do itself.

347
00:41:51,920 --> 00:41:56,480
It withdrew routes of, of, of its prefixes from the DNS servers.

348
00:41:57,280 --> 00:42:00,720
And basically, nobody could resolve Facebook addresses anymore.

349
00:42:02,400 --> 00:42:06,000
Which means, what, like, it's not that Facebook couldn't be accessed.

350
00:42:06,800 --> 00:42:08,160
Facebook was up and running.

351
00:42:09,120 --> 00:42:16,320
But if you type facebook.com, the DNS would not be able to tell you the IP address.

352
00:42:17,680 --> 00:42:18,000
Okay?

353
00:42:18,320 --> 00:42:22,880
So if you had cached, and some people did this, I remember there was a discussion on the forums.

354
00:42:23,120 --> 00:42:31,200
It's like, if you had actually cached the IP address of Facebook, that you could actually type the IP address in the URL, right?

355
00:42:31,200 --> 00:42:34,640
You do know that you can actually substitute the domain name with the IP address.

356
00:42:35,520 --> 00:42:37,680
In your, like, type it in, in your URL.

357
00:42:38,480 --> 00:42:39,760
Well, if you did that, it would work.

358
00:42:40,320 --> 00:42:42,480
But if you type in facebook.com, it wouldn't.

359
00:42:42,480 --> 00:42:46,320
Because, basically, Facebook shot itself in the book.

360
00:42:46,320 --> 00:42:49,360
But it happened, not because of DNS, it did happen because of BGP.

361
00:42:51,280 --> 00:42:51,520
Right?

362
00:42:51,520 --> 00:42:58,720
Because BGP, right, withdrew address prefixes for Facebook's DNS servers.

363
00:42:58,720 --> 00:43:05,760
And when you resolve facebook.com, you can sell Facebook DNS servers.

364
00:43:10,640 --> 00:43:10,960
Okay.

365
00:43:12,320 --> 00:43:12,960
Switch over.

366
00:43:13,840 --> 00:43:14,880
Domain name service.

367
00:43:14,880 --> 00:43:15,680
Nice transition.

368
00:43:17,280 --> 00:43:18,640
Designed by a guy from here.

369
00:43:20,400 --> 00:43:23,120
Got a PhD around 82, 83.

370
00:43:23,120 --> 00:43:26,240
In ICS.

371
00:43:27,840 --> 00:43:30,000
And I met him a bunch of times.

372
00:43:30,000 --> 00:43:34,800
In fact, I worked in the same organization that he, that he was for a few years.

373
00:43:35,680 --> 00:43:37,360
So a guy's name is Paul Macapetrius.

374
00:43:37,360 --> 00:43:39,200
He's kind of a serial entrepreneur these days.

375
00:43:39,200 --> 00:43:40,960
Not much of a researcher or a scientist.

376
00:43:40,960 --> 00:43:48,880
But back in the early 80s, he worked in a place up in Marina del Rey.

377
00:43:49,760 --> 00:43:51,680
Called Information Sciences Institute.

378
00:43:51,680 --> 00:43:54,000
Which is part of USC School of Engineering.

379
00:43:54,000 --> 00:43:56,080
And basically like a research used to be.

380
00:43:56,080 --> 00:43:57,440
Today it's just a development shop.

381
00:43:57,440 --> 00:43:59,760
But back then it was a research think tank.

382
00:44:00,640 --> 00:44:01,920
They did a lot of AI research.

383
00:44:01,920 --> 00:44:06,320
They did a lot of like defense optics and electronics research.

384
00:44:06,320 --> 00:44:07,520
And they did intern research.

385
00:44:07,520 --> 00:44:09,920
So some of the like IP for example.

386
00:44:09,920 --> 00:44:12,160
TCP IP were partly developed there.

387
00:44:12,960 --> 00:44:14,880
At this USC ISI.

388
00:44:15,600 --> 00:44:20,880
So this guy, Paul Macapetrius, he was a staff researcher there.

389
00:44:20,880 --> 00:44:24,000
And he, people say he invented DNS.

390
00:44:24,000 --> 00:44:25,600
There's no such thing as invented DNS.

391
00:44:25,600 --> 00:44:28,320
DNS is a architecture.

392
00:44:28,320 --> 00:44:33,360
What he did is that he realized that there was, the internet was growing.

393
00:44:33,360 --> 00:44:35,440
Even already then, like in the early 80s.

394
00:44:36,160 --> 00:44:43,520
And there needs to be a way to map the human readable host names.

395
00:44:44,160 --> 00:44:49,520
Like foob.bar.com into IP addresses like 128, 195, 2.3.

396
00:44:49,520 --> 00:44:51,040
Which nobody can remember.

397
00:44:51,040 --> 00:44:51,840
Right?

398
00:44:51,840 --> 00:44:53,040
Even back then it was a pain.

399
00:44:53,920 --> 00:44:56,480
So he's the one that sort of realized it first.

400
00:44:56,480 --> 00:44:59,680
And then came up with the first kind of cut implementation.

401
00:44:59,680 --> 00:45:01,360
Of what we today call DNS.

402
00:45:01,360 --> 00:45:03,440
Now DNS has evolved a lot.

403
00:45:03,440 --> 00:45:05,360
It's not like IP.

404
00:45:05,360 --> 00:45:10,320
IP kind of remained, IPv4 remained static since 1980 till what?

405
00:45:10,320 --> 00:45:12,640
Early 40, 45 years.

406
00:45:12,640 --> 00:45:14,160
But DNS evolved.

407
00:45:14,160 --> 00:45:16,400
But the idea behind it is the same.

408
00:45:16,400 --> 00:45:19,440
It's supposed to resolve, right?

409
00:45:19,440 --> 00:45:23,200
IP domain names or host names.

410
00:45:23,200 --> 00:45:25,280
And give you back IP addresses.

411
00:45:25,280 --> 00:45:29,840
It's a hierarchical system.

412
00:45:30,800 --> 00:45:31,120
Okay?

413
00:45:31,120 --> 00:45:33,520
And without it the internet would grind to a halt.

414
00:45:33,520 --> 00:45:33,760
Right?

415
00:45:33,760 --> 00:45:40,400
In the domain name service today, the domain name system is as important as a routing protocol.

416
00:45:40,400 --> 00:45:40,560
Right?

417
00:45:40,560 --> 00:45:42,720
So without routing, the internet dies.

418
00:45:42,720 --> 00:45:44,160
Without DNS, the internet dies.

419
00:45:44,160 --> 00:45:45,760
Not right away necessarily, right?

420
00:45:45,760 --> 00:45:51,520
Because if you cache some DNS addresses, you might not be able to.

421
00:45:51,520 --> 00:45:53,200
You might be able to use the internet for a little bit.

422
00:45:54,240 --> 00:45:55,280
So after a while, I'll be back.

423
00:45:56,240 --> 00:45:58,880
And there are a bunch of these.

424
00:45:58,880 --> 00:45:59,840
What's the root servers?

425
00:46:02,240 --> 00:46:06,240
Anyway, so root servers are like the gods of DNS.

426
00:46:06,240 --> 00:46:10,160
Like they know, they know stuff.

427
00:46:13,200 --> 00:46:14,960
And they are replicated, right?

428
00:46:14,960 --> 00:46:21,280
So they are replicated for fault tolerance and load distribution, load balancing, okay?

429
00:46:22,080 --> 00:46:22,800
Around the world.

430
00:46:23,760 --> 00:46:28,560
And they're not like, there's no like DI there.

431
00:46:28,560 --> 00:46:31,360
They're not trying to be equitable, right?

432
00:46:31,360 --> 00:46:31,920
Or fair.

433
00:46:31,920 --> 00:46:36,880
The reason they are where they are is because of like heavy internet communication.

434
00:46:37,520 --> 00:46:40,400
So they're not trying to say, oh, we should put one in Australia.

435
00:46:40,400 --> 00:46:41,760
Because Australia is a continent.

436
00:46:41,760 --> 00:46:43,360
We should put one in Africa.

437
00:46:43,360 --> 00:46:45,920
We should put one in, I don't know, Siberia.

438
00:46:45,920 --> 00:46:46,400
No.

439
00:46:46,400 --> 00:46:49,440
The idea is, where is the like heaviest communication?

440
00:46:50,400 --> 00:46:51,120
Right?

441
00:46:51,120 --> 00:46:58,640
So it's not driven by so much geopolitical or fairness doctrine, but rather practical stuff.

442
00:46:58,640 --> 00:47:00,240
But where is the traffic?

443
00:47:00,800 --> 00:47:01,920
Most of the traffic, right?

444
00:47:01,920 --> 00:47:04,800
So that's why you see nothing in South America.

445
00:47:05,920 --> 00:47:09,760
South America, as far as the internet goes, is not a powerhouse.

446
00:47:10,960 --> 00:47:11,600
Not a health.

447
00:47:11,600 --> 00:47:13,280
I mean, people obviously use the internet here.

448
00:47:13,920 --> 00:47:16,560
But not as heavily as other places.

449
00:47:16,560 --> 00:47:17,520
Africa, nothing.

450
00:47:18,720 --> 00:47:19,760
Australia, nothing.

451
00:47:21,360 --> 00:47:23,680
This whole chunk of Asia, right?

452
00:47:23,680 --> 00:47:25,520
Or Eurasia, nothing.

453
00:47:25,520 --> 00:47:26,640
But there is something in Japan.

454
00:47:28,800 --> 00:47:29,360
Okay?

455
00:47:29,360 --> 00:47:33,200
And that one must have been more historic, because Japan was one of the first to adopt the internet.

456
00:47:34,160 --> 00:47:37,440
Back in the 70s, or early 80s.

457
00:47:37,440 --> 00:47:43,200
So we have nearby this USCISI, the Marine and Array, that has two root services.

458
00:47:43,200 --> 00:47:48,480
One is actually operated by them, and then is operated by ICANN.

459
00:47:48,480 --> 00:47:51,120
Internet something authority.

460
00:47:51,120 --> 00:47:59,760
It's the organization, non-profit organization that manages essentially the gaming and all kinds of high-level issues for the internet.

461
00:47:59,760 --> 00:48:03,840
And then here, Northern California is a bunch, and then on the East Coast.

462
00:48:03,840 --> 00:48:07,360
Some of these are companies, Verisign and Cogent are companies.

463
00:48:07,360 --> 00:48:09,200
Verisign has been bought, I think.

464
00:48:09,200 --> 00:48:12,720
Then there is another very exciting.

465
00:48:12,720 --> 00:48:13,200
Okay?

466
00:48:13,200 --> 00:48:19,520
Then there is ARL Army Research Lab, US Department of Defense, University of Maryland, Grand One, etc.

467
00:48:19,520 --> 00:48:19,840
Okay?

468
00:48:19,840 --> 00:48:20,560
So you get to see.

469
00:48:20,560 --> 00:48:23,360
Then London has, and then Stockholm has something.

470
00:48:23,360 --> 00:48:29,680
So these are giant, I mean giant in terms of power, not in size, machines.

471
00:48:29,680 --> 00:48:33,760
They get a lot of traffic.

472
00:48:33,760 --> 00:48:35,680
They are super well connected.

473
00:48:35,680 --> 00:48:36,400
Okay?

474
00:48:36,400 --> 00:48:42,160
They have very high bandwidth wires, essentially, or lines connected to them.

475
00:48:42,160 --> 00:48:43,120
Multiple ones.

476
00:48:43,120 --> 00:48:43,360
Okay?

477
00:48:43,360 --> 00:48:46,800
So they should be able to withstand a lot of traffic.

478
00:48:48,480 --> 00:48:49,200
Simultaneously.

479
00:48:50,240 --> 00:48:50,560
Okay?

480
00:48:50,560 --> 00:49:00,320
And so there is this whole architecture for the root that I won't get into that essentially makes

481
00:49:00,320 --> 00:49:01,040
them fault tolerant.

482
00:49:01,040 --> 00:49:05,040
So there have been a number of attacks trying to take down, because if you take down the root service,

483
00:49:05,040 --> 00:49:06,000
you bring down DNS.

484
00:49:08,160 --> 00:49:09,600
But they're very hard to take down.

485
00:49:11,920 --> 00:49:14,000
So what is the root, right?

486
00:49:14,000 --> 00:49:16,240
So remember I showed you a bunch of them, right?

487
00:49:16,240 --> 00:49:18,320
But every root is essentially the same.

488
00:49:18,320 --> 00:49:24,480
There is a root DNS server that is responsible for what's called the dot domain.

489
00:49:26,320 --> 00:49:26,800
The dot.

490
00:49:28,960 --> 00:49:32,320
And then below the dot, you have the top level domains.

491
00:49:33,600 --> 00:49:47,840
Like .com, .net, .org, .iju, etc., .tw for Taiwan, .jp for Japan, .au for Australia.

492
00:49:47,840 --> 00:49:50,080
There are others, there are others like that, okay?

493
00:49:50,080 --> 00:49:51,520
National level domains.

494
00:49:51,520 --> 00:49:53,280
But these are top.

495
00:49:54,720 --> 00:49:57,120
And then .com will be like here, right?

496
00:49:57,120 --> 00:49:58,720
Google.com, etc., etc.

497
00:49:58,720 --> 00:50:02,640
These are authoritative domains for like organizations.

498
00:50:04,640 --> 00:50:07,360
WordPress, Wikipedia, Harvard, etc., right?

499
00:50:07,360 --> 00:50:09,440
So UCI would be under HTML, of course.

500
00:50:09,440 --> 00:50:15,600
And then, yeah, I'm not showing you all the levels that were the hierarchy, because obviously,

501
00:50:16,960 --> 00:50:19,680
actually, UC.edu would be here.

502
00:50:19,680 --> 00:50:21,360
Maybe UCI would be under UC.

503
00:50:24,560 --> 00:50:25,360
Not sure about that.

504
00:50:26,320 --> 00:50:27,040
Don't quote me.

505
00:50:27,040 --> 00:50:31,520
How does a DNS actually work?

506
00:50:31,520 --> 00:50:37,040
Well, when you type in a human readable post name, okay?

507
00:50:37,040 --> 00:50:44,240
Whether it's facebook.com, google.com, you know, dailymail.com.uk, whatever the heck.

508
00:50:44,240 --> 00:50:52,960
Whatever it is you type it in, you have in your device, not in your browser.

509
00:50:52,960 --> 00:50:53,920
It's not part of your browser.

510
00:50:53,920 --> 00:50:55,520
It's in your device.

511
00:50:55,520 --> 00:50:56,960
You have the network configuration.

512
00:50:56,960 --> 00:50:58,880
How many of you have to look at network configuration?

513
00:51:00,720 --> 00:51:01,920
Oh, nobody's still curious?

514
00:51:01,920 --> 00:51:02,640
They do.

515
00:51:02,640 --> 00:51:02,880
Okay.

516
00:51:03,520 --> 00:51:09,680
Well, you know, when you look in your Mac or your Windows machine, it will tell you like,

517
00:51:09,680 --> 00:51:11,600
okay, here's your ID address, right?

518
00:51:13,520 --> 00:51:13,760
Okay?

519
00:51:14,320 --> 00:51:15,120
Here's your router.

520
00:51:15,920 --> 00:51:16,480
It's all there.

521
00:51:17,520 --> 00:51:21,200
It will also tell you, here's your DNS server.

522
00:51:21,200 --> 00:51:26,080
It's usually configured, like, when you connect to the wireless, it's configured dynamically.

523
00:51:26,080 --> 00:51:27,680
You can also configure it manually.

524
00:51:28,640 --> 00:51:32,640
Like, you can put, I don't know, 8888, I think that's the Google DNS, right?

525
00:51:33,200 --> 00:51:37,120
You can configure it manually or you can do it, you can just get it from the network,

526
00:51:37,120 --> 00:51:39,280
from the local network that you are connected to.

527
00:51:41,040 --> 00:51:44,480
Anyway, so this is your, what's called, local DNS recursive resolver.

528
00:51:45,360 --> 00:51:50,560
This is the DNS agent essentially you go to for all your queries.

529
00:51:51,920 --> 00:51:52,960
You don't go to the root.

530
00:51:54,720 --> 00:51:55,280
Okay?

531
00:51:55,280 --> 00:51:58,880
Because you don't know its address and even if you did, you wouldn't talk to it.

532
00:51:59,760 --> 00:52:04,800
So you come to the DNS resolver and it says, oh, I want to resolve WWICS UCIEDU.

533
00:52:05,360 --> 00:52:06,000
I don't know.

534
00:52:07,040 --> 00:52:08,080
I don't know what that is.

535
00:52:09,520 --> 00:52:10,160
Not always.

536
00:52:10,160 --> 00:52:12,400
Sometimes it does already, if it's cached.

537
00:52:12,960 --> 00:52:15,040
But it says, generally it says, I don't know what this is.

538
00:52:15,920 --> 00:52:16,960
But let me ask the root.

539
00:52:16,960 --> 00:52:18,240
The root is God.

540
00:52:18,240 --> 00:52:19,520
So God should know.

541
00:52:20,240 --> 00:52:22,720
So he goes, WWICS UCIEDU, can you tell me?

542
00:52:22,720 --> 00:52:26,480
And he says, no, but I give you a nameserver record.

543
00:52:26,480 --> 00:52:27,440
This is what NSD is.

544
00:52:27,440 --> 00:52:30,960
So here's a record for UCIEDU, which I've heard of.

545
00:52:30,960 --> 00:52:33,520
Okay?

546
00:52:35,520 --> 00:52:39,840
Then, I'm a bit abstracting it here, because actually at the top there, there might be like

547
00:52:39,840 --> 00:52:43,120
root and root will give you a pointer to EDU server.

548
00:52:43,120 --> 00:52:43,600
Okay?

549
00:52:43,600 --> 00:52:45,120
But then I'm abstracting it away.

550
00:52:45,120 --> 00:52:48,720
Then it says, okay, here is a, and nameserver record to UCIEDU.

551
00:52:48,720 --> 00:52:54,240
So you go here, you get this back, and then you quickly say, okay, now I can contact UCIEDU.

552
00:52:54,240 --> 00:52:58,080
So I tell it, hey, I'm trying to resolve ICS UCIEDU.

553
00:52:58,080 --> 00:53:02,480
And it returns to you the nameserver record.

554
00:53:02,480 --> 00:53:04,000
It says, yeah, I'm UCIEDU.

555
00:53:04,000 --> 00:53:05,760
I know about ICS UCIEDU.

556
00:53:05,760 --> 00:53:07,360
Here is its address.

557
00:53:08,400 --> 00:53:13,040
So you go here, and you say, I want to resolve WWICS UCIEDU.

558
00:53:13,040 --> 00:53:17,280
And he says, oh, well, I do know WWS, the web server for ICS.

559
00:53:17,920 --> 00:53:21,440
And it returns to you the actual IP address.

560
00:53:21,440 --> 00:53:28,160
So this, as you see, is not an easy, like, ask a query, get back a reply.

561
00:53:28,720 --> 00:53:30,400
It's a set of recursive queries.

562
00:53:32,560 --> 00:53:33,360
How many?

563
00:53:33,360 --> 00:53:33,840
Depends.

564
00:53:35,200 --> 00:53:36,960
There are some hierarchies that are quite deep.

565
00:53:36,960 --> 00:53:40,320
So it may go on for more than three handshakes like this.

566
00:53:41,200 --> 00:53:46,480
That's why sometimes when you type, and the internet is not down, but you can see that there's a delay.

567
00:53:47,440 --> 00:53:47,760
Right?

568
00:53:47,760 --> 00:53:48,400
Have you seen that?

569
00:53:49,600 --> 00:53:52,880
You're connected, the internet is working fine, but there's this delay.

570
00:53:53,680 --> 00:53:56,160
And the delay is typically not because of your loading pages.

571
00:53:56,960 --> 00:54:12,480
It's, I mean, it can be, but more often than not, the delays become DNS.

572
00:54:16,480 --> 00:54:18,320
Okay.

573
00:54:19,120 --> 00:54:25,920
Now, to reduce the load on DNS servers, which, as you can imagine, are very busy bees, right?

574
00:54:25,920 --> 00:54:26,720
Because they're popular.

575
00:54:26,720 --> 00:54:29,360
Everybody goes to the DNS servers.

576
00:54:30,160 --> 00:54:33,760
So to reduce the load, the responses are cached.

577
00:54:33,760 --> 00:54:46,720
So your local resolver here, this local DNS recursive resolver, will keep a cache of recent responses.

578
00:54:48,320 --> 00:54:48,880
Okay?

579
00:54:48,880 --> 00:54:51,920
How this cache is maintained depends on something called TTL, time to live.

580
00:54:51,920 --> 00:55:00,080
It could be, it could be your ISP.

581
00:55:01,760 --> 00:55:06,240
Because, like, when you go home, right, and you connect, I don't know if you, there's a wire,

582
00:55:06,240 --> 00:55:09,440
wire also connecting in a dorm or, let's say you go to your parents' home, okay?

583
00:55:10,400 --> 00:55:12,320
You have an, they have an ISP probably, right?

584
00:55:12,320 --> 00:55:14,960
I mean, they're, they're buying internet from somebody, right?

585
00:55:14,960 --> 00:55:21,120
And when you, when you open your laptop, the DNS resolver's name will be, will be in the configuration.

586
00:55:21,120 --> 00:55:21,920
I usually there.

587
00:55:22,960 --> 00:55:25,360
It is possible to run the DNS resolver locally.

588
00:55:26,400 --> 00:55:30,160
You can run, install a DNS resolver on your local machine.

589
00:55:31,600 --> 00:55:34,000
I don't recommend it necessarily, because you need to know what you're doing.

590
00:55:34,000 --> 00:55:34,400
Yeah?

591
00:55:34,400 --> 00:55:34,800
Yeah.

592
00:55:34,800 --> 00:55:43,920
Because we can choose our DNS resolver by ourselves, can we choose the AS for the BGP routing path?

593
00:55:43,920 --> 00:55:44,640
No.

594
00:55:44,640 --> 00:55:45,440
No, you may not.

595
00:55:46,080 --> 00:55:49,840
Because you don't route at the ASL, you don't run BGP.

596
00:55:52,960 --> 00:55:58,480
The, if you are, let's say, customer of Cox.net, of Cox, internet, right?

597
00:55:58,480 --> 00:56:00,560
Or AT&T, they pick it around.

598
00:56:01,840 --> 00:56:02,560
Right?

599
00:56:02,560 --> 00:56:09,760
Which AS, so you don't have, if they decide to send packets through North Korea, you have no control.

600
00:56:11,920 --> 00:56:13,120
They have control.

601
00:56:13,120 --> 00:56:18,320
They can say, I want to, I want to send packets through, I don't know, New Zealand instead of North Korea.

602
00:56:18,320 --> 00:56:21,120
They can prefer one or the other, but you have no control.

603
00:56:23,120 --> 00:56:27,760
Okay, so, as I said, the responses are cached.

604
00:56:28,560 --> 00:56:31,280
And this is like sometimes, you know how you mistype something?

605
00:56:32,080 --> 00:56:36,720
Mistype an address and it goes, name not, host not found or something.

606
00:56:37,280 --> 00:56:41,840
And you keep clicking return and it just like, it doesn't, it very quickly does host not found, host not found.

607
00:56:41,840 --> 00:56:43,200
Because it cached.

608
00:56:44,240 --> 00:56:48,800
It doesn't want to bother the DNS server just to find out that host not found.

609
00:56:50,240 --> 00:56:51,200
So that's one reason.

610
00:56:51,200 --> 00:56:54,000
The other reason is if you are going to, you know, communicate to the same host.

611
00:56:54,000 --> 00:56:58,160
Like if you're going to Facebook multiple times, it doesn't need to resolve it every single time.

612
00:56:58,800 --> 00:56:58,880
Right?

613
00:56:58,880 --> 00:57:02,480
You can just like, cache it in the local resolver and tell you.

614
00:57:02,480 --> 00:57:03,920
It's faster that way.

615
00:57:04,800 --> 00:57:05,120
All right.

616
00:57:05,120 --> 00:57:09,440
So that's called negative queries, right?

617
00:57:09,440 --> 00:57:10,320
They're cached.

618
00:57:10,880 --> 00:57:14,160
Cached records are timed out periodically.

619
00:57:14,160 --> 00:57:18,400
The time to live is subject to what the DNS tells you.

620
00:57:18,400 --> 00:57:23,600
Okay, so DNS server that returns a particular record tells you.

621
00:57:23,600 --> 00:57:29,840
Okay, here's the IP or here's the IP address for this host name.

622
00:57:29,840 --> 00:57:33,360
You can cache this for whatever, 200 seconds.

623
00:57:34,480 --> 00:57:34,720
Okay?

624
00:57:35,840 --> 00:57:39,600
Or here's an IP address for something else and you can cache it for 10 seconds.

625
00:57:39,600 --> 00:57:42,240
So it has a TTL field, every cache.

626
00:57:45,920 --> 00:57:49,840
And so here it will say, it's just another example of a query.

627
00:57:52,160 --> 00:57:56,960
It will tell you that here the TTL might be already there, right?

628
00:57:56,960 --> 00:57:57,920
And ICS.

629
00:57:57,920 --> 00:58:01,920
You might not need to go to the root, right?

630
00:58:03,360 --> 00:58:08,320
And the reason is before, remember the previous example where we're looking at WWICSUCID?

631
00:58:08,720 --> 00:58:12,640
Well, the local resolver, after that, having done that,

632
00:58:13,280 --> 00:58:15,440
already knows that you don't need to go to the root.

633
00:58:15,440 --> 00:58:16,880
You don't need to go to the ICSUCID.

634
00:58:16,880 --> 00:58:22,480
You can just go to ICS-CCID that will resolve everything that ends with ICS-CCID.

635
00:58:23,680 --> 00:58:31,040
So because we already resolved WWW, we can just resolve FTP ICS-CCID by going directly here.

636
00:58:32,720 --> 00:58:33,040
Right?

637
00:58:33,040 --> 00:58:33,920
Because we cached.

638
00:58:34,960 --> 00:58:37,840
So this slide connects to one of the previous slides, right?

639
00:58:38,320 --> 00:58:40,400
Where I showed how to resolve WWW.

640
00:58:42,960 --> 00:58:43,600
All right.

641
00:58:43,600 --> 00:58:46,720
So DNS by itself has no security.

642
00:58:47,680 --> 00:58:52,880
It, how does it know, like, when a local resolver issues a query, right?

643
00:58:52,880 --> 00:58:58,240
It says to the root review server, it says here, here's WWICSUCID.

644
00:58:58,240 --> 00:58:59,680
You give me the idea, guys.

645
00:58:59,680 --> 00:59:03,520
How does it know that the reply is to that query?

646
00:59:03,520 --> 00:59:06,640
Because it might actually, the local resolver might issue many queries.

647
00:59:06,640 --> 00:59:15,440
So, the way it's done, the sort of primitive authentication, there is a 16-bit transaction ID

648
00:59:16,320 --> 00:59:18,720
that every query contains, okay?

649
00:59:19,600 --> 00:59:23,600
So local resolver issues a query includes a 16-bit transaction ID.

650
00:59:23,600 --> 00:59:28,080
When it comes back, it should have the same transaction ID that allows it to associate.

651
00:59:29,200 --> 00:59:30,240
Request with reply.

652
00:59:33,840 --> 00:59:34,400
Make sense?

653
00:59:35,360 --> 00:59:37,120
Kind of a primitive authentication.

654
00:59:37,120 --> 00:59:44,880
Now, it's obviously insecure, because if you have an adversary, it can do the following.

655
00:59:45,840 --> 00:59:50,080
Again, this is like the classical example of DNS proofing.

656
00:59:50,080 --> 00:59:56,560
So, I want you to consider an adversary that has a specific victim in mind.

657
00:59:56,560 --> 00:59:58,800
Now, let's say him.

658
01:00:00,240 --> 01:00:02,400
So, this guy's going to be the victim.

659
01:00:02,400 --> 01:00:03,360
Yeah, you, sorry.

660
01:00:06,000 --> 01:00:06,800
I know his name.

661
01:00:06,800 --> 01:00:08,720
Let's say his name is Joe, right?

662
01:00:09,440 --> 01:00:10,400
Joe is my victim.

663
01:00:10,800 --> 01:00:12,400
I know Joe's email address.

664
01:00:14,560 --> 01:00:20,320
I'm going to send him an, or maybe a phone phone, even better, a cell phone.

665
01:00:22,240 --> 01:00:24,320
Either or, but cell phone is better.

666
01:00:25,280 --> 01:00:31,920
I can send him either a text with a link, or an email with a link, right?

667
01:00:33,680 --> 01:00:38,000
You know, I am the widow of the prince of Nigeria.

668
01:00:38,560 --> 01:00:43,040
You know, I'm about to transfer you $5 million, but just send me your bank account,

669
01:00:43,040 --> 01:00:46,320
and if you want details, I'm going to share my fortune with you.

670
01:00:46,960 --> 01:00:53,600
So, basically, the idea is that he is to get him to click on a link.

671
01:00:55,120 --> 01:00:55,760
Okay?

672
01:00:55,760 --> 01:01:02,800
And the link will have some innocuous looking address, like host1 at foo.com,

673
01:01:02,800 --> 01:01:05,760
where foo.com could be a totally benign domain, okay?

674
01:01:05,760 --> 01:01:12,400
Benign, not necessarily adversarial domain, right?

675
01:01:12,400 --> 01:01:14,080
It could be a bank, for example.

676
01:01:15,840 --> 01:01:16,560
So, he clicks.

677
01:01:16,560 --> 01:01:21,520
The clicking on that link will cause a DNS lookup, right?

678
01:01:22,640 --> 01:01:26,160
Extract the name, the host name, the domain name, and do a DNS lookup.

679
01:01:26,160 --> 01:01:29,520
So, that's him, Joe.

680
01:01:30,560 --> 01:01:30,960
Client.

681
01:01:32,080 --> 01:01:34,880
Whether he clicks on an SMS, a link, an SMS, right?

682
01:01:34,880 --> 01:01:38,320
Or, iMessage, or WhatsApp, doesn't matter, right?

683
01:01:38,320 --> 01:01:39,120
Or, an email.

684
01:01:39,120 --> 01:01:44,000
But the interesting part here is that I know about the time that he does that.

685
01:01:45,120 --> 01:01:50,560
That's why I say SMS is preferred, or text is preferred, because if I know he's a curious

686
01:01:50,560 --> 01:01:54,240
George, he's going to like, I'm going to send him, and very quickly, he's going to click.

687
01:01:54,240 --> 01:01:58,240
And, fishers know how to do this.

688
01:02:00,640 --> 01:02:08,000
So, now what I do, as an adversary, I know that he's going to issue a DNS query to a local resolver,

689
01:02:08,000 --> 01:02:13,920
so resolve host1 foo.com, right?

690
01:02:14,640 --> 01:02:23,920
The local resolver says, oh, let me go to the name server for foo.com, okay?

691
01:02:24,240 --> 01:02:31,120
There's some, I'm skipping the root and the .com, et cetera, right?

692
01:02:31,120 --> 01:02:32,880
I'm just going to the root, to the last bit, et cetera.

693
01:02:33,600 --> 01:02:33,920
Okay.

694
01:02:35,440 --> 01:02:38,720
Now, at this point, or at that time, roughly that time,

695
01:02:40,400 --> 01:02:43,680
the adversary makes a guess of their transaction ID.

696
01:02:45,040 --> 01:02:48,400
Remember, each DNS query has a transaction ID, 16 bits.

697
01:02:49,200 --> 01:02:51,520
2 to the 16, not a small number, right?

698
01:02:51,520 --> 01:02:55,760
How big is this, 32,000?

699
01:02:57,680 --> 01:02:58,400
Something like that.

700
01:03:00,080 --> 01:03:05,680
So, your probability of guessing the correct transaction ID is low, right?

701
01:03:05,680 --> 01:03:16,240
So, what the adversary does, he doesn't know the transaction ID, because we're not assuming

702
01:03:16,240 --> 01:03:20,960
the adversary is actually nearby and listening, right?

703
01:03:20,960 --> 01:03:23,840
In this example, this is why this attack is interesting.

704
01:03:23,840 --> 01:03:25,520
The adversary could be very far away.

705
01:03:25,520 --> 01:03:33,280
Like, Joe would be working for a defense counter or a government agency before.

706
01:03:34,320 --> 01:03:35,600
I'm not anywhere near him.

707
01:03:36,160 --> 01:03:39,440
I cannot snoop on this.

708
01:03:39,440 --> 01:03:46,560
If I snoop, I wouldn't need to guess, right?

709
01:03:46,560 --> 01:03:50,160
But I don't snoop, which makes the attack more interesting.

710
01:03:51,200 --> 01:03:55,760
So, what I do is I guess a transaction ID, and I generate a fake reply.

711
01:03:57,120 --> 01:03:58,080
See that first one?

712
01:03:58,080 --> 01:03:59,200
Guess transaction ID.

713
01:03:59,200 --> 01:04:00,960
HostFood.com is at 6666.

714
01:04:02,400 --> 01:04:03,120
Make another guess.

715
01:04:04,480 --> 01:04:04,960
Okay?

716
01:04:04,960 --> 01:04:06,400
Another transaction ID.

717
01:04:06,400 --> 01:04:08,240
HostFood.com is at 6666.

718
01:04:08,960 --> 01:04:09,200
Okay?

719
01:04:10,240 --> 01:04:15,680
So, I can generate a very large number of these kind of guessed transaction ID replies.

720
01:04:17,680 --> 01:04:18,640
Not infinite, right?

721
01:04:18,640 --> 01:04:20,640
I mean, I cannot generate maybe 32,000.

722
01:04:20,640 --> 01:04:26,240
Maybe I can generate a couple of hundred in close proximity and send them to the victim, to Joe.

723
01:04:28,800 --> 01:04:29,120
Bam.

724
01:04:31,120 --> 01:04:41,360
Now, eventually, this DNS server will reply with a correct IP address for Foo.com, as it's supposed to.

725
01:04:41,360 --> 01:04:42,640
This is not malicious.

726
01:04:44,240 --> 01:04:47,920
This is a good reply, appropriate for that query.

727
01:04:47,920 --> 01:04:51,520
But do you see what the problem happens?

728
01:04:52,560 --> 01:05:02,320
If the adversary, in one of these guesses, guesses correctly, and beats the reply from the actual DNS server,

729
01:05:03,200 --> 01:05:04,160
he wins the game.

730
01:05:05,840 --> 01:05:08,000
Very important that you see that.

731
01:05:10,160 --> 01:05:10,480
Do you?

732
01:05:11,200 --> 01:05:12,000
Not ask.

733
01:05:12,000 --> 01:05:18,800
All the adversary needs to do.

734
01:05:18,800 --> 01:05:21,520
Now, I know, the bar is high, but the adversary needs to do this.

735
01:05:22,080 --> 01:05:25,920
Guess the correct, so the transaction ID guessed by the adversary must match this.

736
01:05:28,480 --> 01:05:34,240
And the, one of the red replies from the adversary, right, must come before this one.

737
01:05:35,200 --> 01:05:36,560
Before the legitimate reply.

738
01:05:37,840 --> 01:05:39,200
It's a probabilistic game.

739
01:05:41,040 --> 01:05:41,440
Okay?

740
01:05:41,440 --> 01:05:42,640
The adversary may lose.

741
01:05:43,760 --> 01:05:44,240
There is.

742
01:05:45,520 --> 01:05:49,040
But if he wins one of a hundred, the rewards are interesting.

743
01:05:49,040 --> 01:05:57,440
He can try to guess as fast as possible.

744
01:05:57,440 --> 01:05:59,120
He can pre-compute the guesses, right?

745
01:05:59,760 --> 01:06:00,880
He doesn't need to, right?

746
01:06:00,880 --> 01:06:03,760
He just, like, can pre-compute random replies, right?

747
01:06:03,760 --> 01:06:05,600
And send them all at the same time.

748
01:06:05,600 --> 01:06:06,720
Or roughly at the same time.

749
01:06:06,720 --> 01:06:08,000
Bam, bam, bam, bam, bam.

750
01:06:08,000 --> 01:06:09,200
As fast as possible.

751
01:06:09,200 --> 01:06:13,120
Now, he doesn't know exactly when the client generates this query.

752
01:06:13,120 --> 01:06:15,280
But he can guess, right?

753
01:06:16,000 --> 01:06:18,880
Like, I send him an SMS, and I know the kind of person he is.

754
01:06:18,880 --> 01:06:20,640
Like, maybe I know something about you.

755
01:06:20,640 --> 01:06:22,880
Like, I know you replied to SMS quickly, right?

756
01:06:24,080 --> 01:06:27,280
I know you're going to click it for the next five seconds, right?

757
01:06:27,280 --> 01:06:27,680
Like this.

758
01:06:27,680 --> 01:06:30,160
So, in those five seconds, I start generating those replies.

759
01:06:31,680 --> 01:06:35,440
You, if you don't expect those replies, you'll just throw them away.

760
01:06:36,480 --> 01:06:38,320
Your laptop, your phone will just ignore them.

761
01:06:38,320 --> 01:06:39,680
You, as a user, will not know.

762
01:06:39,680 --> 01:06:41,680
Right?

763
01:06:41,680 --> 01:06:48,800
Because whenever unsolicited DNS replies arrive at your computer or your phone,

764
01:06:48,800 --> 01:06:50,080
you, as a user, are not notified.

765
01:06:50,080 --> 01:06:50,880
They're just thrown away.

766
01:06:51,760 --> 01:06:52,960
Because nobody's expecting them.

767
01:06:52,960 --> 01:06:53,680
So they're thrown out.

768
01:06:54,880 --> 01:06:58,640
But if one of them comes back and matches the transaction ID, bam,

769
01:06:59,680 --> 01:07:03,520
the real one will be ignored because it will arrive later.

770
01:07:03,520 --> 01:07:11,360
So, if the attacker loses the game, he has to wait until the TTL, the time to live,

771
01:07:11,360 --> 01:07:14,080
and this legitimate reply expires.

772
01:07:14,800 --> 01:07:16,080
But the attacker is a patient.

773
01:07:18,480 --> 01:07:19,360
You can try again.

774
01:07:19,360 --> 01:07:23,600
HostFoo.com, Host3Foo.com, et cetera.

775
01:07:23,600 --> 01:07:25,040
But why do that, right?

776
01:07:26,160 --> 01:07:26,480
Right?

777
01:07:27,440 --> 01:07:29,520
What's the point of hijacking that?

778
01:07:29,520 --> 01:07:33,520
What's the point of getting somebody to click on HostFoo.com?

779
01:07:34,560 --> 01:07:35,680
Or Foo.com at all?

780
01:07:35,680 --> 01:07:39,520
And that is actually pretty easy.

781
01:07:39,520 --> 01:07:45,840
So, the idea is that Foo.com could be a legitimate entity, like a bank or insurance company,

782
01:07:45,840 --> 01:07:47,760
a university, or so on.

783
01:07:47,760 --> 01:07:52,720
So, if you trick and succeed, right?

784
01:07:52,720 --> 01:08:00,560
If you trick the client and actually guess the correct transaction ID, you can put a very long time to live.

785
01:08:00,560 --> 01:08:04,960
Very long, maximum possible.

786
01:08:05,840 --> 01:08:15,280
And now you know that whenever the client goes to anything, Foo.com, he's going to reuse the cash entry.

787
01:08:17,040 --> 01:08:17,440
Aha.

788
01:08:18,720 --> 01:08:29,600
So, now, the reply actually could be, I don't know where Host1Foo.com is, but I know the authoritative nameset report.

789
01:08:31,280 --> 01:08:33,040
So, this is like raising the bar a little bit.

790
01:08:33,040 --> 01:08:43,520
Instead of telling the, no, no, here's the host one, Foo.com, it says the authoritative nameserver lives at NS2Foo.com,

791
01:08:44,720 --> 01:08:46,640
and its address is 6666.

792
01:08:51,440 --> 01:08:56,000
Okay, so this is slightly different from what I showed in the previous slide.

793
01:08:56,000 --> 01:09:01,280
The previous slide, what you saw is the tricking once, right, for one host.

794
01:09:02,080 --> 01:09:05,440
Basically saying, oh, host1Foo.com lives at 6666.

795
01:09:07,360 --> 01:09:08,720
This is a much broader scope.

796
01:09:08,720 --> 01:09:12,880
This attack, which is very similar, but it's broader scope.

797
01:09:12,880 --> 01:09:19,360
It says, if you guess the correct transaction ID, you can make sure that this client, from now on,

798
01:09:19,360 --> 01:09:26,080
when it resolves anything, Foo.com, will go to adversarially controlled nameserver,

799
01:09:26,080 --> 01:09:28,560
which is run by the adversarially.

800
01:09:28,560 --> 01:09:30,560
Which is run by the adversarially there.

801
01:09:30,560 --> 01:09:39,840
So now, if you win the race, this reply, legitimate reply, will be ignored, discarded.

802
01:09:39,840 --> 01:09:50,960
And the attacker essentially will make sure that all subsequent, all future DNS requests for anything,

803
01:09:51,520 --> 01:09:54,960
anything.foo.com, will go to 6666.

804
01:09:56,320 --> 01:10:01,680
A malicious DNS server, fully controlled by the adversary, no need to win any future races.

805
01:10:01,680 --> 01:10:03,760
Okay?

806
01:10:04,720 --> 01:10:06,800
So much better investment of time for the adversary.

807
01:10:08,800 --> 01:10:09,200
All right.

808
01:10:11,360 --> 01:10:14,400
By the way, what can cause a DNS lookup?

809
01:10:15,360 --> 01:10:17,520
Maybe you already know this, but just about anything.

810
01:10:18,240 --> 01:10:20,320
A small ad in a webpage.

811
01:10:21,360 --> 01:10:21,680
Okay?

812
01:10:22,480 --> 01:10:22,880
Tiny.

813
01:10:24,000 --> 01:10:25,280
You don't need JavaScript.

814
01:10:25,840 --> 01:10:30,880
If JavaScript is enabled, it's easy, much easier, but you don't even need JavaScript.

815
01:10:31,680 --> 01:10:39,600
But, like, a DNS hello, mail, oh, mail servers.

816
01:10:39,600 --> 01:10:44,560
Mail servers are a pain in the ass, because, you know, if your mail servers will look up a lot of,

817
01:10:44,560 --> 01:10:46,640
do a lot of DNS queries, right?

818
01:10:48,640 --> 01:10:50,640
Telnet does a lot of DNS queries.

819
01:10:50,640 --> 01:10:53,040
Spam checks do DNS queries.

820
01:10:55,040 --> 01:10:57,600
Files, deliveries, all kinds of stuff.

821
01:10:57,600 --> 01:11:03,360
So, triggering the DNS query is easy, but the best example I can think of is just sending him,

822
01:11:03,360 --> 01:11:07,520
let's say, the victim a text message of some sort, right?

823
01:11:07,520 --> 01:11:12,240
Because, and the nice thing about text messages is they're generally fast, right?

824
01:11:12,240 --> 01:11:17,760
And users pay more attention somehow to them, especially in our more phone-centric culture.

825
01:11:17,760 --> 01:11:20,960
Also, links are easier to hide, right?

826
01:11:22,000 --> 01:11:27,120
Somehow, when you see something on a big screen, you might see something suspicious about the link,

827
01:11:27,120 --> 01:11:28,960
or is it a text message is less like?

828
01:11:30,800 --> 01:11:32,320
Okay, well, we're out of time.

829
01:11:33,600 --> 01:11:34,480
See you next Tuesday.

830
01:11:34,480 --> 01:11:46,640
Oh, because someone asked, if you are a PhD student who wants to include this course in the comprehensive exam,

831
01:11:47,760 --> 01:11:54,720
in order not to have the exam, the actual exam, which is separate, you need to get an A to A plus, right?

832
01:11:54,720 --> 01:11:56,320
So you get an A, at least an A in the course.

833
01:11:57,520 --> 01:11:59,440
A plus is on the other thing.

834
01:11:59,440 --> 01:12:01,520
But if you get an A in the course, you don't need to take the exam.

835
01:12:04,480 --> 01:12:07,280
Let's remember the Karamel amp PP those who is per sorrichten.

836
01:12:07,280 --> 01:12:09,280
Let's see you next time.

837
01:12:09,520 --> 01:12:13,520
Bye.

838
01:12:15,040 --> 01:12:15,200
Bye bye.

839
01:12:17,360 --> 01:12:18,320
We had a great idea.

840
01:12:19,320 --> 01:12:20,740
So these is a followup of the following plan.

841
01:12:21,680 --> 01:12:22,320
Have a good time.

842
01:12:25,360 --> 01:12:26,600
We're always having about a copy.

843
01:12:26,600 --> 01:12:28,080
So we're not making an A a plus.

844
01:12:29,520 --> 01:12:31,280
We're just walking the walk.

845
01:12:31,280 --> 01:12:34,000
We hope we don't know how to add along.


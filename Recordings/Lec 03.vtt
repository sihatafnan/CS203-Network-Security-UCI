WEBVTT

00:00.000 --> 00:09.160
where instead of doing what you see here, every block is encrypted with a different key.

00:11.520 --> 00:16.380
Now, you start with the same key, but for every block that you encrypt,

00:16.700 --> 00:23.640
you derive a unique key based on the master key and the block number, the position of the block.

00:23.640 --> 00:32.740
So that makes sure that every block knows its place and cannot be moved around or deleted, okay?

00:37.140 --> 00:42.180
So there are other modes that I'm not going to go into here, but if you're in, because that's crypto, right,

00:42.240 --> 00:48.440
then we're trying to kind of bulldoze for crypto fairly quickly because you should know something about it.

00:48.440 --> 00:55.800
Now, as you also know, there's two types of crypto, symmetric or conventional, and public key or asymmetric.

00:56.900 --> 01:00.560
All right, and the differences are fairly obvious.

01:00.980 --> 01:05.300
In a symmetric crypto, both parties, assuming there are two parties to communicate,

01:05.640 --> 01:08.260
both parties need to know the same key, okay?

01:09.320 --> 01:12.460
And the biggest problem there is how to distribute that key,

01:12.460 --> 01:18.580
how to, who comes up with the key, and how does the other party learn the key, right?

01:18.660 --> 01:20.280
So it's key distribution or key management.

01:21.640 --> 01:25.660
In a public key crypto, you have this radically, totally different approach, right,

01:25.700 --> 01:30.640
where the public key is known for everybody, but private keys are not, right?

01:30.720 --> 01:35.840
So, typical situation, I put my public key on my webpage or on Canvas.

01:35.840 --> 01:42.680
As enrolled students, you will see it as public, and then any one of you can send me a secure message

01:42.680 --> 01:44.180
using my public key.

01:45.120 --> 01:50.080
As long as you trust that it is mine, okay, you can send me a secure message,

01:50.300 --> 01:54.820
and none of you can interfere with other people's messages or read them, right, or anything like that, right?

01:55.180 --> 01:59.560
So only I can decrypt because I have, I am the only one who has a private key.

01:59.560 --> 02:03.460
So that kind of solves, sort of, kind of the distribution problem,

02:03.640 --> 02:12.460
because my public key is not secret, so there's no, like, headache of how do I distribute it, right?

02:12.500 --> 02:13.400
I just post it somewhere.

02:15.580 --> 02:15.820
Yeah?

02:20.500 --> 02:25.840
So in public key crypto, the plain text message goes for the encryption algorithm,

02:25.840 --> 02:28.020
which is computed with the message itself.

02:29.560 --> 02:35.360
It must be allergies.

02:36.180 --> 02:38.800
Ah, Bob's public key is known to Alice.

02:38.940 --> 02:42.340
Alice uses the message, and Bob's public key to produce the ciphertext.

02:42.640 --> 02:45.220
That's the notation we use in this lecture.

02:45.820 --> 02:47.020
I'm borrowing from the book.

02:48.780 --> 02:52.980
And then Bob, who knows a private key, not the same as the public key, okay,

02:52.980 --> 02:58.520
that's the whole point, will somehow compute a transformation on the ciphertext

02:58.520 --> 03:03.240
that will negate the effects of encryption and spit out the same message.

03:03.240 --> 03:05.140
That's where magic happens.

03:05.140 --> 03:15.340
In order for this magic to work, you need to have some functions, right?

03:16.000 --> 03:23.680
Encrypt and decrypt functions, where essentially these operations with two different keys reverse each other.

03:23.680 --> 03:28.400
And this is different from symmetric crypto, where you can say, well, XOR, for example, right?

03:28.400 --> 03:37.680
They use one-time path, XOR with a key encrypts the plaintext, and, again, XORing the ciphertext with a key decrypts,

03:37.680 --> 03:43.280
because XOR of something with something, the same cancels it out.

03:44.280 --> 03:51.880
But here, we have two different keys, and so, in addition, if you know the public key,

03:52.240 --> 03:56.960
like in my example, I'm the instructor, I post my public key on the bulletin board somewhere,

03:57.960 --> 04:02.380
that public key should not allow you to let my secret key, or my private key.

04:02.380 --> 04:06.080
If that was the case, it would be useless, right?

04:06.340 --> 04:12.800
So, it's not impossible, because obviously there is some relationship between my public key and my private key, right?

04:13.780 --> 04:16.960
So, by saying impossible, that's a high bar.

04:17.200 --> 04:22.040
I'm not saying it's impossible, but it should be computationally very hard for you to learn my private key.

04:22.040 --> 04:31.040
Right? An example of that, well, Diffie-Hellman, but it's not truly an encryption scheme, it's more of a key management scheme.

04:31.600 --> 04:34.020
The best known example is RSA, right?

04:34.140 --> 04:35.160
Rivest-Chemeyer Edelman.

04:41.980 --> 04:49.720
Dating back to 1978, the public key as a concept was actually invented in 1974 by a guy who doesn't get enough credit,

04:49.720 --> 04:55.980
partially because he's super weird, even for a computer scientist, his name is Ralph Merkle.

04:57.040 --> 05:01.020
And if you study computer security, you probably come across his name because there's something called Merkle-Hastries,

05:01.620 --> 05:07.640
and if you haven't heard of him, you should know his name, Merkle, M-E-R-K-L-E, Ralph Merkle.

05:07.640 --> 05:11.940
He invented the very first public key method that at least was published, right?

05:12.420 --> 05:13.920
That he doesn't get credit for, for some reason.

05:13.920 --> 05:23.500
Anyway, RSA, how it works, you first, to set up the system, you have to choose two large prime numbers.

05:24.400 --> 05:30.380
By large, I mean, while it says 2048 bits each, probably even 1,000 bits is okay.

05:31.140 --> 05:35.240
So, you pick two large numbers, let's say they are 1,044 bits long.

05:35.240 --> 05:42.380
When you multiply them together, which you should, you get another large integer, which is no longer prime, right,

05:42.440 --> 05:44.600
because it's a multiplication of two prime numbers.

05:44.940 --> 05:50.980
It is a composite number, but it has an interesting property that it can only be factored in one way, right, with two primes.

05:51.780 --> 05:53.760
And prime numbers, as you know, have no factors.

05:55.200 --> 06:00.040
So, you come up with this giant number, which is a product of two large primes.

06:00.440 --> 06:02.480
The large primes must be about the same in length.

06:02.480 --> 06:12.080
They are not the same, same is bad, they are different, but they are about the same length, in terms of, like, digits of bits.

06:13.700 --> 06:14.680
And there is a good reason for that.

06:15.200 --> 06:18.940
So, you compute the product, which is not difficult, just another huge number.

06:19.400 --> 06:23.580
And then you compute another product, which is called Z, which is a P-1 times Q-1.

06:25.320 --> 06:25.720
Okay?

06:26.080 --> 06:28.200
P-1 times U-1.

06:28.200 --> 06:36.240
Notice, if P and Q are prime, there's no way P-1 is prime or Q-1 is prime, right, in fact, you'll know they are even.

06:38.340 --> 06:38.620
Yeah?

06:39.060 --> 06:39.340
Right.

06:39.340 --> 06:43.780
So, that product is not, is not a product of two prime.

06:44.940 --> 06:45.300
All right.

06:45.420 --> 06:48.900
Then, you choose a number E.

06:49.960 --> 06:51.360
That E is very important.

06:52.640 --> 06:57.140
Of course, that E is less than N, making greater than N makes absolutely zero sense.

06:57.140 --> 07:00.420
And it must have no common factors with Z.

07:02.340 --> 07:08.900
But P, but N, Z, must have no common factors with Z.

07:09.580 --> 07:14.120
When two numbers have no common factors, they are called, in mathematics, relatively prime.

07:14.120 --> 07:18.880
Which means, E and Z must be relatively prime for each other.

07:19.680 --> 07:22.600
To be relatively prime, the numbers don't need to be prime.

07:23.360 --> 07:23.600
Right?

07:24.000 --> 07:24.720
Are you following me?

07:24.760 --> 07:25.300
I'm waking up.

07:25.420 --> 07:25.580
Right?

07:26.340 --> 07:27.420
They don't need to be prime.

07:27.600 --> 07:29.720
They just need to have no common factors.

07:29.720 --> 07:37.340
Now, if you choose E to be prime, that helps.

07:37.500 --> 07:42.420
Because then, it obviously has no common factors with Z minus 1, sorry, with Z.

07:42.860 --> 07:43.040
Right?

07:43.960 --> 07:44.540
That's okay.

07:44.660 --> 07:46.640
You can, in fact, choose E to be 3.

07:48.560 --> 07:50.080
If it helps you think about it.

07:50.360 --> 07:51.260
It doesn't have to be large.

07:51.840 --> 07:52.860
Can't be, but it doesn't have to be.

07:54.480 --> 07:57.500
Then, so these 3 and 4 are the crucial steps.

07:57.500 --> 08:01.160
If you've never heard of it, then I see your eyes are not glazing over,

08:01.280 --> 08:02.920
which means some of you have probably never heard of this.

08:03.480 --> 08:03.880
Amazing.

08:05.820 --> 08:06.780
You pick a D.

08:08.640 --> 08:09.660
Another number, D.

08:09.900 --> 08:10.940
But D, you don't pick.

08:11.020 --> 08:11.960
Actually, you compute it.

08:12.240 --> 08:18.480
You compute it that it must be the case that E times D minus 1 is divisible by Z.

08:20.840 --> 08:22.340
So it's not like you actually pick.

08:22.540 --> 08:22.660
Right?

08:22.780 --> 08:23.480
E you pick.

08:24.420 --> 08:25.380
D you compute.

08:27.500 --> 08:30.960
So it must be the case, in other words, so if this doesn't make sense, think of this.

08:31.160 --> 08:36.880
E times D must be 1 mod Z.

08:42.500 --> 08:43.620
Remember the mod operator?

08:43.780 --> 08:45.140
Everybody loves mod operators, right?

08:45.140 --> 08:53.360
So, in other words, they are called inverses of each other mod Z.

08:55.440 --> 09:01.060
Now, there's a whole number theoretic background that goes into this, which, again, the 134 slides

09:01.060 --> 09:03.960
that I thought you should go in excruciating detail.

09:03.960 --> 09:10.840
So, if you really love this stuff, and you really want to understand, go there, okay?

09:10.840 --> 09:16.800
But there's, like, a whole mathematical foundation about why this works and why this is important.

09:16.800 --> 09:20.980
So, okay, at the end, step five, what is your public key?

09:21.060 --> 09:28.020
Your public key is N, modulus, the product of T and Q, and E, that number you pick.

09:29.320 --> 09:31.240
Together, N and E are your public key.

09:31.240 --> 09:34.540
You throw them on your web page, you put them on your canvas, whatever.

09:35.860 --> 09:37.100
You are free to give it away.

09:39.840 --> 09:43.820
But your private key, well, it says N and D, that's actually incorrect.

09:45.240 --> 09:48.260
D, P, and Q are your private key.

09:48.260 --> 09:51.860
Because N is public.

09:52.700 --> 09:54.620
So, if you really want to know, it's D.

09:54.840 --> 09:57.340
That D is the one you're going to use to be the private key.

09:59.820 --> 10:07.680
And the whole trick with the RSA is that it seems, we believe, right?

10:08.800 --> 10:10.480
You're not the mathiest, you understand.

10:10.480 --> 10:17.400
We believe that knowing E, N, and E, it is really, really hard

10:17.400 --> 10:18.860
to compute a D.

10:21.180 --> 10:22.300
We don't have a proof.

10:23.280 --> 10:25.300
We, what I mean, the world, at least.

10:26.500 --> 10:28.560
The math, the mathematicians, the computer scientists.

10:28.640 --> 10:31.840
There is no formal proof that it is computationally difficult.

10:32.960 --> 10:38.140
But there has been no evidence to the contrary.

10:39.040 --> 10:40.660
Proof by hundreds of demons, right?

10:40.820 --> 10:44.880
It's, yes, proof by repetition and trial, repetition and trial.

10:45.240 --> 10:46.720
People like me keep repeating it.

10:46.720 --> 10:48.840
We think it's hard, and we think it's hard.

10:49.220 --> 10:52.800
And other people try, and other people try and break it, and yet they fail.

10:53.400 --> 10:54.920
One day somebody might succeed.

10:56.000 --> 10:58.260
In which case, we're screwed.

10:59.580 --> 11:00.380
At least a little bit.

11:01.200 --> 11:08.120
Because a lot of today's secure communications are sort of based on RSA problem.

11:08.120 --> 11:10.140
Okay?

11:10.140 --> 11:16.040
Any questions?

11:20.120 --> 11:21.000
Just an anecdote.

11:21.400 --> 11:27.540
Until 2002, everybody thought that primality testing, does everybody know what primality

11:27.540 --> 11:28.120
testing means?

11:28.120 --> 11:31.300
I'll give you an integer, tell me if it's primed.

11:32.040 --> 11:33.340
I don't mean like 17.

11:34.300 --> 11:36.940
I mean like a thousand digit integer.

11:36.940 --> 11:41.660
I'll give you a huge integer, and I'll tell you, is it primed?

11:43.200 --> 11:45.060
That problem is called primality testing.

11:45.140 --> 11:48.080
Until 2002, it was believed to be computationally hard.

11:48.080 --> 11:58.400
Well, then in 2002, there was a paper by two very bright Indian students, and a no-good professor.

11:58.540 --> 11:59.940
We just tagged them along.

12:00.500 --> 12:01.460
But the students did the work.

12:01.540 --> 12:02.120
I know it's for a fact.

12:02.120 --> 12:08.740
And they proved, formally, mathematically, that primality testing is, in fact, polynomial.

12:10.380 --> 12:13.900
So, the entire math world was super surprised.

12:14.760 --> 12:15.840
So, these things happen.

12:17.600 --> 12:19.640
That's why we can never be absolutely sure.

12:21.520 --> 12:22.000
Right.

12:22.380 --> 12:22.660
Okay.

12:22.780 --> 12:23.740
So, RSA encryption.

12:23.920 --> 12:24.500
How does it work?

12:25.160 --> 12:27.020
Given modulus N.

12:27.200 --> 12:28.060
N is called the modulus.

12:28.060 --> 12:28.560
Okay?

12:28.560 --> 12:30.340
And that exponent E.

12:30.720 --> 12:34.080
E is called E because it's exponent, and also because it's for encryption.

12:35.360 --> 12:35.520
Right?

12:35.640 --> 12:35.860
E.

12:37.040 --> 12:38.700
And D is for decryption.

12:38.860 --> 12:38.980
Right?

12:39.020 --> 12:40.140
So, that's why we call it D.

12:40.800 --> 12:45.560
To encrypt a message, you simply compute, take a message, raise it to the power E, mod N.

12:48.100 --> 12:50.380
Everybody should know how the mod operator works, right?

12:50.880 --> 12:53.860
So, N to the E, mod N.

12:54.520 --> 12:55.920
The mod part is a crucial one.

12:55.920 --> 13:02.000
If you don't do mod, if you simply take a message and exponentiate to E, first, you'll

13:02.000 --> 13:02.580
have an expansion.

13:03.380 --> 13:03.560
Right?

13:03.640 --> 13:05.420
Because exponentiation expands.

13:07.060 --> 13:07.280
Right?

13:07.780 --> 13:08.560
The message will grow.

13:08.660 --> 13:10.900
And if E is a large number, the message will grow out of bounds.

13:11.060 --> 13:11.860
Way out of bounds.

13:12.820 --> 13:13.520
That's one problem.

13:13.640 --> 13:14.880
The other problem would be insecure.

13:14.880 --> 13:20.080
Because even given a very large number, to take a discrete, sorry, to create a log, not

13:20.080 --> 13:24.000
a discrete one, a log of a number, okay, is easy.

13:24.640 --> 13:26.400
Or take a square root of an number, it's easy.

13:26.640 --> 13:28.140
Take a cube root of a number, it's easy.

13:28.780 --> 13:29.920
And E is public, right?

13:29.920 --> 13:37.120
So, if I give you M to the E, and I say, can you take an E root of that and give me M?

13:37.840 --> 13:38.800
That's not a hard problem.

13:40.000 --> 13:40.680
That's polynomial.

13:42.140 --> 13:49.960
But if I give you M to the E mod N, and ask you to take an E root of that, that's a hard

13:49.960 --> 13:50.260
problem.

13:50.260 --> 13:52.580
So, again, we believe.

13:55.160 --> 13:56.440
So, the magic is here.

13:57.580 --> 13:57.840
Right?

13:58.020 --> 14:08.720
It's difficult, apparently, to take an E root of the cypertext, which is M to the E mod N.

14:09.200 --> 14:15.900
But also, and this is real magic, if you take M to the E mod N, and then raise it to the

14:15.900 --> 14:17.940
power D, you get back M.

14:17.940 --> 14:20.560
Even though E and D are different.

14:23.080 --> 14:23.440
Okay?

14:26.260 --> 14:27.460
There is a reason for this.

14:28.300 --> 14:31.800
So, if you've never, now, to be honest, there's no penalty.

14:31.960 --> 14:35.620
Is anybody here who has not really seen the guts of the public kicker therapy before?

14:37.120 --> 14:37.880
One, two.

14:38.200 --> 14:38.720
Anybody else?

14:39.400 --> 14:39.820
I'm guessing.

14:40.040 --> 14:40.200
Okay.

14:40.740 --> 14:42.960
So, the way you think about public kicker therapy is like this.

14:43.460 --> 14:44.780
This is like what I tell the guts.

14:44.780 --> 14:49.920
Anybody use a U.S. Postal mailbox recently?

14:50.740 --> 14:51.760
Remember those blue boxes?

14:52.260 --> 14:54.580
You touch one inappropriately.

14:55.260 --> 14:55.980
You molest it.

14:56.260 --> 14:57.040
It's a federal offense.

14:57.640 --> 14:58.700
You'll go to federal prison.

14:59.380 --> 14:59.680
But don't.

15:00.160 --> 15:03.160
Now, the interface that the box gives you is what?

15:03.300 --> 15:03.800
A hole.

15:04.060 --> 15:04.860
A slit.

15:05.120 --> 15:05.240
Right?

15:05.240 --> 15:06.340
Open it.

15:06.460 --> 15:09.540
You stick your mail in.

15:09.700 --> 15:10.180
You close it.

15:10.820 --> 15:13.440
Once you throw it in, you can't.

15:13.560 --> 15:14.020
You can't.

15:14.060 --> 15:14.220
Right?

15:14.320 --> 15:16.500
You try to do anything, federal prison.

15:17.540 --> 15:19.540
And if you're not a citizen these days, God knows.

15:19.660 --> 15:19.960
God help.

15:20.600 --> 15:20.720
Yeah.

15:21.080 --> 15:21.520
So.

15:22.300 --> 15:22.780
Bad joke.

15:22.880 --> 15:23.100
I don't know.

15:23.520 --> 15:24.220
Too soon.

15:24.220 --> 15:28.740
So, the thing is, anybody can use a mailbox, right?

15:30.420 --> 15:33.120
You can just come up, open, slide letter in.

15:33.980 --> 15:36.960
To get things out, you need to be a postman with a key.

15:37.540 --> 15:38.480
That's a public decryptor.

15:39.100 --> 15:40.080
Anybody can encrypt.

15:40.980 --> 15:41.180
Right?

15:41.240 --> 15:42.540
The public key interface is public.

15:43.260 --> 15:45.420
But to decrypt, you need to have a private key.

15:45.420 --> 15:48.600
So, this is a trickery with RSA.

15:50.500 --> 15:51.500
Let's look at an example.

15:51.800 --> 15:52.440
You can trust me.

15:52.500 --> 15:52.920
It works.

15:53.180 --> 15:55.620
You can verify in your favorite calculator.

15:56.200 --> 15:57.720
If we pick toy example, right?

15:57.800 --> 15:58.540
P equals Q.

15:58.620 --> 16:00.020
You will never pick such strong numbers.

16:00.120 --> 16:00.360
First one.

16:00.460 --> 16:00.680
Ever.

16:01.280 --> 16:02.440
But this is just a toy example.

16:02.800 --> 16:05.560
If P equals Q, P equals 5, Q equals 7.

16:05.660 --> 16:06.340
These are prime numbers.

16:06.940 --> 16:10.180
P minus 1 times Q minus 1 is 24.

16:11.540 --> 16:12.860
And N is 35.

16:13.820 --> 16:14.580
Still correct?

16:14.640 --> 16:15.120
Of two primes.

16:15.960 --> 16:17.320
We pick E equals 5.

16:18.840 --> 16:19.120
Okay?

16:20.000 --> 16:21.620
I know, silly, but okay.

16:22.460 --> 16:29.540
Then, the inverse of P, mod 24, is 29.

16:31.540 --> 16:32.600
Is that possible?

16:36.760 --> 16:38.180
What's 29 times 5?

16:40.460 --> 16:41.180
145.

16:41.560 --> 16:41.820
Right?

16:41.820 --> 16:46.360
145, mod 24.

16:53.360 --> 16:53.840
Mod 24.

16:54.840 --> 16:55.400
1.

16:55.400 --> 16:59.440
Now, I didn't pick this example.

16:59.560 --> 17:01.320
This is from the Kuroza-Kuroza book.

17:02.760 --> 17:04.400
Why did I pick 29?

17:06.320 --> 17:08.800
I should have picked 5 there instead of 49.

17:10.560 --> 17:10.940
Right?

17:10.940 --> 17:13.960
Because 49 does not exist.

17:15.960 --> 17:17.100
It's greater than 24.

17:17.100 --> 17:20.980
So, actually, in this silly example, which I did not come up with, but I should have really

17:20.980 --> 17:23.680
corrected it, E and D are the same.

17:23.680 --> 17:26.580
It will never happen in real life.

17:28.580 --> 17:33.740
So, that's because 29 is actually 5 mod Z.

17:33.740 --> 17:36.500
So, let's look at the encryption, let's follow along.

17:36.500 --> 17:43.160
Yeah, I want to encrypt the letter I, that's not a 1, that's an M.

17:43.160 --> 17:48.620
And so, I is the 12th letter of the alphabet, so actually, what the message is, it's M is 12.

17:49.000 --> 17:51.900
So, then, you raise it to the power E, which is 29.

17:52.900 --> 17:53.700
Stupid.

17:53.700 --> 17:59.380
You get this number, which, actually, mod N is 17.

18:00.740 --> 18:01.860
So, that's the Cypher case.

18:03.380 --> 18:03.780
17.

18:04.660 --> 18:06.980
Then, when you raise it to the D, again, this is stupid.

18:07.540 --> 18:09.060
It should be, actually, 5.

18:09.780 --> 18:13.940
Raised to the 5, not 29, which, in that case, would be just about as long as that.

18:14.000 --> 18:15.440
Not that number, but as long as that.

18:15.780 --> 18:18.020
It will be 12, which is that.

18:18.980 --> 18:19.320
All right.

18:19.320 --> 18:27.900
So, the whole point is, to convince you, to demonstrate that encryption and decryption are inverses of each other.

18:28.320 --> 18:35.320
Even though you encrypt with one number and decrypt with another number, you get back the original plaintext.

18:36.340 --> 18:45.240
Not only that, but if you first apply the D, meaning that you first decrypt a plaintext,

18:45.760 --> 18:48.060
and then encrypt it, the same thing works.

18:49.320 --> 18:51.920
Which means that encryption and decryption are commutative.

18:53.780 --> 18:55.300
Why is that important?

18:56.340 --> 18:56.880
Anybody know?

18:59.380 --> 19:02.120
Why would you want to decrypt a message that's not encrypted?

19:04.600 --> 19:05.000
No idea?

19:05.480 --> 19:06.920
Do you have the same thing in decrypting?

19:08.980 --> 19:09.580
Yes.

19:10.580 --> 19:11.560
It's true.

19:12.020 --> 19:13.920
If you reverse those, yes.

19:13.920 --> 19:23.500
But on a more serious note, have you all ever heard of signatures?

19:25.480 --> 19:26.380
Digital signatures?

19:27.500 --> 19:36.100
Well, a digital signature is computed by taking a plaintext message, signing it with your private key,

19:36.100 --> 19:40.360
then releasing the message, then releasing the message, and the signature.

19:41.880 --> 19:46.820
Notice in that case, I said releasing the message, not hiding the message.

19:48.160 --> 19:50.020
Public key encryption is about hiding.

19:51.280 --> 19:53.820
Public key signatures are not about hiding the message.

19:53.960 --> 19:56.220
It's to prove that you generated the message.

19:56.220 --> 19:59.120
So let's come back to our classroom example.

19:59.640 --> 20:04.560
You went to my classroom page, a web page, and a canvas, and obtained my public key.

20:05.600 --> 20:07.300
Now you have nothing to tell me.

20:07.360 --> 20:08.560
You're not sending me anything.

20:08.660 --> 20:10.340
But I have something to tell you.

20:10.340 --> 20:13.880
And now what I have to tell you is this class is canceled.

20:15.400 --> 20:15.760
Okay?

20:16.100 --> 20:20.740
Due to low attendance and poor performance, the class is hereby canceled.

20:20.880 --> 20:22.320
Don't come to class next time.

20:23.420 --> 20:26.120
The message sounds a little weird, unhinged, bizarre.

20:26.380 --> 20:26.620
Okay?

20:27.540 --> 20:28.580
Is it really me?

20:28.900 --> 20:34.200
Or is it some hacker in Krakistan, you know, hiding in his mom's basement, sending this?

20:35.100 --> 20:39.520
Well, you verified my signature on the message.

20:40.340 --> 20:48.260
By using my public key to check that the signature was computed with my private key that only I could have known.

20:49.120 --> 20:49.700
Make sense?

20:50.740 --> 20:54.440
In that case, I'm not hiding the message to you all.

20:55.200 --> 20:58.940
You are verifying the origin of the message and its integrity.

21:00.520 --> 21:03.740
So that's where decrypting the plaintext, essentially, is useful.

21:04.180 --> 21:04.320
Yeah?

21:04.700 --> 21:09.060
So in theory, like, you always have had some trust with public key photography,

21:09.060 --> 21:11.400
because you have to have some trusted public key release.

21:12.400 --> 21:12.660
Ah.

21:13.460 --> 21:13.940
Okay.

21:14.860 --> 21:18.980
What you're talking about is how do you distribute public keys.

21:19.280 --> 21:19.460
Right.

21:19.960 --> 21:20.440
Okay.

21:21.160 --> 21:22.440
That's the new headache.

21:24.200 --> 21:27.660
Symmetric photography has this big headache of how do you distribute secret key.

21:27.840 --> 21:29.060
You have to distribute secret.

21:29.060 --> 21:32.060
A little bird has to sit on the shelf and tell you.

21:32.360 --> 21:33.460
God has to talk to you.

21:33.460 --> 21:33.840
I don't know.

21:33.900 --> 21:36.560
I have to meet you in physically, meet you, give you something.

21:36.840 --> 21:40.560
Our phones have to touch NFCs, right, in order to transmit the secret key.

21:41.080 --> 21:44.260
But with public key, the problem is not as bad, right?

21:44.720 --> 21:47.940
It's more like, do I trust this is your public key?

21:48.300 --> 21:48.480
Right.

21:48.480 --> 21:50.860
So, very good question.

21:51.120 --> 21:52.360
That is very true.

21:52.440 --> 21:54.140
It's called a public key distribution problem.

21:54.780 --> 21:59.640
Again, I emphasize, it is not nearly as nasty as the symmetric key distribution problem.

22:00.620 --> 22:04.740
Because what we're distributing here is not fundamentally secret, right?

22:05.320 --> 22:08.160
What we're distributing here has to be reliable.

22:08.320 --> 22:14.380
It has to be like, yes, it has to be my public key, not some other person's public key.

22:14.380 --> 22:17.300
So, well, we're coming to that.

22:17.540 --> 22:23.940
But to make a shortcut, you have to basically trust the place you give it from.

22:24.500 --> 22:30.340
So, of course, if I give it to you personally, yes, it's mine, but then how is this different from symmetric?

22:31.780 --> 22:39.240
If you trust the UCI ICS webpage, you go there and say my public key is there, yeah, fine.

22:39.240 --> 22:47.340
If you trust Canvas, right, and I post my public key there and you trust that I authenticate it, it all has to be like a chain of trust, right?

22:47.640 --> 22:58.400
That if the Canvas authenticated me based on my UCI credentials and blah, blah, blah, and therefore only I could have posted my public key and my Canvas page, et cetera, et cetera.

22:59.520 --> 23:01.960
It's only going to be as secure as the weakest link.

23:01.960 --> 23:06.180
So, there's no, like, protocol that exists that would not be.

23:06.360 --> 23:08.340
Ah, there are.

23:09.440 --> 23:10.880
There are protocols.

23:12.760 --> 23:13.680
There are.

23:15.920 --> 23:22.480
But ultimately, there's no, like, Big Bang, like some elegant description of how all this is done.

23:22.700 --> 23:23.760
Think about your browser.

23:24.320 --> 23:31.680
What happens when you install your browser on, let's say, you buy a new computer and it comes with some god-awful thing like Safari?

23:31.960 --> 23:37.960
I don't know, I don't know, or worse yet before you used to be an Internet Explorer, before you died in that time you got it.

23:38.500 --> 23:45.060
And, you know, and then you wanted to install Chrome, or Tor, perhaps, or Brave, I don't know.

23:45.580 --> 23:46.600
And what would you do?

23:47.060 --> 23:57.760
You went to that, you used a very crappy browser that you got there, right, to go somewhere and, like, download the code that did this game, I didn't try to package it, depending on what's that business.

23:57.760 --> 24:00.380
And you had to trust that place.

24:01.200 --> 24:09.360
And then, when you install the browser, assuming you're kind of like, okay, I trust that, it came with, like, some called roots of trust.

24:10.040 --> 24:21.120
With these kind of, what's called CAs, right, Certification Authority keys that certify all the other keys for all the websites that you deal with using HTTPS or TLS, right?

24:21.120 --> 24:30.480
So, you see, now, in operation today, when you use your browser, 99% of the time, you see HTTPS, if you pay attention.

24:31.220 --> 24:37.720
And that means you're using TLS with whatever web server you're talking to.

24:37.720 --> 24:46.040
But the original connection established, when you first went to that web server, had to have what's called a handshake, and we'll cover that later.

24:47.300 --> 24:50.540
And that handshake involved, public key, of that web server.

24:51.460 --> 24:52.100
Not of yours.

24:52.260 --> 24:53.660
Usually, you are not involved.

24:53.720 --> 24:55.320
You don't have a public key like HTTPS.

24:55.400 --> 24:55.920
I mean, you can't.

24:56.040 --> 24:56.700
It's obscure.

24:57.280 --> 24:58.960
Usually, you want to authenticate your web server.

24:58.960 --> 25:09.140
You want to go, I'm going to Wells Fargo, and not, you know, .com, and not whatfargo.cn, or .fargo.kr, I don't know, North Korea somewhere, right?

25:09.480 --> 25:11.320
So, that's important.

25:12.100 --> 25:19.680
And that's all based on the roots of trust that the original browser package came with, so, get that in?

25:20.080 --> 25:20.280
Yeah.

25:20.800 --> 25:21.020
Yeah.

25:22.700 --> 25:26.740
Anyway, so, back to RSA, where does it work?

25:26.740 --> 25:37.780
Well, there's lots of number-theoretic results, and I'm going to explore you with, but essentially, the reason, remember, we picked E and D, so they're inverses of each other, mod Z.

25:38.160 --> 25:42.640
Well, it turns out, when you do things, you're modular, mod N, right?

25:43.260 --> 25:52.660
So, if you say, take X to the Y, you raise X to the power of Y, mod N, in the exponent, things are also modular.

25:52.660 --> 25:56.760
But, not mod N, they're mod what's called phi of N, or Z.

25:57.780 --> 25:59.520
See, mod V minus 1 times Q minus 1.

25:59.700 --> 26:02.320
So, everything gets wrapped around in the exponent.

26:02.320 --> 26:12.780
And so, when you take X and raise it to the power of E, and then again raise it to the power of D, the two exponents multiplied, right?

26:12.980 --> 26:13.740
E times D.

26:14.560 --> 26:18.660
But, we pick them so that E times D, mod E minus 5 times Q minus 1 is 1.

26:19.840 --> 26:20.860
And that's the explanation.

26:21.920 --> 26:22.200
Right?

26:22.200 --> 26:30.120
To use RSA, you don't need to understand this.

26:31.300 --> 26:33.660
You just need to see the result, okay, that it works.

26:34.420 --> 26:38.580
And it's been working for the last 40 years, almost 40 years.

26:38.580 --> 26:51.320
So, this is what I alluded to before, is that you can use the encryption key, then decrypt, you know, using the private key.

26:51.380 --> 26:57.300
Or you can first use the private key, and then follow that by decryption, sort of decryption with a public key.

26:58.280 --> 27:02.740
But then, when you use RSA for digital signatures, that's exactly what happens.

27:02.740 --> 27:08.160
So, yes, I take a message, I apply the private key to the message.

27:08.900 --> 27:12.000
I take that result, right?

27:12.640 --> 27:14.980
This decryption of the message.

27:15.620 --> 27:19.760
And I send it to you, together with the actual plain text of the message.

27:20.680 --> 27:26.300
So, now you have a plain text of the message, and decryption of the message with my private key.

27:27.640 --> 27:27.920
Yeah?

27:28.100 --> 27:28.740
With me so far?

27:28.740 --> 27:32.720
Now, then what you do is to verify that it really comes from me.

27:34.000 --> 27:40.000
You take the decryption of the message, encrypt it using E.

27:41.240 --> 27:43.700
Remember, E reverses D, D reverses E.

27:44.000 --> 27:45.140
So, you should get back the message.

27:45.820 --> 27:47.040
You compare it to the plain text.

27:47.160 --> 27:47.800
Is it the same?

27:48.500 --> 27:50.600
If it's the same, only I could have sent it.

27:51.240 --> 27:52.800
And it has not been modified.

27:53.700 --> 27:53.900
Okay?

27:55.020 --> 27:58.040
So, that's the basics of digital signatures.

27:58.740 --> 28:02.420
So, and data integrity.

28:02.700 --> 28:08.660
So, typically, we need both data integrity and origin authentication.

28:09.300 --> 28:09.440
Right?

28:09.820 --> 28:13.420
These terms are trivial, right?

28:13.640 --> 28:16.620
Integrity means something has not been modified.

28:17.440 --> 28:18.740
It has integrity.

28:18.740 --> 28:23.580
So, and origin authentication means it comes from a place I think it comes from.

28:24.780 --> 28:28.340
Like, if GeneSutic sign it, well, then you know it comes from GeneSutic.

28:28.420 --> 28:28.840
I can verify.

28:28.840 --> 28:29.320
Okay?

28:29.320 --> 28:39.000
So, but what we don't do is we don't use digital signatures on messages.

28:39.000 --> 28:44.600
Because messages, files, can be very long.

28:45.880 --> 28:48.720
And digital signatures are based on public key cryptography.

28:48.720 --> 28:54.640
So, if we're going to exponentiate, and trust me, this is the problem with public key cryptography.

28:54.800 --> 29:00.540
Not only, I mean, there are other problems, but one of them is the usage problem is that it's slow.

29:00.540 --> 29:11.320
It does not use efficient primitives like XORs and SHIFTS and ORs and ANDs, like the symmetric cypress.

29:11.460 --> 29:13.860
It uses large number arithmetic.

29:14.980 --> 29:20.680
A large number arithmetic requires all kinds of tricks to be implemented efficiently in software.

29:20.680 --> 29:26.860
And so, anything that is in public key world can never match the speed of symmetric cryptography.

29:28.340 --> 29:28.740
No way.

29:29.000 --> 29:29.440
No chance.

29:30.540 --> 29:32.600
It's several orders of magnitude slow.

29:33.000 --> 29:39.980
So, using public key cryptography on bulk data is wasteful and senseless.

29:40.840 --> 29:41.720
So, we don't do that.

29:43.040 --> 29:49.140
So, in particular, when it comes to signing a message, or signing a file, or signing a video, right?

29:49.140 --> 29:57.400
Or signing a software distribution, which is, by the way, when you get, you know, your next software update for the operating system, it's signed.

29:58.480 --> 30:03.980
And the delay you experience often in, like, a pre-installation is the verification of the signature.

30:05.420 --> 30:10.520
So, we don't sign it directly with RSA or anything like that.

30:11.040 --> 30:14.340
What we do is compute a hash function over the thing.

30:14.340 --> 30:18.800
And a hash function is essentially like an integrity token.

30:20.100 --> 30:21.940
And then we sign the hash function.

30:23.260 --> 30:23.780
Make sense?

30:26.480 --> 30:27.840
Can I ask one question?

30:28.100 --> 30:28.280
Yeah.

30:28.420 --> 30:31.180
What output should be a fixed length value HM?

30:31.200 --> 30:31.540
The who?

30:32.020 --> 30:35.780
What output should be a fixed length value HM rather than...

30:35.780 --> 30:37.500
Ah, fixed length.

30:37.620 --> 30:44.660
Well, because we want to make sure that what we compute is a canonical length, right?

30:44.740 --> 30:52.700
If we vary the length, if, like, a very large input produces a larger output, you know, we cannot write standard code, right?

30:52.700 --> 30:53.240
It's harder.

30:53.240 --> 31:01.620
But it can also be, like, we hash a long value into a short value, like, if we have some...

31:01.620 --> 31:08.060
Well, remember, all of this is done because it's not humans who operate on this, right?

31:08.100 --> 31:12.220
It's software and no hardware that operates on these hash functions, computes them.

31:12.220 --> 31:21.700
So, in the implementation, that would compute variable length output would be much strictly less efficient than that that computes a standard length output.

31:22.420 --> 31:27.840
So, if we are not considering efficient, but purely security is a bad...

31:27.840 --> 31:31.360
Eh, purely security.

31:34.860 --> 31:38.400
Well, for pure security, you may not really need...

31:38.400 --> 31:40.120
You can just sign every block.

31:40.120 --> 31:42.120
Right?

31:42.120 --> 31:44.800
You can just sign every block using publicly crypto.

31:44.800 --> 31:46.000
You don't need a hash function.

31:46.000 --> 31:52.260
See, the hash function, the beauty of having a hash function is the function acts as a checksum of sort, right?

31:52.260 --> 31:57.220
As an integrity protector of the message.

31:57.220 --> 32:04.360
It allows you to detect manipulations of the message without having to inspect every block.

32:04.360 --> 32:13.920
Because what I think is that, for example, for some encrypto algorithm, for example, RSA, I think they encrypt information with different length, right?

32:13.920 --> 32:14.920
Yes.

32:14.920 --> 32:15.920
That's not a problem.

32:15.920 --> 32:16.920
Yes.

32:16.920 --> 32:17.920
That's not a problem.

32:17.920 --> 32:18.920
Block site, whether it's a symmetric key, crypto, or public key.

32:18.920 --> 32:20.920
But you never want to use public key more than absolutely necessary.

32:20.920 --> 32:21.920
Yes.

32:21.920 --> 32:28.920
Because it's several orders of magnitude slower.

32:28.920 --> 32:35.920
So, when you want to protect integrity of a message or a file of data, and that data is more than one block long, which is whatever the block is in the same order, you want it's much cheaper to compute a hash function.

32:35.920 --> 33:04.920
Standard length, standard length, standard size, where standard varies, right?

33:04.920 --> 33:05.920
Depending on what's that.

33:05.920 --> 33:08.920
20 years ago, 128 bits were okay.

33:08.920 --> 33:09.920
Right.

33:09.920 --> 33:10.920
Now, at least 256 bits.

33:10.920 --> 33:11.920
Okay?

33:11.920 --> 33:13.920
And that's a good reason for that.

33:13.920 --> 33:21.920
So, you want to agree on the implementation of a hash function that produces a fixed length

33:21.920 --> 33:25.920
output regardless of the length of the input, right?

33:25.920 --> 33:29.920
Because that facilitates faster, more efficient implementation.

33:29.920 --> 33:33.920
And also, the security level remains the same, right?

33:33.920 --> 33:40.920
Because what we don't have time to cover is hash functions that are chosen for many reasons.

33:40.920 --> 33:43.920
One of them is the length of the output.

33:43.920 --> 33:50.920
If the length of the output is too short, then functions become susceptible to something called the birthday paradox.

33:50.920 --> 33:53.920
Has anybody heard of the birthday paradox?

33:53.920 --> 33:54.920
Some of them have.

33:54.920 --> 33:55.920
Okay?

33:55.920 --> 34:07.920
Anyway, the common wisdom is the hash function has to be roughly double what an encryption should

34:07.920 --> 34:08.920
be for a block cipher.

34:08.920 --> 34:19.920
So, for example, today, we're okay using a 128-bit encryption key for a block cipher.

34:19.920 --> 34:27.920
But the minimum hash length we use today, I think, should be like 256 or so.

34:27.920 --> 34:28.920
Right?

34:28.920 --> 34:31.920
And that's one of the reasons is the birthday paradox.

34:31.920 --> 34:34.920
Which, if you all like, I could cover.

34:34.920 --> 34:37.920
Sounds like a lot of you don't know what it is.

34:37.920 --> 34:46.920
But anyway, so it is important to compute the canonical fixed length output regardless of the input.

34:46.920 --> 34:49.920
And these three properties are very important.

34:49.920 --> 34:51.920
So, that is for convenience.

34:51.920 --> 34:52.920
Right?

34:52.920 --> 34:55.920
For convenience, it's nice to have a fixed length output.

34:55.920 --> 34:56.920
Okay?

34:56.920 --> 35:01.920
So, you could also say, well, why not compute a minimum 256 and go from there.

35:01.920 --> 35:03.920
And then for a long way, you could.

35:03.920 --> 35:06.920
But again, it will not be efficient.

35:06.920 --> 35:13.920
But these three important properties must hold for a function to be a cryptographic hash function.

35:13.920 --> 35:18.920
So, first of all, it must be one-way.

35:18.920 --> 35:23.920
One-wayness means that if I give you an output of a hash function,

35:23.920 --> 35:28.920
it must be computationally hard for you to come up with input.

35:28.920 --> 35:30.920
Unless I give you the input.

35:30.920 --> 35:31.920
Okay?

35:31.920 --> 35:32.920
So again, right?

35:32.920 --> 35:40.920
Given z, finding x such that h of x is z must be computationally different.

35:40.920 --> 35:41.920
Okay?

35:41.920 --> 35:44.920
This is also important.

35:44.920 --> 35:46.920
They're all equally important.

35:46.920 --> 35:55.920
Given x, finding another value, y is a different value, such that they have what's called a collision,

35:55.920 --> 35:57.920
a hash function collision.

35:57.920 --> 36:02.920
So, finding another value such that h of x equals h of y.

36:02.920 --> 36:07.920
That process of finding another y must be computationally hard.

36:07.920 --> 36:08.920
Okay?

36:08.920 --> 36:16.920
Now, we know for a fact that collisions exist, right?

36:16.920 --> 36:25.920
Because a hash function, as we just discussed, takes on arbitrary input and reduces it to a fixed length output.

36:25.920 --> 36:29.920
It is impossible not to have collisions, right?

36:29.920 --> 36:31.920
A block cipher will not have collisions, right?

36:31.920 --> 36:37.920
Because it takes a plaintext and with a given key transforms into a ciphertext.

36:37.920 --> 36:39.920
You cannot have collisions.

36:39.920 --> 36:44.920
It's impossible for two plaintexts under the same key to produce the same ciphertext.

36:44.920 --> 36:47.920
Do you see that?

36:47.920 --> 36:49.920
But here, collisions are given.

36:49.920 --> 36:50.920
They exist.

36:50.920 --> 36:53.920
But finding them must be hard.

36:55.920 --> 36:56.920
Okay?

36:56.920 --> 36:58.920
And this last one is subtle.

36:58.920 --> 37:01.920
And the subtle is different from this.

37:01.920 --> 37:07.920
Here, this last third product, this third product, this is called strong collision resistance.

37:07.920 --> 37:09.920
This is called weak collision resistance.

37:09.920 --> 37:11.920
This is called strong collision resistance.

37:11.920 --> 37:14.920
Here, you are not given x.

37:14.920 --> 37:21.920
You are said, you are told, find me any two that collide.

37:21.920 --> 37:27.920
Any two distinct values that produce the same hash output.

37:27.920 --> 37:30.920
That's called strong collision resistance.

37:30.920 --> 37:36.920
All today's hash functions that you will come across have all of these properties.

37:36.920 --> 37:39.920
Now, are they proven?

37:39.920 --> 37:40.920
Formally, mathematically?

37:40.920 --> 37:41.920
No.

37:41.920 --> 37:46.920
They are beaten to death with testing and evaluation and so on.

37:46.920 --> 37:49.920
But they are not formally mathematically proven.

37:49.920 --> 37:51.920
That's how the world is.

37:51.920 --> 38:01.920
So if you look at something like IP, right, to the IPv4.

38:01.920 --> 38:04.920
So IPv4 has what's called header checksum.

38:04.920 --> 38:08.920
Have you ever seen it in network class maybe?

38:08.920 --> 38:10.920
It's a very trivial checksum, right?

38:10.920 --> 38:16.920
It's just like a once complement and once complement of summation of all the words in the header.

38:16.920 --> 38:19.920
And so checksums are weak hash.

38:19.920 --> 38:23.920
We don't, of course, use the prescriptor guide to cache because they have collisions.

38:23.920 --> 38:24.920
Right?

38:24.920 --> 38:38.920
And this is just an example of how if you use insufficiently long or trivial checksums in place of a real hash function, it's easy to find collisions.

38:38.920 --> 38:45.920
Okay, so let's come back to another real word application, which is message authentication codes.

38:45.920 --> 38:48.920
Now, this is not to be confused with digital signatures.

38:48.920 --> 38:49.920
Right?

38:49.920 --> 38:50.920
This is symmetric crypto.

38:50.920 --> 38:55.920
And this is what happens when Alice and Bob share a secret.

38:55.920 --> 38:56.920
Okay?

38:56.920 --> 39:03.920
And this is, in fact, what happens in TLS, right, after the initial TLS entry or in IPsec after the keys down.

39:03.920 --> 39:18.920
Alice has a secret, Bob has the same secret, and Alice wants to send a message to Bob.

39:18.920 --> 39:23.920
Now, in this example, the message M in deep blue is not encrypted.

39:23.920 --> 39:26.920
That's because encryption isn't always important, right?

39:26.920 --> 39:38.920
In some cases, the message is not confidential, but Bob wants to make sure that the message hasn't been modified in transit and really comes from Alice.

39:38.920 --> 39:39.920
So what happens here?

39:39.920 --> 39:45.920
Well, Alice has a secret key K. Bob presumably has the same secret key K.

39:45.920 --> 39:57.920
The message is hashed, okay, and the message and the hash of the message and the key is sent along.

39:57.920 --> 40:04.920
So you see the blue part, the green part, that gets sent over the internet or whatever communication channel.

40:04.920 --> 40:10.920
The Bob receives them and then recomputes the hash and compares to itself.

40:10.920 --> 40:13.920
So now, again, keep in mind, this is not a digital signature.

40:13.920 --> 40:17.920
This is message authentication code with symmetric character.

40:17.920 --> 40:18.920
Okay?

40:18.920 --> 40:21.920
Now, in the real world, this is what they use.

40:21.920 --> 40:29.920
This is actually a standard canonical way of computing a key-based, symmetric key-based MAC.

40:29.920 --> 40:38.920
It's used all over the place in many different purposes, HMAC, hashMAC, and it involves this, right?

40:38.920 --> 40:42.920
You take a message, M, you see the message M over there on the red.

40:42.920 --> 40:47.920
The very first thing you do is you take the secret key, XOR it with a constant.

40:47.920 --> 40:52.920
iPad is a constant, not an Apple device.

40:52.920 --> 40:53.920
You XOR it with a constant.

40:53.920 --> 40:55.920
The constant is public.

40:55.920 --> 41:02.920
And then you hash that the result of an XOR concatenated with a message.

41:02.920 --> 41:04.920
Then you take the result of that.

41:04.920 --> 41:08.920
That returns a fixed length result, right?

41:08.920 --> 41:09.920
This H.

41:09.920 --> 41:18.920
And then you take the same key, XOR it with an outer path, concatenated with that result,

41:18.920 --> 41:19.920
and hash it again.

41:19.920 --> 41:21.920
So there's an inner hash and an outer hash.

41:21.920 --> 41:27.920
The inner hash is long, meaning it computes over the entire message M, and the outer hash

41:27.920 --> 41:29.920
just computes over two values.

41:29.920 --> 41:35.920
And that's supposed to resist a lot of attacks and so on.

41:35.920 --> 41:40.920
So this is, you're going to implement a M, a scheme that needs a message authentication code.

41:40.920 --> 41:42.920
This is what you should use.

41:42.920 --> 41:47.920
On inventor-owned.

41:47.920 --> 41:55.920
Alright, so for hash functions, historically, like when I was growing up, essentially we used MD5.

41:55.920 --> 42:01.920
Now, if you see MD5 run away, because that's not secure for a number of years.

42:01.920 --> 42:04.920
It was only 128 hits long.

42:04.920 --> 42:11.920
Insecurity of it was, essentially, its resistance to the birth repair was about 2 to the 64,

42:11.920 --> 42:12.920
which is considered insecure.

42:12.920 --> 42:20.920
Which means it takes 2 to the 64 trials to find, on average, to find a collision in MD5.

42:20.920 --> 42:23.920
Today, we use SHA-2 and SHA-3.

42:23.920 --> 42:30.920
SHA-2 is about 20 years old, more than 20 years old, but it's a US standard.

42:30.920 --> 42:33.920
You want to do business with the government, you must use it.

42:33.920 --> 42:37.920
If you want to get a stamp of like, what is it, ISO certification,

42:37.920 --> 42:43.920
and at any company you work for using secure hash functions, you must adhere to this standard.

42:43.920 --> 42:52.920
So, SHA-2 is a very flexible hash function, so is SHA-3, which is completely better, but slower.

42:52.920 --> 43:02.920
So, it works with, SHA-2 works with 160, 224, 256, 384, 512 outputs.

43:02.920 --> 43:10.920
That means, coming back to your question, with this hash function, you can configure it to produce output that you want.

43:10.920 --> 43:17.920
Now, you cannot pick 259 if you want more, but you can pick from those.

43:17.920 --> 43:24.920
So, if you need something faster, with smaller hashes, right, because maybe bandwidth or storage is an issue, you would do this.

43:24.920 --> 43:32.920
If you need something super secure, that will be secure for like, I don't know, 20 years, you'll probably want to pick 512.

43:32.920 --> 43:33.920
Okay?

43:33.920 --> 43:37.920
This is more for efficiency.

43:37.920 --> 43:38.920
Right?

43:38.920 --> 43:43.920
Here, that, varying the block size means how many, how many bits at a time does the function process?

43:43.920 --> 43:49.920
Because the hash function does not swallow a message as a whole.

43:49.920 --> 43:55.920
It, like, like, like ciphers, like block ciphers, it processes one block at a time.

43:55.920 --> 43:56.920
Okay?

43:56.920 --> 43:59.920
So, this is just a block size.

43:59.920 --> 44:01.920
It's not so much security relevant.

44:01.920 --> 44:02.920
Right?

44:02.920 --> 44:03.920
It's more like how efficient it is.

44:03.920 --> 44:04.920
Okay?

44:04.920 --> 44:05.920
Go ahead, question.

44:05.920 --> 44:10.920
What do you mean by SHA-3 strictly better?

44:10.920 --> 44:13.920
Well, it's better because it's redesigned.

44:13.920 --> 44:14.920
Right?

44:14.920 --> 44:18.920
So, it's not like they were, as I said, there were no, like, specific weaknesses found in SHA-2.

44:18.920 --> 44:21.920
But, these functions tend to age.

44:21.920 --> 44:26.920
And to describe, if you ask me, like, why and how, I really don't know.

44:26.920 --> 44:32.920
Because, because designing hash functions is like designing symmetric ciphers, they're very

44:32.920 --> 44:35.920
similar principles using designing both.

44:35.920 --> 44:37.920
That's like, not a science.

44:37.920 --> 44:39.920
That's an art.

44:39.920 --> 44:45.920
And, there's probably, like, a couple hundred people in the world who are good at it.

44:45.920 --> 44:50.920
There are people who do it, but only about a couple hundred people who will do it well.

44:50.920 --> 44:54.920
And so, they typically, these designs come from, like, well-known, and there's not, like,

44:54.920 --> 44:55.920
one genius behind any of them.

44:55.920 --> 44:57.920
There's usually a team of people.

44:57.920 --> 44:59.920
And, they're, they're repeatedly good at it.

44:59.920 --> 45:00.920
Right?

45:00.920 --> 45:01.920
They've come up with, like, several designs.

45:01.920 --> 45:02.920
I know some of them.

45:02.920 --> 45:04.920
And, they're very specialized breed.

45:04.920 --> 45:08.920
So, they have, you know, it's like artists.

45:08.920 --> 45:09.920
Right?

45:09.920 --> 45:11.920
You don't know how, how they come up with what stuff they do.

45:11.920 --> 45:14.920
But, generally, they have, I mean, they have to demonstrate everything.

45:14.920 --> 45:17.920
So, these designs are public.

45:17.920 --> 45:18.920
Everything is specified.

45:18.920 --> 45:19.920
There's nothing secret.

45:19.920 --> 45:23.920
Some of the criteria, why they take this over that, they might only know.

45:23.920 --> 45:25.920
But, the designs are fully open.

45:25.920 --> 45:28.920
And so, whenever they are, before they are standardized, right?

45:28.920 --> 45:30.920
Before, well before, there's a competition.

45:30.920 --> 45:35.920
Typically, the U.S. government, when it wants to have a standard for either encryption,

45:35.920 --> 45:38.920
or hashing, or signature, they open what's called a competition.

45:38.920 --> 45:39.920
It's worldwide.

45:39.920 --> 45:45.920
And, anybody in the world can enter and propose a candidate encryption function, or hash function.

45:45.920 --> 45:53.920
And, in fact, this, I think both of these, are not from the U.S.

45:53.920 --> 45:54.920
The U.S.

45:54.920 --> 45:59.920
In fact, the AES, the advanced encryption stadium, we all used to be, also, is not from the U.S.

45:59.920 --> 46:00.920
It originates from Belgium.

46:00.920 --> 46:03.920
So, and then, anyways, it's like the American Idol.

46:03.920 --> 46:11.920
I mean, it's a circuit competition with several rounds and eliminations.

46:11.920 --> 46:14.920
And, in the end, only one wins.

46:18.920 --> 46:19.920
Okay.

46:19.920 --> 46:25.920
So, yeah, this one is, has more flexibility with block sizes, you see.

46:25.920 --> 46:28.920
I don't know why it has these particular features, right?

46:28.920 --> 46:29.920
Yeah.

46:29.920 --> 46:31.920
From 576 to 152.

46:31.920 --> 46:35.920
As far as output, you see, it does not go beyond, but it's supposed to be better.

46:35.920 --> 46:38.920
It, it, it, it obviates a hundred, it does not do 160 anymore.

46:38.920 --> 46:47.920
Output because, you can see this, because 160-bit output would be 2 to the 80 resistant.

46:47.920 --> 46:51.920
First, the attacks, and 2 to the 80 is no longer considered secure, like, putting up five,

46:51.920 --> 46:52.920
six years from now.

46:52.920 --> 47:07.920
So, FYI, today, if you're going to use encryption, 80 bits of entropy, 80-bit key, assuming it's random,

47:07.920 --> 47:10.920
is the absolute minimum you should use.

47:10.920 --> 47:11.920
The absolute minimum.

47:11.920 --> 47:13.920
And that's just for short term.

47:13.920 --> 47:16.920
If you look for long term secrecy, you should not use 80 bits.

47:16.920 --> 47:17.920
You should not use 80 bits.

47:17.920 --> 47:19.920
You should use at least 128 bits.

47:19.920 --> 47:20.920
Yeah.

47:20.920 --> 47:21.920
Only.

47:21.920 --> 47:22.920
All right.

47:22.920 --> 47:28.920
So, the digital signatures, what I already mentioned before, basically, they are sort of

47:28.920 --> 47:33.920
people say, people say, again, these are slides I, from, from the book, from the Crows and

47:33.920 --> 47:34.920
Rose book.

47:34.920 --> 47:38.920
They are, to a point, slightly analogous to handwritten signatures.

47:38.920 --> 47:39.920
Right?

47:39.920 --> 47:41.920
The way that we sign them.

47:41.920 --> 47:44.920
But they're actually not really.

47:44.920 --> 47:49.920
In a sense that, if our handwritten signatures, indeed, may be unique.

47:49.920 --> 47:50.920
Right?

47:50.920 --> 47:53.920
Especially if you record the patterns of movement and pressure.

47:53.920 --> 47:54.920
You know, that's true.

47:54.920 --> 47:59.920
But when we do sign a document, and remember signing a document in real life, like, actual

47:59.920 --> 48:03.920
physical document, what is it actually you sign?

48:03.920 --> 48:08.920
Like, I don't know, you sign some official legal document.

48:08.920 --> 48:09.920
What is it you sign?

48:09.920 --> 48:12.920
Well, generally, you sign a corner of it.

48:12.920 --> 48:13.920
Right?

48:13.920 --> 48:14.920
Some place on a page.

48:14.920 --> 48:17.920
And maybe there is a document that has 20 pages, but you don't sign for every page.

48:17.920 --> 48:18.920
Right?

48:18.920 --> 48:22.920
And even if you do sign every page, you don't sign the page.

48:22.920 --> 48:24.920
You sign a part of the page.

48:24.920 --> 48:25.920
Somewhere.

48:25.920 --> 48:30.920
Well, how difficult is it to, I don't know, get rid of your signature?

48:30.920 --> 48:35.920
Or cut out your signature and replace it with another piece of paper.

48:35.920 --> 48:40.920
Or take the pages of the document that you did not sign and replace them with some other

48:40.920 --> 48:41.920
pages.

48:41.920 --> 48:42.920
Or delete pages.

48:42.920 --> 48:43.920
Or insert pages.

48:43.920 --> 48:44.920
Right?

48:44.920 --> 48:49.920
So in a physical world, we kind of like, don't think about those things.

48:49.920 --> 48:50.920
But they're totally possible.

48:50.920 --> 48:51.920
Right?

48:51.920 --> 48:54.920
Now you think about recent real estate contracts, or God knows why.

48:54.920 --> 48:57.920
I mean, you sign one page and the rest may be your initial or something.

48:57.920 --> 48:59.920
Like, how does initial mean?

48:59.920 --> 49:02.920
Initial, there's no wait anywhere.

49:02.920 --> 49:03.920
Right?

49:03.920 --> 49:09.920
So, but in the digital world, digital signatures actually mean, it's like, when you sign something,

49:09.920 --> 49:12.920
you sign every bit of that.

49:12.920 --> 49:13.920
Okay?

49:13.920 --> 49:16.920
Every single bit of the message is signed.

49:16.920 --> 49:19.920
So it's strictly stronger.

49:19.920 --> 49:20.920
Right?

49:20.920 --> 49:26.920
So if Bob signs a document, he establishes that he creates the entire document and he is

49:26.920 --> 49:27.920
the one who creates it.

49:27.920 --> 49:28.920
Right?

49:28.920 --> 49:29.920
Yeah.

49:29.920 --> 49:39.920
So, with all that, and we already talked about it, right?

49:39.920 --> 49:41.920
So Bob basically uses this private key.

49:41.920 --> 49:43.920
I mean, I kind of jokingly say decrypt.

49:43.920 --> 49:44.920
We don't say decrypt.

49:44.920 --> 49:45.920
He signs.

49:45.920 --> 49:48.920
But Bob signs with the private key.

49:48.920 --> 49:51.920
And Alice verifies with the private key.

49:51.920 --> 49:55.920
But, of course, as I said before, we don't actually sign the message.

49:55.920 --> 49:59.920
We first hash the message and we sign the hash.

49:59.920 --> 50:06.920
And the idea is that the message and the hash are like, there's like an umbilical cord between

50:06.920 --> 50:07.920
the two.

50:07.920 --> 50:08.920
They're tied together.

50:08.920 --> 50:12.920
Because if you can replace the message with another message that has the same hash, you

50:12.920 --> 50:14.920
won the game.

50:14.920 --> 50:15.920
Right?

50:15.920 --> 50:16.920
Okay.

50:16.920 --> 50:18.920
So, this is all the same.

50:18.920 --> 50:19.920
Uh, no, no, no.

50:19.920 --> 50:20.920
Sign hash.

50:20.920 --> 50:21.920
I said all that.

50:21.920 --> 50:22.920
Boring.

50:22.920 --> 50:23.920
Boring.

50:23.920 --> 50:24.920
Okay.

50:24.920 --> 50:37.920
Now, we come back to what you raised, which is, okay, so what about this subtle headache?

50:37.920 --> 50:41.920
Not the big headache, but the subtle headache of how do we know, well, first of, where do

50:41.920 --> 50:42.920
we get the public key?

50:42.920 --> 50:44.920
How do we know they have the right public key?

50:44.920 --> 50:47.920
Well, that's called public key certification.

50:47.920 --> 50:48.920
Welcome to hell.

50:48.920 --> 50:49.920
Public key certification.

50:49.920 --> 50:54.920
This is something that we deal with every day today, even without knowing it.

50:54.920 --> 50:55.920
Right?

50:55.920 --> 51:00.920
So, what Alice obtains while it's public key, how does she know it's public key apart?

51:00.920 --> 51:01.920
Right?

51:01.920 --> 51:05.920
And the solution is called CA's, or Certification Authority.

51:05.920 --> 51:08.920
Maybe you've heard the term PKI.

51:08.920 --> 51:09.920
Right?

51:09.920 --> 51:11.920
Public key infrastructure.

51:11.920 --> 51:12.920
Right?

51:12.920 --> 51:15.920
That's what's required to solve this headache.

51:15.920 --> 51:17.920
Public key infrastructure.

51:17.920 --> 51:23.920
That is usually hierarchical structure of certification authorities.

51:23.920 --> 51:25.920
With some God on top.

51:25.920 --> 51:26.920
Right?

51:26.920 --> 51:27.920
The root of trust.

51:27.920 --> 51:28.920
Okay?

51:28.920 --> 51:29.920
Okay?

51:29.920 --> 51:31.920
Don't say to anybody I'm made by the religion.

51:31.920 --> 51:33.920
It's just a God in terms of public keys.

51:33.920 --> 51:34.920
Okay?

51:34.920 --> 51:39.920
So, public key God on top, and then branches, like in a tree, right?

51:39.920 --> 51:42.920
Going up to lower level certification authority.

51:42.920 --> 51:43.920
Okay?

51:43.920 --> 51:44.920
Okay?

51:44.920 --> 51:49.920
So, and then at some point, you know, at the bottom of the tree, the leaves are users.

51:49.920 --> 51:52.920
Or entities that are, that have public keys.

51:52.920 --> 51:54.920
And Alice's and Bob's.

51:54.920 --> 51:57.920
Or a web service.

51:57.920 --> 51:58.920
Right?

51:58.920 --> 52:00.920
In TLS there would be web service.

52:00.920 --> 52:03.920
Because what happens underneath when you go to a website.

52:03.920 --> 52:04.920
Right?

52:04.920 --> 52:05.920
You do.

52:05.920 --> 52:06.920
You type in a URL.

52:06.920 --> 52:07.920
Or you click on a URL.

52:07.920 --> 52:10.920
Your browser says, oh, cool.

52:10.920 --> 52:11.920
New things.

52:11.920 --> 52:14.920
Extracts the domain name part of the URL.

52:14.920 --> 52:15.920
Okay?

52:15.920 --> 52:18.920
Looks up using DNS.

52:18.920 --> 52:19.920
Right?

52:19.920 --> 52:22.920
And then collect.

52:22.920 --> 52:27.920
And then TLS, what it tries to do, it sees first checks in the local caches.

52:27.920 --> 52:29.920
Do I have already talked to this website?

52:29.920 --> 52:32.920
If I talk to this website, do I have a public key certificate for that?

52:32.920 --> 52:33.920
And the key is up.

52:33.920 --> 52:34.920
If yes, good.

52:34.920 --> 52:37.920
If not, then he needs to go and get it.

52:37.920 --> 52:39.920
And what is he going to get it?

52:39.920 --> 52:41.920
He's going to get it from the server.

52:41.920 --> 52:45.920
And the server's going to reply with his public key, but it better be a public key certificate

52:45.920 --> 52:48.920
because just saying a public key isn't enough.

52:48.920 --> 52:55.920
So actually, what your browser is going to do is make sure that the public key certificate

52:55.920 --> 53:02.920
that that server sends you is traceable to the root of some public key infrastructure

53:02.920 --> 53:05.920
that your browser trusts.

53:05.920 --> 53:08.920
And that comes back to that browser installation problem.

53:08.920 --> 53:13.920
The browser, when you installed it, pray to God, securely, blah, blah, blah.

53:13.920 --> 53:19.920
And it has some root of trust that says, I don't know, Panamanian Certification Authority.

53:19.920 --> 53:20.920
All right?

53:20.920 --> 53:22.920
Federal certification of Panamanian.

53:22.920 --> 53:23.920
Panamanian.

53:23.920 --> 53:24.920
Panamanian.

53:24.920 --> 53:26.920
And you are going to a bank in Panama somewhere, right?

53:26.920 --> 53:27.920
Your web browser.

53:27.920 --> 53:29.920
You're actually trying to connect to that.

53:29.920 --> 53:30.920
I don't know.

53:30.920 --> 53:32.920
Banco Central de Panama.

53:32.920 --> 53:35.920
And it gives you a public key certificate.

53:35.920 --> 53:41.920
And the public key certificate is signed by the Central Certification Authority of Panama.

53:41.920 --> 53:44.920
Okay, so what does your browser do?

53:44.920 --> 53:49.920
Your browser says, oh, I trust the Central Authority of Panama and its public key.

53:49.920 --> 53:54.920
I use its public key to verify the certificate of the central bank I'm going to.

53:54.920 --> 53:55.920
Is it verified?

53:55.920 --> 53:56.920
Yes.

53:56.920 --> 53:57.920
Is it expired?

53:57.920 --> 53:58.920
No.

53:58.920 --> 53:59.920
Good.

53:59.920 --> 54:00.920
This is a simple example.

54:00.920 --> 54:01.920
It could go deeper.

54:01.920 --> 54:06.920
Because the public key infrastructure could be deeper.

54:06.920 --> 54:07.920
Okay.

54:07.920 --> 54:16.920
So, in other words, we need these certification authorities as points of, like, trust.

54:16.920 --> 54:21.920
And what they do, really, what they do is bind public keys to entities.

54:21.920 --> 54:28.920
That's really the main function of the Certification Authority is to say, this guy has this public key.

54:28.920 --> 54:30.920
This guy has that public key.

54:30.920 --> 54:31.920
Okay?

54:31.920 --> 54:37.920
Now, before it all begins, somebody has to ask for a public key certificate.

54:37.920 --> 54:45.920
Meaning, if the bank in Panama wants to have a server and he wants that server to be securely connected to,

54:45.920 --> 54:51.920
he needs to obtain a public key certificate, which means it needs to generate a public key and a private key,

54:51.920 --> 54:56.920
go to the CA, and obtain a certificate.

54:56.920 --> 54:58.920
Pay money.

54:58.920 --> 55:02.920
Usually in the commercial world, you pay money to get a certificate.

55:02.920 --> 55:07.920
And you need to verify your identity, meaning you need to bring credentials.

55:07.920 --> 55:08.920
Right?

55:08.920 --> 55:13.920
So, a lot of this process is actually administrative and it takes place offline.

55:13.920 --> 55:17.920
Especially for, like, web servers, commercial entities.

55:17.920 --> 55:23.920
For people like us, no, we can get a certificate, a low-grade certificate, often for free.

55:23.920 --> 55:24.920
Okay?

55:24.920 --> 55:29.920
But the certificate will contain a group, essentially, some kind of a binding.

55:29.920 --> 55:30.920
Right?

55:30.920 --> 55:46.920
Essentially, it says, oh, this is Alice Smith, and this certificate is to be used for email only, and it's valid from this date until this date.

55:46.920 --> 55:50.920
And, um, I don't know, Alice lives in California.

55:50.920 --> 55:52.920
And here's the public key.

55:52.920 --> 55:53.920
I know it's called the public key.

55:53.920 --> 55:56.920
And also attached to the certificate is the signature.

55:56.920 --> 56:01.920
And, well, and the name of the CA, of the CA that issues the certificate and the signature.

56:01.920 --> 56:07.920
So it's not unlike a driver's license or a passport, in a way, if you think about it.

56:07.920 --> 56:13.920
Except your driver's license is a passport, well, actually, they do contain a key, but never mind you.

56:13.920 --> 56:16.920
Well, the way you look at them today, right, the driver's license is a passport.

56:16.920 --> 56:19.920
There are no cryptographic things in there.

56:19.920 --> 56:21.920
At least you don't see them.

56:21.920 --> 56:28.920
Now, if you have a recent driver's license or a fairly recent passport, chances are there are cryptographic keys inside them.

56:28.920 --> 56:33.920
Because there's, like, RFID, data, all sorts of biometric information inside them.

56:33.920 --> 56:36.920
That's not quite an analogy here.

56:36.920 --> 56:37.920
Right?

56:37.920 --> 56:38.920
So everybody understands?

56:38.920 --> 56:42.920
So, certificates are absolutely necessary.

56:42.920 --> 56:45.920
You cannot live without them today.

56:45.920 --> 56:52.920
So, when Alice wants to get Bob's public key, she needs to get it from somewhere.

56:52.920 --> 56:54.920
It doesn't matter, actually, where she finds it.

56:54.920 --> 56:58.920
So, for example, my public key, you could have found it on the floor somewhere.

56:58.920 --> 57:01.920
You could have picked it out from a garbage can.

57:01.920 --> 57:03.920
It's not important how you got it.

57:03.920 --> 57:06.920
And what's important is how you verify it.

57:06.920 --> 57:07.920
Okay?

57:07.920 --> 57:09.920
So, you get the certificate.

57:09.920 --> 57:12.920
The first thing you do is you check for expiration.

57:12.920 --> 57:14.920
Because it's cheap or something.

57:14.920 --> 57:15.920
You look at it.

57:15.920 --> 57:16.920
Is the certificate expired?

57:16.920 --> 57:18.920
No, it's expired.

57:18.920 --> 57:20.920
Why bother checking anything else?

57:20.920 --> 57:21.920
Is it valid yet?

57:21.920 --> 57:25.920
Meaning, is it a certificate that is not valid yet, but will be valid in the future?

57:25.920 --> 57:26.920
It's not valid yet.

57:26.920 --> 57:29.920
No point in checking anything.

57:29.920 --> 57:30.920
Okay.

57:30.920 --> 57:33.920
Now, you check for validity.

57:33.920 --> 57:35.920
Meaning, you check the CA's public key.

57:35.920 --> 57:39.920
Assuming you trust the CA's public key, very widely, the signatures.

57:39.920 --> 57:40.920
Right?

57:40.920 --> 57:42.920
Ah, but you're not done yet.

57:42.920 --> 57:43.920
Not done.

57:43.920 --> 57:48.920
Because a certificate is what's called in operating systems, or in general, a capability.

57:48.920 --> 57:51.920
Maybe you've heard before in other classes.

57:51.920 --> 57:54.920
A capability is like a bearer document.

57:54.920 --> 57:56.920
Like a driver's license is a capability.

57:56.920 --> 57:57.920
A passport is a capability.

57:57.920 --> 57:59.920
It's given to you.

57:59.920 --> 58:00.920
You have it.

58:00.920 --> 58:03.920
But if you behave badly, it could be reformed.

58:03.920 --> 58:05.920
A visa is another capability.

58:05.920 --> 58:06.920
It could be reformed.

58:06.920 --> 58:07.920
A driver's license could be reformed.

58:07.920 --> 58:08.920
A passport could be reformed.

58:08.920 --> 58:11.920
Well, same thing with public key certificates.

58:11.920 --> 58:18.920
And because you could have found my public key certificate anywhere, you have no idea if it's been reformed.

58:18.920 --> 58:19.920
Right?

58:19.920 --> 58:20.920
Because it's still valid.

58:20.920 --> 58:21.920
It says valid.

58:21.920 --> 58:23.920
It expires in 2029.

58:23.920 --> 58:25.920
And valid from 2021.

58:25.920 --> 58:26.920
Great.

58:26.920 --> 58:32.920
But how do you know I haven't behaved badly and it's been reformed since?

58:32.920 --> 58:34.920
Or maybe I've lost my credibility.

58:34.920 --> 58:36.920
There are many reasons it's been reformed.

58:36.920 --> 58:39.920
Some of them have nothing to do with my bad behavior.

58:39.920 --> 58:40.920
Maybe I've been robbed.

58:40.920 --> 58:44.920
Maybe a gun was put to my head and I was forced to devolve my privacy.

58:44.920 --> 58:45.920
Certificate is gone.

58:45.920 --> 58:46.920
Right?

58:46.920 --> 58:47.920
It should be revoked.

58:47.920 --> 58:53.920
And the only person or the only entity in the world that knows that it's revoked is the issuing CA.

58:53.920 --> 58:54.920
Right?

58:54.920 --> 58:56.920
Don't ask me.

58:56.920 --> 58:58.920
I might not want to tell you.

58:58.920 --> 59:01.920
Or I'll tell you now why.

59:01.920 --> 59:09.920
The only authoritative entity in the world that knows whether my certificate is revoked or not is the issuing CA.

59:09.920 --> 59:15.920
Just like the only entity in the world that can tell you whether your U.S. passport is revoked is the U.S. State Department.

59:15.920 --> 59:16.920
Okay?

59:16.920 --> 59:22.920
Or the only entity that can tell you if your California license is valid is DMV in California.

59:22.920 --> 59:26.920
So don't ask DMV in Illinois or federal government.

59:26.920 --> 59:27.920
Ask DMV in California.

59:27.920 --> 59:28.920
That's the CA.

59:28.920 --> 59:29.920
Say again.

59:29.920 --> 59:32.920
So that means somehow you need to check for revocation.

59:32.920 --> 59:35.920
That's another headache.

59:35.920 --> 59:37.920
Another big headache.

59:37.920 --> 59:38.920
Revocation.

59:38.920 --> 59:45.920
And once you've solved all those problems and passed all those tests, then you extract the public key and then you can verify the signature.

59:45.920 --> 59:46.920
Amazing.

59:46.920 --> 59:47.920
Right.

59:47.920 --> 59:53.920
And, okay, this is a very old fashioned format.

59:53.920 --> 59:56.920
Public key certificates don't look like that anymore because this is old.

59:56.920 --> 59:58.920
But essentially it could look like that.

59:58.920 --> 01:00:11.920
And if you go into your browser or if you use like a mail client like I do, like Thunderbird, you can go into it and the cuts of it will see what a public key, or should display what public key certificates look like.

01:00:11.920 --> 01:00:14.920
And they look a bit more complex than what you see here.

01:00:14.920 --> 01:00:19.920
But basically the idea is to show you, okay, it says this certificate belongs to, to whom it was issued.

01:00:19.920 --> 01:00:20.920
Right?

01:00:20.920 --> 01:00:24.920
This, in this case, the certificate belongs to another CA.

01:00:24.920 --> 01:00:25.920
Right?

01:00:25.920 --> 01:00:27.920
Because CA themselves have certificates.

01:00:27.920 --> 01:00:28.920
Who was it issued to?

01:00:28.920 --> 01:00:34.920
Oh, in this case, it was issued by itself.

01:00:34.920 --> 01:00:36.920
Weird, right?

01:00:36.920 --> 01:00:40.920
Certificate issued to an entity by the same entity.

01:00:40.920 --> 01:00:43.920
Does that make any sense?

01:00:43.920 --> 01:00:47.920
Not, not, not, not like immediately, but you think about it.

01:00:47.920 --> 01:00:49.920
Who certifies God?

01:00:49.920 --> 01:00:53.920
I mean, really, right?

01:00:53.920 --> 01:00:55.920
If you're a God of your own public key infrastructure, right?

01:00:55.920 --> 01:00:57.920
You're like a root of the tree.

01:00:57.920 --> 01:00:58.920
Who's going to certify you?

01:00:58.920 --> 01:01:00.920
The only choice you have is to certify yourself.

01:01:00.920 --> 01:01:02.920
That's called a self-signed certificate.

01:01:02.920 --> 01:01:03.920
Right?

01:01:03.920 --> 01:01:10.920
So when you get your browser installation, for example, like a new browser installation, it comes with all these roots of trust.

01:01:10.920 --> 01:01:12.920
They're usually self-signed.

01:01:12.920 --> 01:01:13.920
Okay?

01:01:13.920 --> 01:01:14.920
For that reason.

01:01:14.920 --> 01:01:16.920
Because there's no global world authority.

01:01:16.920 --> 01:01:18.920
You know what I mean?

01:01:18.920 --> 01:01:21.920
Couldn't it be like a cycle or something?

01:01:21.920 --> 01:01:24.920
Because there are multiple CA's, right?

01:01:24.920 --> 01:01:26.920
Sometimes they sign each other.

01:01:26.920 --> 01:01:27.920
Right.

01:01:27.920 --> 01:01:28.920
Like I vouch for that guy.

01:01:28.920 --> 01:01:31.920
And so that's called a peer sign.

01:01:31.920 --> 01:01:32.920
Right.

01:01:32.920 --> 01:01:33.920
They will do it.

01:01:33.920 --> 01:01:34.920
And that's, that's, that happens.

01:01:34.920 --> 01:01:35.920
That happens.

01:01:35.920 --> 01:01:39.920
I don't think it happens in browsers, but it happens in other, in other applications.

01:01:39.920 --> 01:01:42.920
Why would they allow self-signing if that is an option?

01:01:42.920 --> 01:01:44.920
Ah, because at least it preserves the tech.

01:01:44.920 --> 01:01:47.920
So, ah, good point, good point.

01:01:47.920 --> 01:01:49.920
Um, self-signing in general is useful.

01:01:49.920 --> 01:01:54.920
It's better than nothing because it tells you that whoever signed it knows the private key.

01:01:54.920 --> 01:01:58.920
Otherwise they just say, here's my private public key and it's complete nonsense.

01:01:58.920 --> 01:02:02.920
At least I know whoever, whoever self-signed knows the private key.

01:02:02.920 --> 01:02:03.920
All right.

01:02:03.920 --> 01:02:08.920
So it says who, to whom it belongs, by whom it was issued, always a serial number.

01:02:08.920 --> 01:02:09.920
There is always a serial number.

01:02:09.920 --> 01:02:12.920
It must be unique per seat, per issuer.

01:02:12.920 --> 01:02:19.920
So you can definitely see two certificates with exactly the same serial number, but they

01:02:19.920 --> 01:02:20.920
apply different issues.

01:02:20.920 --> 01:02:24.920
So the combination of issuer serial number must be unique.

01:02:24.920 --> 01:02:27.920
Uh, that is valid from.

01:02:27.920 --> 01:02:28.920
Okay.

01:02:28.920 --> 01:02:31.920
So this is super old, 1996 to 2028.

01:02:31.920 --> 01:02:32.920
Pretty generous, right?

01:02:32.920 --> 01:02:33.920
32 year validity.

01:02:33.920 --> 01:02:35.920
Nobody issued certificates this long.

01:02:35.920 --> 01:02:36.920
This used to be the case.

01:02:36.920 --> 01:02:40.920
People were much more optimistic in the beginning of the internet.

01:02:40.920 --> 01:02:45.920
Uh, but yeah, it says, you must say from to.

01:02:45.920 --> 01:02:46.920
Always.

01:02:46.920 --> 01:02:49.920
Fingerprint is a hash of a certificate.

01:02:49.920 --> 01:02:50.920
Right?

01:02:50.920 --> 01:02:52.920
That's just for integrity and checking.

01:02:52.920 --> 01:02:54.920
And then you see there's like other stuff there.

01:02:54.920 --> 01:02:56.920
It's like, this certificate belongs to the certifying authority.

01:02:56.920 --> 01:02:59.920
Accept the certificate for certifying human subject.

01:02:59.920 --> 01:03:03.920
Like for example, this certificate should never be used for web authentication.

01:03:03.920 --> 01:03:04.920
Right?

01:03:04.920 --> 01:03:09.920
It will not work with TLS because, you see, this says only email.

01:03:09.920 --> 01:03:11.920
So this is for sending email.

01:03:11.920 --> 01:03:12.920
Only.

01:03:12.920 --> 01:03:13.920
Now in reality, one second.

01:03:13.920 --> 01:03:18.920
In reality, the formula certificate is pretty abstruse.

01:03:18.920 --> 01:03:23.920
There's a standard called X509.

01:03:23.920 --> 01:03:26.920
To be precise, X509 version 3.

01:03:26.920 --> 01:03:28.920
That's an international standard.

01:03:28.920 --> 01:03:35.920
And if you do a quick web search on X509v3, you'll see a ASN1 notation.

01:03:35.920 --> 01:03:37.920
If you know what that means.

01:03:37.920 --> 01:03:42.920
Specification, again, not for the faint of heart.

01:03:42.920 --> 01:03:44.920
It's very sleep inducing.

01:03:44.920 --> 01:03:48.920
It tells you all these fields that must be found in a certificate.

01:03:48.920 --> 01:03:50.920
Some are mandatory.

01:03:50.920 --> 01:03:53.920
Like most of the fields we've covered here are mandatory.

01:03:53.920 --> 01:03:55.920
And then there are lots of options.

01:03:55.920 --> 01:03:56.920
Okay?

01:03:56.920 --> 01:03:58.920
Like some certificates don't even have a key.

01:03:58.920 --> 01:04:00.920
There are like authorization certificates.

01:04:00.920 --> 01:04:03.920
You know, some are like assigned to a goal or something like that.

01:04:03.920 --> 01:04:04.920
Question?

01:04:04.920 --> 01:04:05.920
Yes.

01:04:05.920 --> 01:04:08.920
I'm just wondering why we need to pay for the certificate.

01:04:08.920 --> 01:04:09.920
And the, yeah.

01:04:09.920 --> 01:04:12.920
Well, you, you, so, so, you is a individual, right?

01:04:12.920 --> 01:04:13.920
A student.

01:04:13.920 --> 01:04:14.920
Yeah, yeah.

01:04:14.920 --> 01:04:15.920
You can get a free certificate.

01:04:15.920 --> 01:04:20.920
Like there are, there are, if you want, I can, I can tell you the next time.

01:04:20.920 --> 01:04:26.920
There are services that will give you a low grade, low grade certificate, but just saying,

01:04:26.920 --> 01:04:29.920
oh, you know, here's an email address.

01:04:29.920 --> 01:04:30.920
Give us your email address.

01:04:30.920 --> 01:04:31.920
You enter your email address.

01:04:31.920 --> 01:04:37.920
As long as you're a student at UCIEDU, they'll do a verification, like one of those, you

01:04:37.920 --> 01:04:38.920
know, send your code, right?

01:04:38.920 --> 01:04:41.920
Verify that you own this email address or access it.

01:04:41.920 --> 01:04:43.920
And they'll issue you a certificate.

01:04:43.920 --> 01:04:47.920
Commercial entities or high grades.

01:04:47.920 --> 01:04:50.920
Well, because the certification authorities are businesses.

01:04:50.920 --> 01:04:52.920
What do they do?

01:04:52.920 --> 01:04:55.920
Oh, they make money on this.

01:04:55.920 --> 01:04:56.920
Yeah, yeah, yeah.

01:04:56.920 --> 01:04:57.920
Oh, but okay.

01:04:57.920 --> 01:04:58.920
Okay.

01:04:58.920 --> 01:05:01.920
Not that I love them or have any connection to any situation.

01:05:01.920 --> 01:05:02.920
But consider this.

01:05:02.920 --> 01:05:04.920
If you are a CEA, right?

01:05:04.920 --> 01:05:11.920
And you do have a for profit business, you need to be amazingly secure.

01:05:11.920 --> 01:05:18.920
Because the key that you sign, certificates, is like the family jewels.

01:05:18.920 --> 01:05:24.920
If somebody gets that key, they can now impersonate you and issue certificates.

01:05:24.920 --> 01:05:25.920
This is super dangerous.

01:05:25.920 --> 01:05:26.920
Your whole reputation is gone.

01:05:26.920 --> 01:05:28.920
You lose all your customers overnight.

01:05:28.920 --> 01:05:29.920
Right?

01:05:29.920 --> 01:05:33.920
Your key leaks and your business is dead.

01:05:33.920 --> 01:05:34.920
Like suicide immediately.

01:05:34.920 --> 01:05:37.920
Now, does anybody know the word Stuxnet?

01:05:37.920 --> 01:05:41.920
How many people heard of the word Stuxnet?

01:05:41.920 --> 01:05:42.920
Not many.

01:05:42.920 --> 01:05:44.920
God, guys, here we go.

01:05:44.920 --> 01:06:01.920
Stuxnet, 2014 timeframe, was an incident when a malware made its way into Natanz nuclear reactor

01:06:01.920 --> 01:06:14.920
in Iran and severely and irreplaceably damaged centrifuges, or uranium centrifuges, producing centrifuges in that facility.

01:06:14.920 --> 01:06:15.920
Okay.

01:06:15.920 --> 01:06:19.920
Now, that malware jumped what's called air gaps.

01:06:19.920 --> 01:06:22.920
Meaning that Iranian nuclear facility, Iranian is not stupid.

01:06:22.920 --> 01:06:24.920
It is not connected to the internet.

01:06:24.920 --> 01:06:25.920
Okay?

01:06:25.920 --> 01:06:30.920
But it means there's an air gap between the internet and that facility.

01:06:30.920 --> 01:06:34.920
Like it is in the United States and many places.

01:06:34.920 --> 01:06:47.920
So that malware came in the form of a software update for a PLC, Programming Logic Controller,

01:06:47.920 --> 01:06:52.920
that was operating these turbines, the centrifuge turbines in the nuclear plant.

01:06:52.920 --> 01:06:54.920
Why am I telling you this story?

01:06:54.920 --> 01:07:09.920
Because the software update was signed, digitally signed, by a CA in Taiwan that was compromised.

01:07:09.920 --> 01:07:11.920
Okay?

01:07:11.920 --> 01:07:16.920
So, nobody knows for a fact who did it.

01:07:16.920 --> 01:07:29.920
But everybody kind of knows that it's very likely Mossad and the NSA together mounted this joint operation to retard the Iranian nuclear weapons program.

01:07:29.920 --> 01:07:30.920
Okay?

01:07:30.920 --> 01:07:33.920
To do so, it was a massive logistic operation.

01:07:33.920 --> 01:07:35.920
They had to patiently wait.

01:07:35.920 --> 01:07:38.920
This malware did not infect computers outside Iran.

01:07:38.920 --> 01:07:41.920
It actually was very like, am I in Iran?

01:07:41.920 --> 01:07:42.920
No.

01:07:42.920 --> 01:07:44.920
Sometimes it would delete itself.

01:07:44.920 --> 01:07:50.920
And then it would like, look, am I running on a particular Windows industrial system, Windows control?

01:07:50.920 --> 01:07:51.920
Oh, okay.

01:07:51.920 --> 01:07:52.920
Then is it made by Siemens?

01:07:52.920 --> 01:07:58.920
Because it particularly targeted specific turbines made by Siemens, which is a German company, right?

01:07:58.920 --> 01:08:05.920
And they knew that whoever did this knew that the Siemens PLC turbines were running inside this nuclear reactor.

01:08:05.920 --> 01:08:10.920
In Iran, it would make them essentially spin at such speed that they burned out or something like that.

01:08:10.920 --> 01:08:12.920
I don't know the exact details.

01:08:12.920 --> 01:08:19.920
What we do know is that they were damaged beyond repair and severely retarded the Iranian nuclear program.

01:08:19.920 --> 01:08:21.920
Now, does that answer your question?

01:08:21.920 --> 01:08:22.920
Or not yet?

01:08:22.920 --> 01:08:33.920
The moral of the story is somebody got into the supply chain there and stole the private key of that CA in Taiwan.

01:08:33.920 --> 01:08:47.920
Without that, this whole incident would have not happened because they started signing certificates for code distribution and then allowed whoever mounted the attack to sign fake code distribution.

01:08:47.920 --> 01:08:48.920
Right?

01:08:48.920 --> 01:08:49.920
The code updates.

01:08:49.920 --> 01:08:50.920
Right?

01:08:50.920 --> 01:08:51.920
You get the idea?

01:08:51.920 --> 01:08:52.920
Yeah.

01:08:52.920 --> 01:08:56.920
So one thing leads to another, to another, to another.

01:08:56.920 --> 01:09:03.920
So that's why if you are a CA, if you're running a CA as a business, you need to have amazing, not just electronic, but physical security.

01:09:03.920 --> 01:09:15.920
Because chances are all these, these kinds of attacks start with some amount of social engineering that involve humans and bribery, et cetera, et cetera.

01:09:15.920 --> 01:09:20.920
So physical security for a CA business is extremely important.

01:09:20.920 --> 01:09:24.920
So, and of course, disconnection from the internet.

01:09:24.920 --> 01:09:27.920
Typically CA will not run accessible from the internet.

01:09:27.920 --> 01:09:28.920
At least not high grade CA.

01:09:28.920 --> 01:09:29.920
They will be disconnected.

01:09:29.920 --> 01:09:35.920
They will actually be a human interface between, let's say requests will come in to issue certificates.

01:09:35.920 --> 01:09:42.920
And then at the end of the day, somebody will like bunch up those requests and physically like carry them over to the actual CA.

01:09:42.920 --> 01:09:53.920
So I'm in a bunker, you know, in a Faraday cage room and feed them to the CA and then get certificates and come out and turn off the CA.

01:09:53.920 --> 01:09:57.920
So basically the idea is this has to be a very secure operation.

01:09:57.920 --> 01:10:02.920
And so it's not, it's not, it's not like so easy to run a CA.

01:10:02.920 --> 01:10:05.920
So today's, today, I mean, you have all kinds of CAs.

01:10:05.920 --> 01:10:11.920
Of course, if you go to some third world place, like, I don't know, middle of nowhere, you know, Marshall Islands, you know,

01:10:11.920 --> 01:10:18.920
their CA is not going to be as secure as a CA in France, you know, but the prices will also be different, right?

01:10:18.920 --> 01:10:24.920
And the trust people will have in the certificate issued by a CA in like Solomon Islands in Vanuatu

01:10:24.920 --> 01:10:32.920
would be different from a, from a certificate issued, let's say by some reputable California authority.

01:10:32.920 --> 01:10:33.920
Yeah.

01:10:33.920 --> 01:10:36.920
So this is all, it's not super technical, right?

01:10:36.920 --> 01:10:39.920
This is all very reputation.

01:10:39.920 --> 01:10:40.920
Yeah.

01:10:40.920 --> 01:10:41.920
All right.

01:10:41.920 --> 01:10:43.920
So that's done to be done.

01:10:43.920 --> 01:10:44.920
Yes.

01:10:44.920 --> 01:10:45.920
See you on Thursday.

01:10:45.920 --> 01:10:50.920
So if you haven't yet again, start thinking about who you're going to work with, what you're

01:10:50.920 --> 01:10:53.920
going to work on in the project.

01:10:53.920 --> 01:10:59.920
If you have questions, by the way, was somebody there yesterday because I had some music playing

01:10:59.920 --> 01:11:04.920
in my office and not yesterday, Monday, yeah, Monday yesterday.

01:11:04.920 --> 01:11:08.920
And I may have missed somebody not yesterday in the office hours.

01:11:08.920 --> 01:11:09.920
No?

01:11:09.920 --> 01:11:10.920
Okay.

01:11:10.920 --> 01:11:11.920
Good.

01:11:11.920 --> 01:11:12.920
Good.

01:11:12.920 --> 01:11:13.920
Good.


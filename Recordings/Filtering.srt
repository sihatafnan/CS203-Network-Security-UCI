1
00:00:00,000 --> 00:00:06,640
mean, what is it that you want to protect? Things on the inside. To be strictly strict

2
00:00:06,640 --> 00:00:13,320
about it, I mean, this is sort of an old-fashioned intranet, but really it's like the private

3
00:00:13,320 --> 00:00:18,900
network. And it has all this trust, the posts and other stuff and other networks and equipment

4
00:00:18,900 --> 00:00:26,740
and printers and, I don't know, IoT devices and whatever you have. I think there's a big

5
00:00:26,740 --> 00:00:33,740
bad world outside. If the world wasn't bad, we wouldn't need firewall. So the world is

6
00:00:33,740 --> 00:00:40,680
big and the world is bad. And the typical thing here is that you have a router that connects

7
00:00:40,680 --> 00:00:47,120
you to the, like ISP, right? Or if you are, if the organization itself is already its own

8
00:00:47,120 --> 00:00:52,160
ISP, connects you to the long haul. Remember autonomous systems? Yeah, I'm talking about

9
00:00:52,160 --> 00:00:57,380
autonomous domain, autonomous systems that provide like long distance services. So anyway,

10
00:00:57,380 --> 00:01:02,300
this connects you to the rest of the world. And then here you have this firewall. And the

11
00:01:02,300 --> 00:01:08,600
firewall is your sort of first line of defense, right? Router is not a firewall. Sometimes

12
00:01:08,600 --> 00:01:13,160
they can live in the same platform, but logically a router and a firewall are two very different

13
00:01:13,160 --> 00:01:20,160
things. Router's job, main job, is to route packets and to maintain a routing table and

14
00:01:20,160 --> 00:01:26,160
to exchange information with other routers about reachability and congestion and all things

15
00:01:26,160 --> 00:01:35,160
like that. It does not generally perform security tasks. Its main job is not security. Firewall's

16
00:01:35,160 --> 00:01:42,160
main job, the only job is security. There's no other job that a firewall has, just security.

17
00:01:42,160 --> 00:01:52,160
Now here, this is again a bit old fashioned terminology, but often referred to as DMZ or demilitarized

18
00:01:52,160 --> 00:02:00,160
zones. Okay? So this is where you put your publicly accessible servers, like your web server,

19
00:02:00,160 --> 00:02:09,160
right? Or your VPN server, or some other server, or customer support, whatever. So things that

20
00:02:09,160 --> 00:02:15,160
you want to be accessible from the outside with less scrutiny, anybody should be able to access

21
00:02:15,160 --> 00:02:22,160
at least the company web server, right? Every company that, you know, unless they're super secretive,

22
00:02:22,160 --> 00:02:31,160
right? 99% and more probably of the entities, right? Commercial entities have web presence. What

23
00:02:31,160 --> 00:02:35,160
that means is they have a web server. Now some of them do it like this. Some of them host a

24
00:02:35,160 --> 00:02:45,160
web server out on a third party provider. Okay? But many do this. They just put it in a DMZ. And

25
00:02:45,160 --> 00:02:54,160
the firewall will make sure that traffic can go to the DMZ with no scrutiny. But the DMZ itself

26
00:02:54,160 --> 00:03:00,160
is separate, physically disconnected from the rest. So there's no line. If there is a line

27
00:03:00,160 --> 00:03:07,160
here, that's a recipe for a disaster. Okay? So if there's anything you remember, or one of

28
00:03:07,160 --> 00:03:12,160
the few things you should remember about this lecture, that if you have a DMZ, its only connection

29
00:03:12,160 --> 00:03:26,160
should be to the firewall. Okay? And there should be zero connection here. Okay? So I already

30
00:03:26,160 --> 00:03:32,160
mentioned the moat. But, important thing, before you start thinking and have your mindset

31
00:03:32,160 --> 00:03:39,160
that O is a big bad world and we ought to protect our precious resources from the big bad world.

32
00:03:39,160 --> 00:03:46,160
It is true, but it's not the entire truth. In addition to that, you want to protect yourself from

33
00:03:46,160 --> 00:03:59,160
things coming out. Why do you care about things coming out? Not just going in. Anybody?

34
00:03:59,160 --> 00:04:06,160
We are a military or some company with some security technology. Okay? Let's develop this. Let's go

35
00:04:06,160 --> 00:04:13,160
further. What is the general thing we are looking for here? To prevent?

36
00:04:13,160 --> 00:04:21,160
Yeah, yeah, yeah. But what kind of attacks?

37
00:04:21,160 --> 00:04:26,160
Perfect shovel. Okay? Perfect shovel.

38
00:04:26,160 --> 00:04:36,160
Okay? But there's a term for this. We used that term before. Insider attacks. Insider attack.

39
00:04:36,160 --> 00:04:43,160
Rogue employees, right? They happen, right? Rogue employees. Somebody knows they are going

40
00:04:43,160 --> 00:04:49,160
to be axed on a day tomorrow. They can cause damage. They can put a bomb, a logic bomb somewhere.

41
00:04:49,160 --> 00:04:56,160
They can exfiltrate the information. What about malware? Joe Schmo comes to work.

42
00:04:56,160 --> 00:05:04,160
Total doofus. Not a malicious person. Sticks a USB that he brought from home to watch some movies

43
00:05:04,160 --> 00:05:11,160
during lunch break into his work computer. And damn! Malware jumps from USB over to the laptop

44
00:05:11,160 --> 00:05:18,160
or desktop and starts exfiltrating sensitive information. You have an unwitting insider.

45
00:05:18,160 --> 00:05:24,160
But essentially what you have is malware. Okay? That sits on the inside and exfiltrates information.

46
00:05:24,160 --> 00:05:29,160
That is why it is very important to control who goes in and who goes out. Just like in a castle

47
00:05:29,160 --> 00:05:34,160
with a moat. It's not there just to control who comes in. It's also to see what comes out.

48
00:05:34,160 --> 00:05:47,160
So make sure you remember that. The firewall is two-way. So location of course as you saw

49
00:05:47,160 --> 00:05:53,160
in the picture is typically between the external and internal network, right? It could also be

50
00:05:53,160 --> 00:06:02,160
inside your private network separating various parts, various departments. That makes sense.

51
00:06:02,160 --> 00:06:09,160
It makes sense. It makes sense in certain government agencies like three-letter agencies. It makes sense

52
00:06:09,160 --> 00:06:16,160
in military settings, right? Where you have strict compartmentalization of information. That there

53
00:06:16,160 --> 00:06:21,160
would be a firewall even within the internal network, right? But that means that the internal network

54
00:06:21,160 --> 00:06:31,160
is sort of naturally subdivided into smaller networks. Okay? You could also have it on your own machine.

55
00:06:31,160 --> 00:06:38,160
On your own machine. So if you are running Windows, you might be running a personal firewall, right?

56
00:06:38,160 --> 00:06:44,160
Microsoft personal firewall. I think on Linux, there is also like at least several packages

57
00:06:44,160 --> 00:06:50,160
that will install a local firewall for you. Anybody configured their own firewall?

58
00:06:50,160 --> 00:07:01,160
You and I? Nobody else? Nobody uses Windows? Nobody uses Linux? Okay. It's so fine. Most people

59
00:07:01,160 --> 00:07:09,160
don't come across this. Okay, so important thing. That firewall is a nice concept, but it essentially

60
00:07:09,160 --> 00:07:16,160
leaves a lot of room for deciding where to put it. Which layer? Remember the session, sorry, remember the

61
00:07:16,160 --> 00:07:23,160
sort of rough seven layer hierarchy, right? Network particles, right? Network particles stack. Why?

62
00:07:23,160 --> 00:07:33,160
You don't put it in the physical layer. Okay? That's like silly. You don't put it in the MAC layer because

63
00:07:33,160 --> 00:07:39,160
the MAC or data layer because that's one hump, right? And it's like, what's the point of a firewall?

64
00:07:39,160 --> 00:07:50,160
It's at the MAC layer. So the lowest layer where you can place the firewall is the network layer.

65
00:07:50,160 --> 00:07:59,160
Because remember the network layer is hopping around the internet. It's the common layer of the entire internet.

66
00:07:59,160 --> 00:08:06,160
So you cannot put it lower than the network layer. How high can you put it? Well, you can put it all the way

67
00:08:06,160 --> 00:08:17,160
up to the application layer. And that leaves a lot of choice. Okay? So the simplest one is the packet

68
00:08:17,160 --> 00:08:24,160
possession filtering router that is placed at roughly the network layer. Roughly, I say kind of, let's say

69
00:08:24,160 --> 00:08:32,160
you're doing the network energy. Another approach is called proxy gateway. But proxy gateway means

70
00:08:32,160 --> 00:08:40,160
that actually traffic terminates. So instead of just examining packets one by one, this proxy gateway

71
00:08:40,160 --> 00:08:47,160
will actually like terminate the connection. And we start a new one. So it will be like stitching out

72
00:08:47,160 --> 00:08:57,160
two connections. Does that make sense? Right? And this can be done at circuit level, which is application

73
00:08:57,160 --> 00:09:10,160
independent, using sockets, right? Socket layer. And then it can also be done at application level layer. And that

74
00:09:10,160 --> 00:09:20,160
requires designing kind of a custom application gateway. Right? And maybe, I suspect some of you have

75
00:09:20,160 --> 00:09:26,160
already seen this in the real world. If you weren't like in the real world, you may have seen this. Okay?

76
00:09:26,160 --> 00:09:32,160
These types of things. And then of course the personal firewall, you set up your own rules and this could

77
00:09:32,160 --> 00:09:38,160
work at almost any layer, but generally it's a network layer. So we're not going to talk much about this. We're going to

78
00:09:38,160 --> 00:09:53,160
focus on the first two, the packet and proxy gateway. Questions so far? Okay. So just a pictorial representation of

79
00:09:53,160 --> 00:10:02,160
what I just mentioned. Internet and then you have this security perimeter, right? Which is a network security perimeter

80
00:10:02,160 --> 00:10:12,160
where your private network is located. And this packet filtering router, which is the firewall, located there. And

81
00:10:12,160 --> 00:10:19,160
all it does, it does it fast. Because it looks at a packet at a time, and it doesn't keep state about anything.

82
00:10:19,160 --> 00:10:29,160
It just looks at one packet and says, source, destination, protocol, maybe what's the next protocol, maybe

83
00:10:29,160 --> 00:10:36,160
port number, and like length and things like that. It says, what is this? What is this? Do I let it go or do I not?

84
00:10:36,160 --> 00:10:45,160
So it just makes a decision. Let it go or drop. Very quickly. Okay? It does not consult much except maybe some

85
00:10:45,160 --> 00:10:56,160
kind of a table. Okay? You'll see an example. Then you have a circuit level gateway, which basically splices connections.

86
00:10:56,160 --> 00:11:05,160
So here you have an outside connection, let's say, that terminates here. And if you took a networking course, you've seen

87
00:11:05,160 --> 00:11:13,160
the concept of virtual circuits, right? So essentially, this is a virtual circuit. Right? So there's one that goes

88
00:11:13,160 --> 00:11:24,160
in here, in, and then it's translated into this. So this allows, you know, circuit level filtering. Right? Because it's all

89
00:11:24,160 --> 00:11:33,160
socket based. Okay? But port based, if you will. And here you have application level gateway, where what happens

90
00:11:33,160 --> 00:11:39,160
is you want to, let's say, telnet, right? Remote telnet, like a remote login, right? You want a remote login

91
00:11:39,160 --> 00:11:48,160
from the outside to the inside. But what you first do is you actually log in to this application level gateway.

92
00:11:48,160 --> 00:11:56,160
That's like a first line. And then from there you go to the actual place inside you want to go. So it's

93
00:11:56,160 --> 00:12:03,160
really like translating to telnet session, to telnet session. One to here and one to here. And the same

94
00:12:03,160 --> 00:12:17,160
would go for file transfer, SMTP, HTTP, etc. It's a real like proxy. Okay? And so this has the most information

95
00:12:17,160 --> 00:12:24,160
about traffic, right? Because this looks at the actual application. So if an application

96
00:12:24,160 --> 00:12:31,160
is not allowed, there's no proxy, the traffic is discarded by this gateway. So for example,

97
00:12:31,160 --> 00:12:36,160
if you try to use, I don't know, some strange protocol that is not supported, right? Some kind

98
00:12:36,160 --> 00:12:41,160
of a, some kind of a new app or something that's not supported. It says, oh, I only support telnet

99
00:12:41,160 --> 00:12:48,160
TPS and TPS to be by. Okay? Whereas a certain level admin might not, might not notice that,

100
00:12:48,160 --> 00:12:58,160
right? Because it doesn't see the application context. Yeah. So starting with, let's start

101
00:12:58,160 --> 00:13:06,160
with packet filtering. So as I said, the decision is done per packet, without any other context

102
00:13:06,160 --> 00:13:12,160
of whether this packet is part of a connection or not. Just look at individual packets. Okay?

103
00:13:12,160 --> 00:13:19,160
What does it look for? Mainly IP source destination address and port numbers.

104
00:13:19,160 --> 00:13:26,160
Protocol identifier, remember the IP header has protocol identifier. And when I say port

105
00:13:26,160 --> 00:13:32,160
numbers, of course port numbers are not inside the IP header. That's inside TCP header or UDP header.

106
00:13:32,160 --> 00:13:41,160
So look at both network layer and transport layer. There are some super simple firewalls,

107
00:13:41,160 --> 00:13:47,160
also packet level filters that only look at the IP header. It's faster that way. Okay?

108
00:13:47,160 --> 00:13:57,160
And I'll tell you why it's faster. Because remember IP has fragmentation. Remember I talked about

109
00:13:57,160 --> 00:14:11,160
how IPv4 has fragmentation. So when the TCP segment is given to IP on the sending side, it could be large. Yeah?

110
00:14:11,160 --> 00:14:20,160
And so the IP then will, if it's too large to be fit in one IP packet, it will chop it in fragments.

111
00:14:20,160 --> 00:14:31,160
Well, only the first fragment will have the TCP header. Right? The other fragments could be like in the middle, right?

112
00:14:31,160 --> 00:14:39,160
Or somewhere. So they won't have a TCP header. So you can't check the port numbers. Not good. Right?

113
00:14:39,160 --> 00:14:44,160
If you want to filter by port numbers, you can't. Although the IP header won't tell you is the next

114
00:14:44,160 --> 00:14:48,160
protocol is TCP. But it won't tell you what the port numbers are because the header isn't present in the

115
00:14:48,160 --> 00:14:55,160
fragment. So that presents a problem. Also, you will, so one way to do so is to disallow fragments.

116
00:14:55,160 --> 00:15:00,160
So some of these packet filters, right? These packet filtering gateway, they will discard

117
00:15:00,160 --> 00:15:05,160
fragmented packets. They simply like return an ICMP. What's called an ICMP? They say no

118
00:15:05,160 --> 00:15:13,160
fragmentation. Don't fragment. But I want to ask, like, when fragmentation is

119
00:15:13,160 --> 00:15:18,160
usually because the router cannot send a large package. So...

120
00:15:18,160 --> 00:15:25,160
Well, a router can only send a packet as large as what's called MTU of the next link. MTU is

121
00:15:25,160 --> 00:15:31,160
the maximum transmission unit. So that's hard-coded in a given link. So for a given

122
00:15:31,160 --> 00:15:35,160
router, you know, it has this interface. It's more than, at least two, right? That's why

123
00:15:35,160 --> 00:15:43,160
it's a router. So for each interface, it has an MTU. So when it receives a packet, obviously

124
00:15:43,160 --> 00:15:49,160
it's big enough to fit, right? But when it sends a packet, it has to look, is that packet

125
00:15:49,160 --> 00:15:57,160
it's going to fit in the MTU on the next link. Okay? That's how IP works. Does that make sense?

126
00:15:57,160 --> 00:16:03,160
But all I mean is that, like, between the routers in a network, you cannot, like, control the

127
00:16:03,160 --> 00:16:09,160
router MTU between the routers. You cannot. You cannot. But there's something called MTU discovery.

128
00:16:09,160 --> 00:16:15,160
I mean, generally today, so there's, like, the protocol, the way to describe the spec IP, the

129
00:16:15,160 --> 00:16:19,160
way it's described, and the way it's implemented. So the way it's implemented today is more routers

130
00:16:19,160 --> 00:16:25,160
do not fragment packets. And I tell you what. So theoretically, it should, it can be supported,

131
00:16:25,160 --> 00:16:30,160
it should be supported, but it's not done because internet routers, and this has nothing to do with

132
00:16:30,160 --> 00:16:40,160
security. Internet routers are supposed to process packets fast. Fast. Okay? And there's something

133
00:16:40,160 --> 00:16:47,160
called a fast path. Fast path is take a packet, look at the destination, points to the next

134
00:16:47,160 --> 00:16:56,160
hop, send it. If anything deviates from that, today's most routers will drop the packet. Okay?

135
00:16:56,160 --> 00:17:02,160
Because technically they are supposed to, oh, well, the next MTU is too small, I have to split

136
00:17:02,160 --> 00:17:10,160
this packet into two parts. That's a lot of work for a router. It deviates very much from this fast path.

137
00:17:10,160 --> 00:17:18,160
So that's why many of them don't do it. Okay? But, so that's assumed for the, for the rest of this

138
00:17:18,160 --> 00:17:22,160
discussion, right? You understood what I, I hope that what I mentioned before, the problem with

139
00:17:22,160 --> 00:17:30,160
fragmentation. But assume there's no fragmentation. Assume that the source of the IP packet sends in a small

140
00:17:30,160 --> 00:17:37,160
enough packet that it will not be fragmented. Okay? Which means that every IP packet has a

141
00:17:37,160 --> 00:17:42,160
TCP header. Let's just assume. It may not always be the case. Then what you can do is, of course,

142
00:17:42,160 --> 00:17:48,160
you can look in a TCP header and say, oh, there's a port number, and look at TCP flags. Remember,

143
00:17:48,160 --> 00:17:53,160
TCP flags indicate what kind of packet this is, right? Is it the beginning of the handshake cover

144
00:17:53,160 --> 00:17:59,160
connection? Is it the end of the connection? Etc. And if it's not TCP, for example, above IP,

145
00:17:59,160 --> 00:18:04,160
there could also be UDP, which presents a bit of a problem, or ICMP, which is control,

146
00:18:04,160 --> 00:18:10,160
internet control message protocol, which I mentioned earlier. It's like a maintenance protocol.

147
00:18:10,160 --> 00:18:15,160
Anyway, so filtering rules are based on pattern matching, and you'll see some examples.

148
00:18:15,160 --> 00:18:21,160
Different gateways or different firewalls that are different vendors for different languages.

149
00:18:21,160 --> 00:18:28,160
It's not like a unified language for describing rules. So if you work for a company that implements

150
00:18:28,160 --> 00:18:33,160
a certain, or buys a certain product, a firewall product, you need to learn the language,

151
00:18:33,160 --> 00:18:36,160
their policy language, if you're going to configure a firewall. You better learn it well,

152
00:18:36,160 --> 00:18:49,160
because misconfigurations can cost nera. Now, at this point, remember SSL TLS. Right? Remember?

153
00:18:49,160 --> 00:18:59,160
SSL TLS, you might think, presents a problem. Doesn't it? Well, not for this kind of firewall.

154
00:18:59,160 --> 00:19:08,160
Because if you recall, SSL TLS starts encrypting things above TCP. Right? And not even that.

155
00:19:08,160 --> 00:19:12,160
Some things are not even encrypted, right? Depending on which version it is, but it leaves some

156
00:19:12,160 --> 00:19:22,160
of the things. But TCP here is available, because it's below SSL TLS. So that's not a problem here.

157
00:19:22,160 --> 00:19:32,160
Okay? What about IPsec? Ooh, IPsec is a problem. IPsec could be a problem for firewalls that want

158
00:19:32,160 --> 00:19:41,160
to look at the TCP header, because they can't. Right? They can't. But what a firewall could do

159
00:19:41,160 --> 00:19:48,160
is say, you know what? You want to come for me? Build the first IPsec tunnel to me. Are you

160
00:19:48,160 --> 00:19:59,160
following what I'm saying? So, there's my favorite marker. What's going on today? Well, okay.

161
00:19:59,160 --> 00:20:05,160
I think you all remember IPsec, right? So the firewall would say, hey, you want to come from

162
00:20:05,160 --> 00:20:11,160
the outside, and you want to use IPsec. No, no. First build an IPsec through me.

163
00:20:11,160 --> 00:20:16,160
Right? And then it means the firewall will actually be the endpoint of IPsec tunnel. You will see

164
00:20:16,160 --> 00:20:27,160
the actual IP packet when it decapsulates it, right? So here's one example. Yeah?

165
00:20:27,160 --> 00:20:33,160
I mean, I'm assuming you want an IPsec tunnel elsewhere outside of the router, but using that,

166
00:20:33,160 --> 00:20:38,160
they wouldn't guarantee the router would actually re-IPsec it to the next .

167
00:20:38,160 --> 00:20:45,160
It may not need to. Remember that, David? We're talking generally IPsec tunnel from the outside

168
00:20:45,160 --> 00:20:51,160
to the firewall. That's what I meant. From the outside to the firewall. Then the firewall

169
00:20:51,160 --> 00:20:56,160
decapsulates, and then it may re-IPsec it again, right? Or not. That depends.

170
00:20:56,160 --> 00:21:02,160
Let's look at the fact of filtering examples. This looks at the TCP, right? It includes the

171
00:21:02,160 --> 00:21:11,160
TCP header. These are blocks of rules, right? And this is just kind of one very simple language.

172
00:21:11,160 --> 00:21:17,160
And what it says is basically a table. It says action, our host, port, their host, port,

173
00:21:17,160 --> 00:21:22,160
coming. A coming is usually not present, but it's just for an explanation. So the block A

174
00:21:22,160 --> 00:21:31,160
over there says that, okay, the action is to block. So anything that has source destination,

175
00:21:31,160 --> 00:21:40,160
our host, their host, but their host is named spigot, okay? Like the name of the host is spigot.

176
00:21:40,160 --> 00:21:52,160
We don't allow it, okay? That's it. Don't allow it. The next rule says allow from our gateway,

177
00:21:52,160 --> 00:22:01,160
right? Connection on port 25. Well that means port 25, TCP port 25 is SMTP email, right?

178
00:22:01,160 --> 00:22:08,160
Fail. So we allow connections to, from any port, you see that says port any on the second port.

179
00:22:08,160 --> 00:22:17,160
It says any, it says asterisk. Their host is asterisk means any. So any foreign host can connect

180
00:22:17,160 --> 00:22:27,160
to our gateway on port 25, right? Connections to our SMTP port are okay.

181
00:22:27,160 --> 00:22:37,160
Block B says do not allow anything. That's a default rule. So if something falls through all these

182
00:22:37,160 --> 00:22:44,160
and it's not, does not trigger any of those rules, block B is an effect, right? Everything

183
00:22:44,160 --> 00:22:52,160
that's not explicitly allowed is denied or blocked. That's all it says. That's a default rule.

184
00:22:52,160 --> 00:23:02,160
Block C says allow us, right, us to connect to them on port 25. That is an internal host can

185
00:23:02,160 --> 00:23:08,160
go outside and connect to port 25 anywhere. Just for email purposes, right? Because email

186
00:23:08,160 --> 00:23:18,160
is considered safe. Block B says explicitly a set of our host. This is just like a short

187
00:23:18,160 --> 00:23:23,160
handle. You actually like list all the explicit hosts, you know? Like it's different from an

188
00:23:23,160 --> 00:23:30,160
asterisk, right? Asterisk means anything. Our host means a fixed set of our hosts.

189
00:23:30,160 --> 00:23:40,160
It says that our packets to their SMTP port are okay. Again, port 25. And it also says that

190
00:23:40,160 --> 00:23:48,160
anything coming back to our port 25 with an ACK set, flags, that's DCP flags. When it says

191
00:23:48,160 --> 00:23:56,160
flags, you see that flag? That's DCP. It means that it's an acknowledgement, right? What it means

192
00:23:56,160 --> 00:24:06,160
is an acknowledgement of something we said. So we allow ACKs to come back. And finally,

193
00:24:06,160 --> 00:24:15,160
block E says allow our hosts to go out. Anything going out from our host is okay. Initiating from

194
00:24:15,160 --> 00:24:22,160
our host is okay. Anything with an ACK flag is okay. Meaning anything coming back with an ACK flag

195
00:24:22,160 --> 00:24:30,160
an ACK flag is fine. And finally, traffic to non-servers is okay. That is, if you're going outside to

196
00:24:30,160 --> 00:24:38,160
any client, right? To anything that port greater than 1024, that is reserved for non-servers. So

197
00:24:38,160 --> 00:24:50,160
TCP ports 1024 and below are reserved. There are like specific things. Like 25 is email. 80 is HTTP,

198
00:24:50,160 --> 00:24:56,160
right? 443, I think it's SSL, TLS, right? Things like that. But they're all less than 1024.

199
00:24:56,160 --> 00:25:08,160
So here's kind of a deeper dive. So let's look at FTP. Everybody knows FTP, right? File transfer

200
00:25:08,160 --> 00:25:16,160
port. Did you all know that it actually works with your browser? They don't try it like if you use FTP

201
00:25:16,160 --> 00:25:26,160
instead of HTTP in your URL. It still works, right? Your browser understands it.

202
00:25:26,160 --> 00:25:34,160
So what you have here is a client and a server, right? So a client that wants to transfer a file,

203
00:25:34,160 --> 00:25:44,160
one or more files. So the client starts by opening a connection on port. And its own port is 5151, right?

204
00:25:44,160 --> 00:25:54,160
Says my port is 5151, but actually what the HTTP has is it reserves two special ports, right? It has

205
00:25:54,160 --> 00:26:00,160
24 data. This is where, remember how SSL, TLS works? It has like a record layer and it has other. So

206
00:26:00,160 --> 00:26:08,160
this is like a record layer. It's for bulk data. And this one is for commands. So it's like a control channel

207
00:26:08,160 --> 00:26:16,160
and a data channel and a data channel. And they have different port numbers. Okay? So like FTP, if you remember

208
00:26:16,160 --> 00:26:26,160
FTP syntax, get file, file name, is a command. It's transmitted on the command port. The actual file transfer

209
00:26:26,160 --> 00:26:36,160
will happen on that port will happen on that port. Does that make sense? Commands as opposed to bulk data.

210
00:26:36,160 --> 00:26:42,160
So the first thing is a connection request comes in on a random, with a random port number, right?

211
00:26:42,160 --> 00:26:50,160
5151. You don't know what it is. And it's some client. And then it's okay, right? So that connection opens.

212
00:26:50,160 --> 00:26:57,160
Then the next thing is the data channel. The server, the FTP server opens the data channel. And these are two,

213
00:26:57,160 --> 00:27:04,160
these, these and this are two different TCP connections. Different port numbers, different TCP connections.

214
00:27:04,160 --> 00:27:13,160
Alright? And so at the end, you have the final TCP connection acknowledgement. At the end of the

215
00:27:13,160 --> 00:27:21,160
handshake, a TCP act from the client, and then the connection is over. This is just a refresher.

216
00:27:21,160 --> 00:27:27,160
So what would the packet filter rule say? This is a different syntax from the one. The one I showed you

217
00:27:27,160 --> 00:27:33,160
before was kind of very verbal, right? Very, very easy to parse. This one is a bit obscure.

218
00:27:33,160 --> 00:27:43,160
But once you get used to it, it makes sense. So what does this actually say? It says access list 100.

219
00:27:43,160 --> 00:27:56,160
That's which set of rules? It refers to a set of rules. 100. Permit TCP, okay? Allow TCP traffic

220
00:27:56,160 --> 00:28:03,160
So what does that mean? Outsiders, outsiders coming in on any port on any port greater than 1,023. I misspoke before I said 1,024.

221
00:28:03,160 --> 00:28:11,160
Well, actually it's 1,023. Greater than 1,023. So which needs client, okay?

222
00:28:11,160 --> 00:28:13,160
For host. 178.168.178.14.37x.18x behavioshiven, oke?

223
00:28:13,160 --> 00:28:20,540
For host. 178.168.10x.18x.18x.18x equals 21. noticeable

224
00:28:20,540 --> 00:28:29,160
So what does that mean? Outsiders, outsiders coming in on any port greater than 1,0244.15. It's not a server. It's a client.

225
00:28:30,040 --> 00:28:37,160
connecting to our host explicitly named for the IP address see that IP address that's our FTP

226
00:28:37,160 --> 00:28:47,560
server internally on port 21 is okay that's permit second line says permit blah blah blah

227
00:28:47,560 --> 00:28:57,320
same thing with a port 20 just says it's okay to have traffic to our FTP server our file server

228
00:28:59,160 --> 00:29:10,200
from any client the second list or the second set of rules 101 says permit TCP host this is our host

229
00:29:10,200 --> 00:29:18,680
right again it's that same FTP server to talk to on port 21 to any port that is greater than 1000.3

230
00:29:18,680 --> 00:29:25,080
that is responding to the client okay and the same thing for 20 right so that's the second line here

231
00:29:25,080 --> 00:29:32,120
just a lot so it's a it's a bi-directional right making it uni-directional wouldn't make any sense

232
00:29:32,120 --> 00:29:40,120
right has to be bi-directional and then finally it says here this is interface ethernet zero that's

233
00:29:40,120 --> 00:29:45,080
every every firewall will have to have at least two interfaces right one to the outside one to the

234
00:29:45,080 --> 00:29:51,160
inside can have more than two but generally at least two so which interface does this apply well

235
00:29:51,160 --> 00:30:01,880
this interface is within zero access list 100 is for inbound traffic access list 101 to outbound traffic

236
00:30:05,240 --> 00:30:10,360
i know since everything's obscure but i mean that's not it's not a canonical language just an example of a

237
00:30:10,360 --> 00:30:18,360
specific firewall language for a given file file provider but they all essentially communicate the same

238
00:30:18,360 --> 00:30:21,720
information what is allowed what is not allowed

239
00:30:25,240 --> 00:30:33,720
but despite the fact that they are fast right they have problems right the packet filter or the packet

240
00:30:33,720 --> 00:30:39,400
filtering firewall is the fastest firewall you can have because it keeps no state or almost no state

241
00:30:40,040 --> 00:30:45,480
it just basically looks at this the static rules that are encoded like a previous slide it says

242
00:30:45,480 --> 00:30:49,800
do i let it in do i let it out do i drop it let it in drop let it in drop it that's it packet at the

243
00:30:49,800 --> 00:30:58,200
time that's it now the problems uh if the attacks are application specific right somebody's trying to

244
00:30:58,200 --> 00:31:06,040
exploit uh something it's a vulnerability in an application the packet filtering firewall will not catch

245
00:31:07,480 --> 00:31:13,480
okay like buffer overflow uh it doesn't do user authentication obviously

246
00:31:14,040 --> 00:31:20,040
right because of the network layer or even a transport layer you cannot authenticate the user that

247
00:31:20,040 --> 00:31:26,760
might be at the other hand externally because the user does not sit at the network or transport

248
00:31:26,760 --> 00:31:33,400
layer so you cannot authenticate authentication based on ip addresses is useless because anybody can spoof

249
00:31:33,400 --> 00:31:41,240
like okay and so this type of firewalls they don't have upper or higher or higher layer functionality

250
00:31:41,240 --> 00:31:49,160
because they're supposed to be fast so there are other things that uh they are susceptible to for

251
00:31:49,160 --> 00:31:57,160
for example fermentation attacks uh that i'll talk about next then there's this configuration there's this whole

252
00:31:57,160 --> 00:32:05,160
area of research of how to take a set of rules and decide whether they make sense because if you

253
00:32:05,960 --> 00:32:10,920
understood my example both with the simple one with the table and the more complicated one

254
00:32:11,720 --> 00:32:19,800
one the previous slide configuring those rules is not all that easy and it's also but it is easy to

255
00:32:19,800 --> 00:32:25,960
to make mistakes so there's like a whole area of research and security on how to automatically

256
00:32:27,320 --> 00:32:33,400
detect uh contradictions or nonsensical rules or redundant rules

257
00:32:33,400 --> 00:32:39,320
i mean right and so these days a lot of of course ml is being used by that

258
00:32:45,960 --> 00:32:52,520
so i'll tell you i'll give you an example of kind of a clever pupelet fragmentation attack

259
00:32:53,640 --> 00:32:56,200
that typical packet filters will not catch

260
00:32:56,200 --> 00:33:03,160
so this is a reminder to you of what ip header looks like right we saw this slide before

261
00:33:04,120 --> 00:33:13,880
right just remember that options are well optional so typical ip packet ends here at the destination

262
00:33:17,640 --> 00:33:23,160
right so typically it's like this right after source destination address there's a tcp header

263
00:33:23,160 --> 00:33:34,680
i mean assuming we're using dc okay so what is a fragmentation attack well generally a fragmentation

264
00:33:34,680 --> 00:33:44,120
attack uh it requires an adversary to craft fragments on ip back there they overlap

265
00:33:46,520 --> 00:33:52,840
does that make sense overlapping yeah so normally again because i don't have a marker i can't draw

266
00:33:52,840 --> 00:33:56,680
anything for you but normally you expect them to do oh all right

267
00:34:00,280 --> 00:34:07,320
yeah normally you want to you have a packet that was long packet that was fragmented

268
00:34:08,840 --> 00:34:15,960
like one two three four and you want to make sure when it's reassembled it's really like one and then

269
00:34:15,960 --> 00:34:27,480
two three and then four and how do you know remember the fragment offset in the previous slide showed

270
00:34:27,480 --> 00:34:36,360
you right fragment offset told you how far for example this packet starts at i don't know uh 513

271
00:34:36,360 --> 00:34:42,920
which means that this is 512 bytes and the fragment offset for this packet will be 513

272
00:34:43,800 --> 00:34:51,800
and if this packet is 100 bytes then the fragment offset here will be 613 okay and this this packet

273
00:34:51,800 --> 00:34:57,960
is 100 bytes that will be 713 here so they all fit neatly one after the other right

274
00:34:57,960 --> 00:35:12,280
but what if you screw around with a fragment offset and instead of 613 put 313 well the reassembling ip

275
00:35:13,240 --> 00:35:23,880
destination will say oh well 313 i am going to stick to this packet here

276
00:35:23,880 --> 00:35:33,640
right because it says that now if you know of such attacks you would of course look you would change

277
00:35:33,640 --> 00:35:41,800
your ip right smart programmers who know how to code will say oh i should always check that

278
00:35:42,840 --> 00:35:49,560
a new fragment does not overlap with the already assembled fragments right because this is incremental

279
00:35:49,560 --> 00:35:55,800
you're receiving fragments you're potentially out of board ah but you know checking for boundaries and

280
00:35:55,800 --> 00:36:05,160
overlap that's extra code ip was designed where the world was denied so that is if you receive a fragment

281
00:36:05,160 --> 00:36:11,560
with the fragment offset it must make sense it must never overlap so a lot of ip implementations maybe

282
00:36:11,560 --> 00:36:18,840
not today today people are cognizant of this but they would just blindly reassemble and what that means

283
00:36:20,360 --> 00:36:26,520
is that if you just overlap real data it's it's a it's a problem already because god knows what

284
00:36:26,520 --> 00:36:32,680
happens in the application layer but a bigger problem is this if

285
00:36:32,680 --> 00:36:43,000
if you have just two fragments

286
00:36:47,080 --> 00:36:58,120
this is ib this is tcb and this is whatever okay and then you have now normally

287
00:36:58,920 --> 00:37:08,440
this there should be another fragment here right that should go in here right it should come after

288
00:37:09,000 --> 00:37:21,480
right it has its own ip header but if the adversary change the offset or crafted the offset to start

289
00:37:21,480 --> 00:37:35,480
here you see what i'm saying so here the offset in this packet fragment offset

290
00:37:35,480 --> 00:37:48,280
zero it's always like this first fragment fragment offset zero because it's it's a first but in the second what if it says fragment offset here

291
00:37:48,280 --> 00:37:59,080
i don't know 12

292
00:37:59,080 --> 00:37:59,160
i don't know 12

293
00:37:59,160 --> 00:38:09,960
well they will think that okay this thing this thing starts 12 bytes after

294
00:38:09,960 --> 00:38:24,760
so what can happen is that the adversary can override the ip header and control which flags are for

295
00:38:24,760 --> 00:38:33,720
example set in the dcp sorry in this dcp header and so remember the rules that said oh you can

296
00:38:33,720 --> 00:38:41,560
always let in act packets packets with an act flag well if you have two overlapping fragments

297
00:38:41,560 --> 00:38:46,520
and this reassembly reassembly results in the act flag being set the packet will be left

298
00:38:49,080 --> 00:38:50,840
so that's a gist of the attack

299
00:38:55,720 --> 00:39:02,680
so as you i don't know if you can see in red so if the act bit is set in both fragments an act bit is okay

300
00:39:02,680 --> 00:39:08,600
right both fragments have an act bit set but the fragment offset is messed up

301
00:39:10,760 --> 00:39:20,200
when you reassemble you can have a sin bit set remember sin not the original sin s y n

302
00:39:21,880 --> 00:39:27,560
s y n the s y n flag should be set in the very first packet in a connection

303
00:39:27,560 --> 00:39:36,600
so what does it mean it that if you only allow acts which means only connections from the inside out

304
00:39:36,600 --> 00:39:44,120
were allowed right you would only allow act packets coming back in but connections must always emanate

305
00:39:44,120 --> 00:39:49,560
from the out from the inside this allows essentially the connection to come from the outside

306
00:39:49,560 --> 00:40:00,120
that by this clever reassembly and we will see the different in another lecture uh probably next week

307
00:40:00,760 --> 00:40:08,120
we will see uh what is the what is the danger not only in principle like allowing connections

308
00:40:08,120 --> 00:40:13,160
disallow connections from the inside in but actually mounting was called sin floods or denial of service

309
00:40:13,160 --> 00:40:21,000
attacks on the inside of the servers and by the way if you ever wanted to know what dcp state diagram

310
00:40:21,000 --> 00:40:25,080
is well if you haven't been exposed to this in the networking course you should have been

311
00:40:25,880 --> 00:40:33,800
because that would make a grown person cry instead of staring at it for a bit don't worry you won't be

312
00:40:33,800 --> 00:40:40,680
on the exam this is networking not security but dcp is a is a complicated beast

313
00:40:40,680 --> 00:40:48,760
okay it's not at all like ip or even ibsec it's a complicated beast and this diagram by the way

314
00:40:48,760 --> 00:40:56,760
this state diagram captures both client and server behavior dcp so the dashed lines are for the client

315
00:40:56,760 --> 00:41:03,720
and the solid lines are for the server so if you recall the state guide the state well the actual dcp

316
00:41:03,720 --> 00:41:09,080
connection is established after a handshake right you first have to have this three-way handshake

317
00:41:09,080 --> 00:41:13,560
connection then the connection is established but the connection when it's alive it's it's not like

318
00:41:14,760 --> 00:41:19,320
constant because there's something called window size that changes right in the dcp connection and

319
00:41:19,320 --> 00:41:25,320
then there's an actual end right meaning when a normal dcp connection is over there is actually a

320
00:41:25,320 --> 00:41:33,000
tear down okay and then it's like that's why you have these things so i'll just give you an idea don't

321
00:41:33,000 --> 00:41:43,400
worry about remember everything here uh so this is a sort of a better illustration of the fragmentation

322
00:41:43,400 --> 00:41:54,280
of that you're sending two packets okay from the client sorry with uh from the client they're here

323
00:41:54,280 --> 00:42:06,520
one and two both packets like in my example here have acbit set we allow packets with acbit set come back

324
00:42:06,520 --> 00:42:11,960
because they're acknowledging something right remember this is a packet filter in gateway it doesn't know

325
00:42:11,960 --> 00:42:17,720
the state of a dcp connection it just looks it just looks it doesn't know if the connection has been

326
00:42:17,720 --> 00:42:25,560
open torn down never existed it just looks we allow active set the dcp here if the active is not set we

327
00:42:25,560 --> 00:42:36,040
don't allow right make sense so when they tell that client this is a evil evil client right since these

328
00:42:36,040 --> 00:42:42,360
two fragments one after the other kind of like like i illustrated here they each have the active set

329
00:42:43,320 --> 00:42:51,960
but when we reassembled they result in a synbit set and when passed through tcp they say open a new

330
00:42:51,960 --> 00:43:04,360
connection which is not allowed but it just happened okay so this results in a synpack here on this stupid telnet server

331
00:43:04,360 --> 00:43:17,880
so what it says is that essentially packet filters they have they have a place under the sun but by

332
00:43:17,880 --> 00:43:24,600
themselves they are not very good and you cannot they do offer one thing which is speed they offer you

333
00:43:24,600 --> 00:43:31,880
very fast processing but or even meaningful security at a high level and they are not useful so recall

334
00:43:32,680 --> 00:43:41,560
less than 1024 are permanently assigned they are reserved uh port numbers above 1024 above is all clients so

335
00:43:41,560 --> 00:43:48,440
when client on your browser or whatever your telnet client command uh connects to a server it can use an

336
00:43:48,440 --> 00:44:00,840
arbitrary number above 1023 well up to 65 number uh so if a firewall sees an outgoing request

337
00:44:02,280 --> 00:44:11,480
to a client 5151 it doesn't know right what to do with it i mean it sees that 5151 and that is not a well-known

338
00:44:11,480 --> 00:44:17,800
port it's not assigned to any specific service it's like some client that came up with it so you must allow it

339
00:44:17,800 --> 00:44:22,680
because internal service could be just responding to a previously established connection right

340
00:44:23,880 --> 00:44:33,000
or this could be an attack so the main problem is again that a packet a packet filtering firewall does

341
00:44:33,000 --> 00:44:34,440
not know the state of the connection

342
00:44:38,360 --> 00:44:43,960
well this is just already talked about so yeah what's what's what's the alternative the alternative

343
00:44:43,960 --> 00:44:49,320
is to do a bit more intelligence right to slow down the firewall a little bit

344
00:44:49,960 --> 00:44:57,800
and to have it looped and maintain some state okay maintaining information about open connections

345
00:44:57,800 --> 00:45:06,760
okay or state of ongoing connections not always open so you still make a decision for every packet but

346
00:45:06,760 --> 00:45:12,360
you make sure that the packet is somehow associated with the connection if a spurious packet arrives and

347
00:45:12,360 --> 00:45:16,520
there is no record for it right then you throw away

348
00:45:16,520 --> 00:45:27,240
you only the important thing here if this is a new connection right whether it's from the outside in or

349
00:45:27,240 --> 00:45:34,280
from the inside out you check your policy right before do we allow this if it's a current connection

350
00:45:34,280 --> 00:45:41,720
then you look it up in the table and update the table because you need to take understanding is this

351
00:45:41,720 --> 00:45:49,000
connection being established for example is the handshaking process or is it already established

352
00:45:50,280 --> 00:45:55,800
is it ending right because there's also a tear down phase right and reset

353
00:45:56,760 --> 00:46:00,840
at the very end of the dcp connection so you need to know or is it gone there's no such connection

354
00:46:02,040 --> 00:46:09,720
so that requires maintaining a dynamic table this is so keep in mind this is very different from rules

355
00:46:09,720 --> 00:46:14,520
rules are more or less permanent or semi-permanent right for what we allow in what we allow

356
00:46:15,960 --> 00:46:19,640
that's configured by the fire by security administrator firewall administrator

357
00:46:20,680 --> 00:46:25,240
but the table of connections is fully dynamic it's what happening right now in real time

358
00:46:27,960 --> 00:46:34,680
so that that's better certainly better okay because you now know that a given packet whether it

359
00:46:34,680 --> 00:46:39,960
comes in or out or trying to come in or out or trying to come in or out is a part of some connection

360
00:46:41,000 --> 00:46:48,280
it's not some spurious packet but it is a problem for non-tcp traffic for example

361
00:46:48,840 --> 00:46:57,160
stateless protocols like utp right the unreliable data data protocol and icmp internet control message

362
00:46:57,160 --> 00:47:02,760
protocol that i said before used for maintenance they're stateless they don't have a notion of a connection

363
00:47:02,760 --> 00:47:12,440
so that's harder so if you filter out if you don't disallow icmp then you lose certain network

364
00:47:12,440 --> 00:47:20,840
functionality so that's a trade-off also you can try to use ip tunneling right so that's the ipsec tunneling

365
00:47:20,840 --> 00:47:27,880
and then remember what i said about the firewall has to then be a terminal uh terminus of an ipsec tunnel

366
00:47:28,680 --> 00:47:37,240
so whoever is coming in or out must first establish a tunnel to the firewall so this is a typical or

367
00:47:37,240 --> 00:47:44,600
this is an example of a connection table a session filtering uh firewall will maintain right it says

368
00:47:44,600 --> 00:47:51,640
source address port number destination address port number and then connection state in all of those

369
00:47:51,640 --> 00:48:01,160
cases that is established i mean the other possible state could be starting or ending and that would

370
00:48:01,160 --> 00:48:04,520
starting would indicate that it's in the middle of doing the three-way handshake

371
00:48:05,720 --> 00:48:12,440
and ending will be in the middle of like tearing it down thin that's not for call thin wave reset okay but

372
00:48:12,440 --> 00:48:18,360
in this case all of them are established what are these well the port 80s you see source ports are all clients

373
00:48:18,360 --> 00:48:22,520
right right they're all over 1023 their clients

374
00:48:25,640 --> 00:48:34,680
the destination ports are web servers except for one within 25 25 is male and 79 is finger

375
00:48:36,120 --> 00:48:44,040
it's a bit obsolete finger is a it's a also a program that's used for fingering users right just you

376
00:48:44,040 --> 00:48:51,080
you can do finger and username and host and it basically will tell you it's like a 1980s style

377
00:48:51,080 --> 00:48:56,360
thing it'll tell you information about who this user is you have to actually configure your little finger

378
00:48:56,360 --> 00:49:04,040
profile it predates the web uh a lot of a lot of the installations have it turned off because it has

379
00:49:04,040 --> 00:49:10,760
its own problem right so if you run a linux machine for example and you see a finger d running god forbid kill

380
00:49:10,760 --> 00:49:14,920
kill kill immediately finger demon okay

381
00:49:19,400 --> 00:49:22,440
so next thing circuit level gateway

382
00:49:23,400 --> 00:49:31,080
so here i mentioned it earlier this is a splicing and re uh and realigning of tcp connections

383
00:49:31,080 --> 00:49:35,080
so one tcp connection ends at the gateway and another begins

384
00:49:35,080 --> 00:49:43,480
and there is like a a line between them and what it allows the circuit leveling gateway to do is examine

385
00:49:44,040 --> 00:49:50,440
these packets but in the context of a connection like what is actually going on in this connection

386
00:49:50,440 --> 00:49:53,560
we do what's called deeper packet inspection

387
00:49:55,640 --> 00:50:02,120
that is strictly more secure strictly more secure but as immediate is obvious from this picture

388
00:50:02,920 --> 00:50:11,240
strictly less efficient because establishing a separate tcp connection from the outside host to the out

389
00:50:11,240 --> 00:50:16,920
to the circuit level gateway and another tcp connection between the circuit level gateway and inside host

390
00:50:16,920 --> 00:50:24,200
costs double yes right so

391
00:50:24,200 --> 00:50:38,680
let me say no not necessarily because ssl tls could actually be might actually be unaware of this

392
00:50:39,560 --> 00:50:49,320
because this is tcp so all you care at the end is that you get the let's say the inside host is some kind

393
00:50:49,320 --> 00:50:56,840
of web server right um i don't think you should cause a problem

394
00:50:59,240 --> 00:51:06,440
i don't think you should cause a problem as long as the certificate for that host includes the name

395
00:51:06,440 --> 00:51:12,280
of this you know both the inside of the circuit level gateway because the certificate could have more

396
00:51:12,280 --> 00:51:17,480
than one name they could share they could be hosts within the same domain right so their actual name

397
00:51:17,480 --> 00:51:27,800
could be like firewall firewall firewall.abc.com and then www.abc.com and as long as the certificate is

398
00:51:27,800 --> 00:51:30,840
issued for abc.com that should be okay

399
00:51:30,840 --> 00:51:42,200
okay so again uh is faster uh than the application level gate that we'll talk about next but strictly

400
00:51:42,200 --> 00:51:48,200
slower than the packet level gate um in order to use it you generally need to adapt the application so

401
00:51:48,920 --> 00:51:55,880
in in the previous example packet level uh firewalls the applications were uh unchanged right you don't

402
00:51:55,880 --> 00:52:03,880
need to do anything you just do your business as usual the firewall is transparent in this case it's not

403
00:52:03,880 --> 00:52:15,160
transparent okay oh i'm sorry so in in both examples earlier in session filtering or packet filtering it

404
00:52:15,160 --> 00:52:16,680
was application transparent

405
00:52:16,680 --> 00:52:27,000
here it's not transparent you need to use something like socks which is a a library for socket secure

406
00:52:27,000 --> 00:52:39,560
socket layer and that's a rfc that's a kind of standard how to do it um but it's a kind of a compromise

407
00:52:39,560 --> 00:52:44,600
between something that is fast but not very secure and something that is much slower which is the next

408
00:52:44,600 --> 00:52:51,000
thing we'll talk about an application level gateway as i already mentioned requires you to adapt to

409
00:52:51,000 --> 00:52:58,520
write a proxy for each application so you explicitly have to terminate the outside connection at the

410
00:52:58,520 --> 00:53:03,320
application level gateway that examines the actual context like it looks in case of telling it would

411
00:53:03,320 --> 00:53:10,440
look at the actual characters you type right in the case of uh http will actually inspect the urls

412
00:53:11,160 --> 00:53:17,480
all the inputs and gets and all you know all the other http commands so you'll actually see the clear text

413
00:53:18,040 --> 00:53:26,200
on those connect so if you're using ssl uh tls there that makes it a little harder because yeah you have

414
00:53:26,200 --> 00:53:28,280
to you have to modify all your applications

415
00:53:32,520 --> 00:53:38,760
other filtering rules are simpler because there's a lot more intelligence in these in these proxies there's a

416
00:53:38,760 --> 00:53:44,840
separate proxy for each application and you can make them quite intelligent but and to understand

417
00:53:44,840 --> 00:53:50,440
the context of what is being sent and what is being received you can look for malicious commands like

418
00:53:50,440 --> 00:53:56,760
you know actual command line unix commands you can look for particular patterns like jpeg files etc

419
00:53:56,760 --> 00:54:03,240
so there's a much richer functionality but this is slow right so this is not for example the way you want

420
00:54:03,240 --> 00:54:14,840
to do streaming videos so to compare these approaches this is again should be by now fairly obvious if

421
00:54:14,840 --> 00:54:20,920
you're awake as far as performance package filter being in the network layer dealing with one packet at

422
00:54:20,920 --> 00:54:26,680
a time gives us the best performance and the worst performance of the application everything the best

423
00:54:26,680 --> 00:54:32,840
the best to the worst as far as modifying client or client applications or actually server applications

424
00:54:32,840 --> 00:54:39,240
the first two do not require modification the second requires basically slight modifications you have

425
00:54:39,240 --> 00:54:47,240
to essentially recompile everything with socks with this socket secure there for application level gateway

426
00:54:47,240 --> 00:54:55,560
you need to modify client applications to work with these proxies okay now things like fermentation attacks

427
00:54:55,560 --> 00:55:01,320
well only the last two really protect against fermentation attacks because if those attacks are attempted

428
00:55:01,320 --> 00:55:08,760
they will be detected at the firewall okay and they will not propagate to the actual

429
00:55:09,640 --> 00:55:14,520
host on the inside so the danger can be contained on the firewall

430
00:55:19,080 --> 00:55:29,080
now remember i told you earlier about filtering outbound connections this is a real example from um early 2000 like 2007 2008

431
00:55:29,080 --> 00:55:42,920
uh this was uh uh white house right actually the white house website that uh blocked all kinds of connections

432
00:55:42,920 --> 00:55:51,560
right by the firewall but it had the web server right the public uh web server that uh allowed you to look at the

433
00:55:51,560 --> 00:55:58,040
uh directory directory right and a phone book script sorry phone book script which is like a directory

434
00:55:58,760 --> 00:56:03,640
but what it didn't do it didn't sanitize the irs right so you're not sanitization it's right it's looking

435
00:56:03,640 --> 00:56:10,200
at the like a input whatever the program is and sanitizing that input like removing suspicious characters

436
00:56:11,000 --> 00:56:16,360
a lot of times you'll see this in the in web forms you fill out they won't allow you for example when you

437
00:56:16,360 --> 00:56:20,840
fill out a web form to use certain characters right that are on the keyboard some special characters you're

438
00:56:20,840 --> 00:56:27,560
not allowed that's called sanitization uh this is explicit right the explicit is that you cannot use

439
00:56:27,560 --> 00:56:32,680
this oh sometimes they won't let you even type them and sometimes you type them you press return and say no

440
00:56:33,400 --> 00:56:39,720
okay you cannot use this character uh in url that means that you know you parse the url and you look for

441
00:56:39,720 --> 00:56:43,400
these kind of suspicious characters and truncate them and get rid of them completely

442
00:56:43,400 --> 00:56:50,120
okay well there was no sanitization done in the phone book script and so you could actually submit

443
00:56:50,120 --> 00:57:01,080
a command now notice the magento pink color that's a relatively denied url right it's coming in from the

444
00:57:01,080 --> 00:57:11,800
outside right outside to the white house and it's doing invoking this uh cgi directory fphf is a phone book

445
00:57:11,800 --> 00:57:20,600
okay okay okay and there's some gravity i don't know what qa this x is but following it you have a percent

446
00:57:20,600 --> 00:57:32,120
sign followed by oa x sorry uh qlsx and then away right and what it is is that it's ox away is a new line

447
00:57:32,120 --> 00:57:39,560
so when it interprets when the phone book script looks at it it actually says oh

448
00:57:40,920 --> 00:57:45,240
all i say is a new line so it splits it right here

449
00:57:47,000 --> 00:57:53,320
right here it puts a new line and then this starting with this character right here it becomes

450
00:57:53,320 --> 00:58:03,960
a new a separate line right let's look what it means it says bin cat bin cat is a program to title

451
00:58:05,000 --> 00:58:11,800
right okay on the screen right here is cat which is in the bin directory bin cat

452
00:58:11,800 --> 00:58:26,040
percent 20 is space space character that's the password so and then not only executes the cgi script

453
00:58:26,040 --> 00:58:32,200
but after doing that it says cat the password type it and what happens is it appears on the screen on the

454
00:58:32,200 --> 00:58:43,400
client okay but the interesting part is this is coming from the inside out right the command came from the

455
00:58:43,400 --> 00:58:51,000
outside in but what is being displayed on the client on the outside of the screen is coming from the out

456
00:58:51,000 --> 00:58:57,720
from the inside right so this is what you should do inside sanitization or checking what comes out

457
00:58:57,720 --> 00:59:05,960
from the whitehouse.gov right so why filter outcome that's why all right so this will display a password

458
00:59:05,960 --> 00:59:13,160
file that of course we know opens the door for you know the password attacks uh this is even worse

459
00:59:14,280 --> 00:59:24,440
example this one also using the new line executes an x-window server essentially opens a window an x-window

460
00:59:24,440 --> 00:59:31,240
that x is a window system right you've probably heard about it um but it opens an outbound connection

461
00:59:31,240 --> 00:59:40,040
on the outsider's web server so essentially the outsider gets an x-window inside the white house network

462
00:59:42,760 --> 00:59:50,680
so one big problem is that the cgi dynamic right did not sanitize the input but the bigger problem

463
00:59:50,680 --> 00:59:56,360
that so ideally that should have been done right the input should be sanitized but sometimes there

464
00:59:56,360 --> 01:00:02,680
are so many of these cgi's there right you can't possibly like maybe maybe it's you know not viable

465
01:00:02,680 --> 01:00:08,920
to like fix them all but at the very least the last line of defense should have been not allowing things

466
01:00:08,920 --> 01:00:17,720
from the inside to come outside which is executing this x command external x terminal command or

467
01:00:17,720 --> 01:00:29,720
concatenating or typing the password file so that's kind of a silly example uh so in practice a lot of

468
01:00:29,720 --> 01:00:34,040
people use or a lot of companies use what's called the bastion coast which is kind of it's kind of a

469
01:00:34,040 --> 01:00:42,120
glorified firewall but the idea is that it's not just a firewall but it's like a fully blown uh you know

470
01:00:42,120 --> 01:00:48,040
computer not just like a network layer device but a fully blown computer it has a packet level application

471
01:00:48,040 --> 01:00:57,080
level gateway but it sits behind a packet level filter okay and so in that in that bastion host all

472
01:00:57,080 --> 01:01:04,200
services are turned off there's no usb ports are sealed you know can't stick anything in no no uh what's

473
01:01:04,200 --> 01:01:10,440
called air gap jumping uh and he prevents all these application specific proxies like what i said before

474
01:01:10,440 --> 01:01:18,840
and applications gateway um supports direct user authentication so you actually first authenticate

475
01:01:18,840 --> 01:01:23,880
when you when you log in you authenticate to the bastion host and then only you are allowed to proceed

476
01:01:24,840 --> 01:01:33,240
and all traffic flows to that host it it it it does not make things fast but it makes things reasonably

477
01:01:33,240 --> 01:01:40,280
secure typically like that so this is called a single home bastion host you have the back the

478
01:01:40,280 --> 01:01:46,040
big bad internet you have the this is the firewall of the packet the packet level firewall then that's

479
01:01:46,040 --> 01:01:54,760
the fast for packet filtering here you have the dmz like information web server and the bastion host sits

480
01:01:54,760 --> 01:02:01,080
kind of between the that and the rest of the network now it says single home because you see it assumes

481
01:02:01,080 --> 01:02:10,040
that there's like the bastion host only has one network interface right so it's certainly faster that

482
01:02:10,040 --> 01:02:15,960
way but the problem is that if the packet filtering router is compromised right so that that thing is

483
01:02:15,960 --> 01:02:26,680
compromised then bad traffic can flow in so if you want that not to happen you do a dual home bastion

484
01:02:26,680 --> 01:02:33,000
host which actually means it has two separate interfaces that all the traffic even from the packet

485
01:02:33,000 --> 01:02:39,800
filtering router must come into the bastion host be scrutinized and let out so in case a

486
01:02:39,800 --> 01:02:45,560
packet filtering router fails the bastion host still remains in the last line of defense

487
01:02:47,880 --> 01:02:53,160
and there's no physical connection right so the internal and external network no longer have a

488
01:02:53,160 --> 01:02:55,720
physical connection everything goes through the bastion host

489
01:02:55,720 --> 01:03:03,720
that's what's called this is called the screen subnet there's also this approach the screen subnet

490
01:03:03,720 --> 01:03:11,480
where you only have this is really kind of for more for very secure environments where you have

491
01:03:11,480 --> 01:03:15,960
this kind of a firewall in fact a little firewall here another finite level firewall here

492
01:03:16,520 --> 01:03:22,280
this is in case the bastion host fails so you really separate this what's called this is called the

493
01:03:22,280 --> 01:03:28,440
screen subnet where you only have these kind of dmz machines the bastion host maybe a dial-in module

494
01:03:28,440 --> 01:03:35,800
not nobody uses those anymore but then some years ago they did and then the private network is fully separate

495
01:03:35,800 --> 01:03:50,520
so what should firewalls do besides filtering and deciding what's allowed not allowed among the other

496
01:03:50,520 --> 01:03:56,680
thing they should do is should not propagate ip addresses or any kind of network structure of

497
01:03:56,680 --> 01:04:03,800
internal network to the outside that is super important right because knowledge of your internal

498
01:04:03,800 --> 01:04:14,440
network topology right geography of your internal network is sensitive information and only those

499
01:04:14,440 --> 01:04:19,720
services like a web server or some other kind of directory server only those that are absolutely

500
01:04:19,720 --> 01:04:24,200
necessary for outside access should be made available meaning their ip addresses should be known

501
01:04:25,080 --> 01:04:32,200
to the outside but the rest of the inside network does not need to expose its structure or its ip

502
01:04:32,200 --> 01:04:41,720
addresses okay and for that if you've taken a networking course you probably have heard of a network address translator or nat

503
01:04:43,240 --> 01:04:52,760
that will essentially translate uh in the packet the the source path the source ip address of a packet is going out

504
01:04:54,600 --> 01:05:01,560
right to something that does not expose them for example a bastion host will typically push its own

505
01:05:01,560 --> 01:05:13,080
ip address in the source instead of the internal ip address uh and it will similarly translate things coming back

506
01:05:13,080 --> 01:05:19,240
right with it we'll have the destination bastion host it will have the exam says oh this yes this is for me

507
01:05:19,240 --> 01:05:25,640
but really it's for this other open connection that i have okay so this translation uh and there are many

508
01:05:25,640 --> 01:05:32,600
uh options you can map there's one-to-one end-to-one mapping and all kinds of variations another important

509
01:05:32,600 --> 01:05:37,720
thing is routing announcement so uh i don't know how much you all know about routing protocols

510
01:05:39,080 --> 01:05:46,120
usually assume not a lot uh but you definitely don't want a protocol whatever routing protocol you run

511
01:05:46,120 --> 01:05:51,880
inside your network you don't want the routing announcements and routing changes on the inside to propagate

512
01:05:51,880 --> 01:05:58,680
outside right right the only thing that on the outside should know about routing is whether your

513
01:05:59,240 --> 01:06:05,960
network is accessible right meaning it's is it down is it up right they're gonna everything else

514
01:06:05,960 --> 01:06:09,720
should be screened or not announced okay

515
01:06:12,600 --> 01:06:12,760
uh

516
01:06:14,760 --> 01:06:20,680
okay so what are the general problems with files this is all all types of firewalls well they like everything

517
01:06:20,680 --> 01:06:27,480
else in security they eat cycles they slow things down nothing that is secure makes things faster

518
01:06:29,320 --> 01:06:34,520
they don't solve some real world problems bugging software insider attacks with malware they don't

519
01:06:34,520 --> 01:06:40,280
prevent malware from coming in from the inside they may prevent malware from exfiltrating information

520
01:06:41,080 --> 01:06:45,320
through the firewall but they don't prevent things from just like happening on the inside

521
01:06:45,960 --> 01:06:53,320
um they don't prevent bugs i mean protocol design if you have a badly designed firewall software yeah

522
01:06:53,960 --> 01:07:00,600
that's of course a problem uh they don't prevent denial of service attacks if somebody knows the rules

523
01:07:01,880 --> 01:07:07,480
of the firewall meaning that they allow traffic to an smtp server right so internal

524
01:07:07,480 --> 01:07:16,280
external traffic to smtp mail server inside is allowed fine that is a safe rule no problem you can

525
01:07:16,280 --> 01:07:23,160
armor your smtp server and protect but the problem is that if you allow any amount of traffic to smtp server

526
01:07:24,280 --> 01:07:29,400
that allows anybody from the outside to essentially mount the denial of service attack by just sending a

527
01:07:29,400 --> 01:07:36,840
very large volume of traffic to the smtp server by the time the smtp server just just discards their

528
01:07:36,840 --> 01:07:44,360
traffic the internal network resources are consumed so that's something a firewall won't solve for you

529
01:07:45,720 --> 01:07:52,920
and of course don't let's not forget this uh some sometimes some certain types of insider attacks won't

530
01:07:52,920 --> 01:07:58,680
be prevented because an ambassador you can always uh if it's a real insider not a doofus who brought

531
01:07:58,680 --> 01:08:05,480
the uh infected usb stick to work but rather an insider who but even a doofus by the way that

532
01:08:05,480 --> 01:08:09,880
might work but an insider who brought something malicious and copied let's say all the personnel

533
01:08:09,880 --> 01:08:15,960
files to usb stick how is the firewall going to prevent this only i don't know frisking him physically

534
01:08:16,680 --> 01:08:22,840
might detect this uh even uh let's take the doofus example somebody brings that uh usb stick

535
01:08:22,840 --> 01:08:32,200
with movies to watch during lunchtime the malware um jumps to the device to the laptop or desktop

536
01:08:32,200 --> 01:08:36,920
steals information copies it back to the usb stick the doofus at the end of the day removes the stick

537
01:08:36,920 --> 01:08:43,960
goes home plugs the usb sticks in his home computer malware accepts it hello world let me export all this

538
01:08:43,960 --> 01:08:51,960
stuff now there's no firewall in doofus's home are you with me so won't prevent that

539
01:08:51,960 --> 01:08:59,480
there's more complexity firewall configuration is not easy okay not easy and it's not static things

540
01:08:59,480 --> 01:09:05,080
change in the real business world so it's and they're more static than let's say dcp connection but not

541
01:09:05,080 --> 01:09:13,000
static and last but not least this few people know how to do it and even fewer have the expertise knowing

542
01:09:13,000 --> 01:09:18,440
how to do it and actually having expertise do different things so firewall administrative security

543
01:09:18,440 --> 01:09:23,320
in these states they get paid a lot especially in bigger companies like banks

544
01:09:25,960 --> 01:09:33,560
and that's it thank you any questions by the way i hope you were here and uh like the our like a little

545
01:09:33,560 --> 01:09:38,520
detour last lecture into automotive world maybe a bit boring for those already taking that class

546
01:09:38,520 --> 01:09:48,760
reinforcement learning yeah how can we prevent the fragmentation attack if we don't feel all the

547
01:09:48,760 --> 01:09:55,720
maybe the fragmentation flat how can we well one way to do it is so if you're using ipv6 that doesn't

548
01:09:55,720 --> 01:10:01,400
happen because ipv6 does not allow fragmentation if you're using ipv4 one way to prevent it is to

549
01:10:01,400 --> 01:10:08,280
simply throw away fragmented back and just have to say no fragmentation allowed uh icfp the protocol

550
01:10:08,280 --> 01:10:14,600
i mentioned earlier for you that used for maintenance i uh allows you to generate that error message to

551
01:10:14,600 --> 01:10:20,440
the source by says fragmentation not allowed so the source continues fragmented you just discard

552
01:10:20,440 --> 01:10:32,120
not always but but these days it is extremely unusual for routers to fragment typically today fragmentation

553
01:10:32,120 --> 01:10:39,640
happens actually it's even today what happens is mostly like this if it's a tcp packet tcp implementation

554
01:10:39,640 --> 01:10:46,680
on your whatever device i'm going back will be aware of the empty and it will actually not generate

555
01:10:46,680 --> 01:10:55,160
not pass to ip segments greater than the empty so it might not even happen i would be very surprised

556
01:10:55,160 --> 01:11:00,680
that in the modern implementation on a modern operating operating system you will still have fragmentation

557
01:11:00,680 --> 01:11:14,680
even inside the source i mean it might happen but it'd be very important okay see you next tuesday


WEBVTT

00:00.000 --> 00:05.000
that means we want to have both timeliness and freshness of our IP packets.

00:05.000 --> 00:10.000
Of course, we're also equally interested in protecting integrity of data.

00:10.000 --> 00:17.000
And make sure that the data in the payload, the data in the packet has not been modified in transit.

00:17.000 --> 00:23.000
We want to sometimes protect confidentiality of the data, not always.

00:23.000 --> 00:28.000
Just like in SSL, there's always, like remember there's an option not to use encryption,

00:28.000 --> 00:33.000
you use null encryption, while in IPsec there are options also not to use encryption.

00:33.000 --> 00:41.000
But authenticity, authenticity of origin and data integrity are mandatory.

00:41.000 --> 00:50.000
Meaning you don't want to use IPsec without authenticity of origin and data integrity.

00:50.000 --> 00:54.000
That's the minimum thing IPsec does.

00:54.000 --> 00:58.000
In addition to that, you can protect what's called packet metadata.

00:58.000 --> 01:00.000
That is to protect against eavesdropping.

01:00.000 --> 01:05.000
So the typical example is that you have, let's say, two branches of the same company.

01:05.000 --> 01:09.000
Let's say you have an East Coast branch and West Coast branch.

01:09.000 --> 01:15.000
And inside each branch there's a private network, interconnected lands, all kinds of stuff.

01:15.000 --> 01:19.000
All kinds of like departments have their own arrangement on the West Coast.

01:19.000 --> 01:22.000
There's something like that, and on the East Coast, right?

01:22.000 --> 01:23.000
And how do they communicate?

01:23.000 --> 01:31.000
Well, normally, you know, IP posts on one on the East Coast, also IP posts on the West Coast.

01:31.000 --> 01:37.000
And notice that if you eavesdrop on these packets in the middle of the Internet or outside these organizations,

01:37.000 --> 01:41.000
you will know who is talking to whom, right?

01:41.000 --> 01:46.000
So that's information that can be valuable, right?

01:46.000 --> 01:54.000
Because you're also learning the internal structure of the private network, okay?

01:54.000 --> 01:59.000
It exposes addresses within the private network, both source and destination.

01:59.000 --> 02:06.000
So what IPsec allows you to do in a certain mode of operation is to encapsulate such packets

02:06.000 --> 02:14.000
and hide the internal source of this connection so that anyone listening and eavesdropping on IP packets

02:14.000 --> 02:21.000
anywhere in the middle of the Internet wilderness will only see that these packets go from

02:21.000 --> 02:22.000
right?

02:22.000 --> 02:31.000
Company A East Coast branch and Company B West Coast branch, but will not know anything beyond that, okay?

02:31.000 --> 02:32.000
This is very important.

02:32.000 --> 02:40.000
This protects against what's called traffic analysis.

02:40.000 --> 02:45.000
So the general model is like this, right?

02:45.000 --> 02:57.000
The IPsec assumes that hosts and gateways, right, or border routers, are secure themselves.

02:57.000 --> 03:01.000
It doesn't make any assumptions about software security, operating system security, etc.

03:01.000 --> 03:09.000
But it assumes that hosts can be secured and gateways, but the communication lines themselves are insecure.

03:09.000 --> 03:10.000
Right?

03:10.000 --> 03:15.000
Whether they're wired, wireless, whatever medium you use, they are insecure.

03:15.000 --> 03:23.000
Insecure means eavesdropping, insecure means active attacks, like deletion, insertion, manipulation,

03:23.000 --> 03:26.000
delaying, reordering, etc.

03:26.000 --> 03:28.000
Okay?

03:28.000 --> 03:37.000
Now, we will not cover the entirety of the security model.

03:37.000 --> 03:42.000
And the reason is because it's very complex and it's very abstruse.

03:42.000 --> 03:47.000
And yes, if one deals with IPsec, one should know everything.

03:47.000 --> 03:51.000
But I'm going to give you again just kind of an appetizer for IPsec.

03:51.000 --> 03:54.000
And I'm going to talk mainly about IPsec formats and options.

03:54.000 --> 04:07.000
But there is something called Ike, called Internet PHTH, which is a basically, think of that as a control, remember the control channel in SSLTLS?

04:07.000 --> 04:12.000
The one that establishes security, you know, the handshakes and everything?

04:12.000 --> 04:15.000
That's what Ike does.

04:15.000 --> 04:16.000
Okay?

04:16.000 --> 04:22.000
But unlike SSLTLS, where everything is put together in one protocol, right?

04:22.000 --> 04:29.000
I cannot tell you about SSLTLS packets or record formats without describing the handshake, right?

04:29.000 --> 04:34.000
Whereas an IPsec, I can't, and Ike is a separate component.

04:34.000 --> 04:35.000
Okay?

04:35.000 --> 04:51.000
So, what it does is that it is a protocol, or a set of protocols actually, that establish key material, cryptographic shared keys, between pairs of communicating IP addresses.

04:51.000 --> 04:52.000
Okay?

04:52.000 --> 04:55.000
So, we will not talk much about this.

04:55.000 --> 05:08.000
Ike, in turn, works together with something called security policy, which is an organizationalist, something that every organization that uses IPsec should ideally maintain.

05:08.000 --> 05:11.000
It's not mandatory, but it needs to be maintained, generally.

05:11.000 --> 05:20.000
And security policy is basically telling you what IPsec to use, what type of IPsec to use, where.

05:20.000 --> 05:25.000
So, think about, like, you're trying to communicate within your organization.

05:25.000 --> 05:32.000
You work for ABC Incorporated, and you are in your branch office, you're working in a particular office, you have your private network,

05:32.000 --> 05:38.000
and you're trying to establish a connection, let's say, to a nearby post, right, inside.

05:38.000 --> 05:43.000
And it might look at your packets and say, oh, this is inside, no IPsec required.

05:43.000 --> 05:52.000
But as you are trying to maybe communicate, let's say, to a social network outside, it might say, for example, no.

05:52.000 --> 05:55.000
Which means, not allowed, period.

05:55.000 --> 05:57.000
IPsec, IPsec, not allowed.

05:57.000 --> 05:58.000
Okay?

05:58.000 --> 06:00.000
See, Facebook, there's no way.

06:00.000 --> 06:05.000
Or it might see something like Gmail, right?

06:05.000 --> 06:06.000
You're going to Gmail, right?

06:06.000 --> 06:07.000
You're going to Gmail.

06:07.000 --> 06:12.000
It might say, oh, if you're talking to Google, then you have to use IPsec in this mode, this

06:12.000 --> 06:13.000
specific mode.

06:13.000 --> 06:16.000
And I'll show you examples of what that means.

06:16.000 --> 06:30.000
So, the policy governs the security flavor that is applied to a specific host to host connection.

06:30.000 --> 06:39.000
So, there are two formats in IPsec, and it can be confusing, so I'm going to try to step

06:39.000 --> 06:40.000
through it.

06:40.000 --> 06:45.000
One is called S, or encapsulating security payload, and it's more complex.

06:45.000 --> 06:51.000
And the simple one is sort of IPsec-like, it's called authentication header.

06:51.000 --> 06:52.000
Okay?

06:52.000 --> 07:04.000
So, you use one or the other, between the two hosts, you don't generally use more than one.

07:04.000 --> 07:07.000
You pick one or the other.

07:07.000 --> 07:13.000
And to make, well, more later, so you can use it in a following way.

07:13.000 --> 07:19.000
You can use it in a host-to-host communication, just like an example I described.

07:19.000 --> 07:24.000
You have host A in the West Coast branch, talks to host B in the East Coast branch.

07:24.000 --> 07:25.000
Right?

07:25.000 --> 07:31.000
So, these are host-to-host, ant-to-ant use of IPsec.

07:31.000 --> 07:34.000
You can also use it host-to-gateway.

07:34.000 --> 07:41.000
An example of that is, let's say you are an employee of that ABC incorporated.

07:41.000 --> 07:50.000
You take your laptop with you on travel to Turkestan, and you are in a hotel room, or

07:50.000 --> 07:54.000
in an internet cafe, or something like Starbucks, and you want to dial back home.

07:54.000 --> 08:01.000
You want to call home, check your mail, whatever, work on some internal documents.

08:01.000 --> 08:08.000
So, in that sense, you are communicating your laptop, your host communicates to the gateway

08:08.000 --> 08:13.000
of your home office, of the private network in your home office.

08:13.000 --> 08:19.000
So, the IPsec connection would be then between your interface on your laptop, and the IP interface,

08:19.000 --> 08:24.000
incoming IP interface on your gateway.

08:24.000 --> 08:25.000
Okay?

08:25.000 --> 08:29.000
Alternatively, it would be gateway to gateway.

08:29.000 --> 08:36.000
That would be, for example, if the same as my first example, host A in West Coast branch office

08:36.000 --> 08:43.000
talks to host B in the East Coast branch office, but the connection is not IPsec.

08:43.000 --> 08:46.000
End-to-end, it's between their respective gateways.

08:46.000 --> 08:48.000
Does that make sense?

08:48.000 --> 08:53.000
So, the gateways provide like a secure tunnel or secure pipe.

08:53.000 --> 08:57.000
And then, within each branch office, there is no IPsec.

08:57.000 --> 09:03.000
Meaning, between me, let's say I am host A, between me and my exit gateway, there is no

09:03.000 --> 09:07.000
IPsec, and the IPsec starts there, goes to the gateway of the other branch office, over

09:07.000 --> 09:13.000
the wilderness of the internet, there it terminates, and from there on to the destination host B,

09:13.000 --> 09:15.000
there is no IPsec.

09:15.000 --> 09:16.000
Okay?

09:16.000 --> 09:17.000
That's, that's gateway to gateway.

09:17.000 --> 09:18.000
Okay?

09:18.000 --> 09:23.000
And, to make things even more interesting, all these things can be combined.

09:23.000 --> 09:24.000
Okay?

09:24.000 --> 09:32.000
It is, there was a marker here at some point, but I think it's gone.

09:32.000 --> 09:33.000
What's going on now?

09:33.000 --> 09:34.000
Is there?

09:34.000 --> 09:35.000
Oh, wow.

09:35.000 --> 09:54.000
Okay, so, you could have host A. This is the branch office, this is the branch office.

09:54.000 --> 09:55.000
This here is bad, right?

09:55.000 --> 09:56.000
Internet.

09:56.000 --> 10:09.000
And, this host could actually have an IPsec connection here, to this gateway.

10:09.000 --> 10:19.000
Then, there could be another IPsec connection between gateway B and a gateway A, and a third

10:19.000 --> 10:29.000
IPsec connection between gateway B and host B. That is if you, like, don't trust the internal

10:29.000 --> 10:32.000
networks, right, in either organization.

10:32.000 --> 10:35.000
So, you could have that, that's totally fine.

10:35.000 --> 10:42.000
What is also fine, one second, is you could have, everybody saw this, right?

10:42.000 --> 10:51.000
You could have a connection that goes like this, okay?

10:51.000 --> 11:07.000
Between A and B, that's called IPsec E to B, and this is IPsec G to G.

11:07.000 --> 11:11.000
So, there is an encapsulation here.

11:11.000 --> 11:13.000
Does that make sense?

11:13.000 --> 11:21.000
So, you have an end-to-end connection from A to B, but from gateway to gateway, from gateway

11:21.000 --> 11:26.000
to gateway to gateway to B, you have another one on top of it, like a thicker pipe.

11:26.000 --> 11:32.000
And so, the idea is that there may be many other hosts here, many other hosts there, but

11:32.000 --> 11:35.000
they will utilize the same pipe.

11:35.000 --> 11:36.000
Question?

11:36.000 --> 11:37.000
Yes.

11:37.000 --> 11:38.000
Okay.

11:38.000 --> 11:41.000
And, you can imagine other variations as well, right?

11:41.000 --> 11:46.000
For example, my first example with three of them doesn't have to be like that.

11:46.000 --> 11:51.000
It could be like A to gateway, there is no IPsec, then gateway to gateway, there is IPsec,

11:51.000 --> 11:54.000
and then again, gateway B to B is IPsec.

11:54.000 --> 11:56.000
Totally fine.

11:56.000 --> 11:59.000
Any combination is okay.

11:59.000 --> 12:09.000
So, as I said, AH, authentication and ASP, and to make things, this is very important,

12:09.000 --> 12:17.000
to make things even more confusing and complicated, there are two modes of operation for each.

12:17.000 --> 12:25.000
So, both authentication and encapsulating security payload can operate in two modes,

12:25.000 --> 12:28.000
transport and tunnel.

12:28.000 --> 12:29.000
Okay?

12:29.000 --> 12:31.000
So, what's the main difference?

12:31.000 --> 12:37.000
You'll see the pictures, the pictures are on board worth a thousand words, but the main difference

12:37.000 --> 12:45.000
between tunnel and transport mode is in tunnel mode, you take an IP data here, IP packet,

12:45.000 --> 12:49.000
and you treat it as a block.

12:49.000 --> 12:53.000
You slap a new header in front of it.

12:53.000 --> 12:55.000
Does that make sense?

12:55.000 --> 12:56.000
That's a tunnel.

12:56.000 --> 13:02.000
It means you're hiding the entire IP packet, or protecting the entire IP packet as is.

13:02.000 --> 13:04.000
That's tunneling.

13:04.000 --> 13:12.000
Transport is, you don't do that, you just use the original IP header, and then in the middle,

13:12.000 --> 13:20.000
between IP header and the payload, right, the transport, etc., you stick an IPsec header.

13:20.000 --> 13:23.000
So, it saves bandwidth, right?

13:23.000 --> 13:25.000
And some process.

13:25.000 --> 13:27.000
But, it's a trade-off.

13:27.000 --> 13:28.000
Why?

13:28.000 --> 13:33.000
Because, anybody can already see from my description where is the trade-off?

13:33.000 --> 13:34.000
There's one trade-off.

13:34.000 --> 13:46.000
Tunneling is more secure because non-tutneling, transport mode, exposes the end-to-end IP addresses.

13:46.000 --> 14:00.000
Whereas, if you tunnel, right, for example, in this case, if we had here,

14:00.000 --> 14:26.000
if this connection is transport mode, right, everything is cool except the A and B addresses will be exposed.

14:26.000 --> 14:35.000
If the A, this gateway to gateway to gateway to B is in tunnel mode, then the A and B addresses are hidden.

14:35.000 --> 14:40.000
Well, unless you use just authentication, which is stupid, but you don't want to do that.

14:40.000 --> 14:41.000
But, they're hidden.

14:41.000 --> 14:51.000
Which means, on the internet here in the wilderness, the only thing you would see as source destination IP would be gateway A, gateway B.

14:51.000 --> 14:52.000
Okay?

14:52.000 --> 14:56.000
So, now you sort of know the difference.

14:56.000 --> 14:57.000
Right.

14:57.000 --> 15:02.000
This is just a point if you're not familiar with gateway, but I'm using it in a sense of a border router.

15:02.000 --> 15:03.000
Right?

15:03.000 --> 15:10.000
So, if you know, you should know, that the internet is composed of what's called ASs or ADs sometimes.

15:10.000 --> 15:19.000
AS or AD stands for Autonomous System or Autonomous Domain, and all of these terminology refers to inorganizational networks.

15:19.000 --> 15:31.000
That is, could be a ginormous thing like AT&T that provides long range services as one AD or one AS, or it could be something smaller like UCI, which is also NAS.

15:31.000 --> 15:32.000
Okay?

15:32.000 --> 15:39.000
But, there's a difference in the internet between something called transit ASs and stub ASs.

15:39.000 --> 15:49.000
And, just as the name suggests, transit is the one that is in the middle of the internet to provide services to endpoints, and stub is like the end.

15:49.000 --> 15:53.000
UCI, for example, does not provide transit services to UCLA.

15:53.000 --> 15:54.000
Right?

15:54.000 --> 15:57.000
Or the city of Irvine.

15:57.000 --> 15:59.000
We are a stub.

15:59.000 --> 16:00.000
Okay?

16:00.000 --> 16:03.000
Your home network is kind of a stub.

16:03.000 --> 16:08.000
It's not really an AS, but let's say you are here, I don't know what you guys use.

16:08.000 --> 16:14.000
You guys use UCI campus networking if you live on campus, but if you live off campus, maybe using Cox, right?

16:14.000 --> 16:19.000
So, one of my experiences was like for many years I had Cox, right?

16:19.000 --> 16:24.000
So, Cox is the internet, kind of default internet provider around here.

16:24.000 --> 16:28.000
And they are an ISP and a stub domain.

16:28.000 --> 16:29.000
Right?

16:29.000 --> 16:34.000
Because they have what's called an AS, or domain number assigned to them, you know?

16:34.000 --> 16:40.000
Anyway, so, typically, IPsec involves gateways, right?

16:40.000 --> 16:47.000
And they sit on the border of a domain or autonomous system.

16:47.000 --> 16:48.000
Okay?

16:48.000 --> 16:53.000
So, this is just going to be a slightly better picture that shows you, right?

16:53.000 --> 16:59.000
So, this would be the tunnel mode right here, the typical example, right?

16:59.000 --> 17:00.000
It's not a mandatory example.

17:00.000 --> 17:01.000
It's not the way to use it.

17:01.000 --> 17:02.000
It's a way to use it.

17:02.000 --> 17:07.000
But it's the one that makes sense, is that you would provide tunnel mode between routers.

17:07.000 --> 17:12.000
This is like my example of branch office, east, west coast, east coast, right?

17:12.000 --> 17:20.000
There would be tunnel mode between the routers, and then the transport mode between the hosts.

17:20.000 --> 17:22.000
They do not interfere with each other.

17:22.000 --> 17:26.000
They totally coexist and they don't care about each other.

17:26.000 --> 17:27.000
Okay?

17:27.000 --> 17:34.000
You might view some of this, of course, is a little bit redundant, right?

17:34.000 --> 17:40.000
But, consider that hosts, why would hosts use transport mode?

17:40.000 --> 17:42.000
Because maybe this, this is insecure, right?

17:42.000 --> 17:46.000
Like, why use IPsec between here, you know, end to end?

17:46.000 --> 17:47.000
Because they don't trust this network.

17:47.000 --> 17:49.000
I mean, they don't trust this network.

17:49.000 --> 17:53.000
They may also not trust the routers necessarily, right?

17:53.000 --> 17:56.000
Different levels of security.

17:56.000 --> 18:02.000
So, here may be everything, routers may say, okay, this is all secret, or level secret,

18:02.000 --> 18:07.000
but for the host communication, they say, oh, no, no, we, this session is top secret.

18:07.000 --> 18:11.000
Which means higher security, so they may want to have a separate session.

18:11.000 --> 18:16.000
Right?

18:16.000 --> 18:23.000
And this is yet another pictorial representation for those who are visual learners.

18:23.000 --> 18:24.000
Right?

18:24.000 --> 18:27.000
So, you see there, tunnel mode, right?

18:27.000 --> 18:30.000
This is independent of whether you use AH or ESP.

18:30.000 --> 18:37.000
The way that, at the top, you have a sort of original IP packet with a header and data,

18:37.000 --> 18:42.000
and in a tunnel mode, the header and data are protected.

18:42.000 --> 18:49.000
It says encrypted, it's strictly speaking, not always encrypted, but it's at the very least protected.

18:49.000 --> 18:50.000
Okay?

18:50.000 --> 18:58.000
Then it slaps an IPsec header in front, and before that prepends a new IP header.

18:58.000 --> 19:11.000
Now, if you use this mode between two hosts, like in my previous example, previous picture,

19:11.000 --> 19:20.000
if you use this kind of a tunnel mode, right, between two hosts, what happens is the same

19:20.000 --> 19:26.000
source destination addresses are in the inner header, the protected header, as would be in

19:26.000 --> 19:29.000
an outer header.

19:29.000 --> 19:32.000
Do you see that?

19:32.000 --> 19:33.000
Following me?

19:33.000 --> 19:36.000
Because, right, it's the same two hosts, right?

19:36.000 --> 19:37.000
Endpoints.

19:37.000 --> 19:42.000
So, if you use the tunnel mode, the header that is protected, that is within, has the same

19:42.000 --> 19:46.000
source destination as the header that is outside.

19:46.000 --> 19:48.000
So, it might seem kind of weird, right?

19:48.000 --> 19:52.000
In that case, we are not protecting traffic from traffic analysis.

19:52.000 --> 19:59.000
What we might be protecting is, for example, what protocol is it?

19:59.000 --> 20:05.000
So, the new IP header here will have the same source destination, right, if it's host to

20:05.000 --> 20:06.000
host, right?

20:06.000 --> 20:12.000
But it will not have, remember there's a protocol field in IP header that says, ah, I'm using

20:12.000 --> 20:18.000
TCP, socket, there's like a support number, or UDP, or ICMP, or God knows what, right?

20:18.000 --> 20:21.000
There's more than just TCP on top of IP in general, right?

20:21.000 --> 20:25.000
So, that is potentially sensitive information.

20:25.000 --> 20:32.000
So, two hosts may want to use tunnel mode to hide what kind of transport layer protocol

20:32.000 --> 20:35.000
they're using and what port numbers they're using.

20:35.000 --> 20:36.000
Okay?

20:36.000 --> 20:39.000
So, you still get something out of it.

20:39.000 --> 20:46.000
And, um, transport mode, of course, is, as I said before, you take the original IP header,

20:46.000 --> 20:50.000
and you, you still use it, but you insert the IPsec header.

20:50.000 --> 20:51.000
Okay?

20:51.000 --> 20:59.000
The other thing that this, this actually, obviously I hijacked this figure from, from somewhere,

20:59.000 --> 21:06.000
going to like a textbook, but, um, what it doesn't show you is that, well, never mind,

21:06.000 --> 21:11.000
I don't actually, never mind, I said, all good.

21:11.000 --> 21:15.000
Um, that's another representation maybe easier to have.

21:15.000 --> 21:21.000
You see, original datagram, this example has TCP, but it doesn't, remember it doesn't have to be TCP,

21:21.000 --> 21:24.000
it could be UDP or some other protocol.

21:24.000 --> 21:27.000
Transport mode, tunnel mode.

21:27.000 --> 21:28.000
Okay?

21:28.000 --> 21:30.000
So, this is the same information as you showed before.

21:30.000 --> 21:31.000
Slightly different.

21:31.000 --> 21:33.000
Any questions?

21:33.000 --> 21:43.000
So, as I said before, it's, as I said, is precisely the set of format, packet formats.

21:43.000 --> 21:44.000
Okay?

21:44.000 --> 21:45.000
Not a protocol.

21:45.000 --> 21:46.000
All right?

21:46.000 --> 21:54.000
And the first two RFCs, remember I told you what RFCs are, they're kind of like internet standards written in a very special way.

21:54.000 --> 22:00.000
Not as bad as patents or legal documents, but, but not exactly like technical papers.

22:00.000 --> 22:06.000
And they're very detailed, they specify, they usually have state diagrams and all kinds of other transitions.

22:06.000 --> 22:07.000
They encapsulate everything.

22:07.000 --> 22:12.000
And the reason is, so you should be able to take an RFC, implement it in whatever gut-forsaken language you want,

22:12.000 --> 22:17.000
on whatever gut-forsaken platform, hardware platform you want, whatever operating system you want,

22:17.000 --> 22:21.000
and it will still interoperate with anything else that runs the program.

22:21.000 --> 22:23.000
That's the whole idea.

22:23.000 --> 22:24.000
Right?

22:24.000 --> 22:29.000
Whether you use an 8-bit processor or a 64-bit processor, a supercomputer or an IoT device,

22:29.000 --> 22:31.000
they will interoperate.

22:31.000 --> 22:34.000
If you faithfully implement the program.

22:34.000 --> 22:39.000
So, the first two are IPsec.

22:39.000 --> 22:46.000
And this is the item, you know, you can look at it, it's really complex.

22:46.000 --> 22:54.000
And the reason it is so complex is because it was designed to be super open and flexible,

22:54.000 --> 23:00.000
meaning that the Internet Engineering Task Force, the organization that oversees Internet standards,

23:00.000 --> 23:05.000
not just security, but all Internet standards, is international.

23:05.000 --> 23:12.000
And it doesn't, it tries not to be, like, very centric about protocols or algorithms,

23:12.000 --> 23:16.000
like encryption algorithms or authentication algorithms, so it tries to accommodate everything.

23:16.000 --> 23:21.000
And so it tries to be super flexible and leave room for new, new, new techniques.

23:21.000 --> 23:22.000
Right?

23:22.000 --> 23:28.000
So that's why what AH and ESP tell you, only the formats.

23:28.000 --> 23:31.000
Only the formats.

23:31.000 --> 23:34.000
Okay, let's zoom into authentication here.

23:34.000 --> 23:38.000
That's the lightest IPsec version.

23:38.000 --> 23:43.000
It basically provides two things, origin authentication and data integrity.

23:43.000 --> 23:49.000
It does not, even though you will see the word encrypt, it does not encrypt.

23:49.000 --> 23:50.000
Okay?

23:50.000 --> 23:54.000
It does not provide confidentiality.

23:54.000 --> 23:59.000
It provides data integrity and origin authentication.

23:59.000 --> 24:00.000
Okay?

24:00.000 --> 24:10.000
Also protects against, like, replayed, or allows you to detect replayed and out-of-order messages, packets,

24:10.000 --> 24:15.000
by using this sort of monotonically increasing sequence number.

24:15.000 --> 24:19.000
Not the same thing as a sequence number inside that IP had.

24:19.000 --> 24:21.000
Its own sequence number.

24:21.000 --> 24:22.000
Okay?

24:22.000 --> 24:29.000
So remember, no data confidentiality, no metadata confidentiality, in this version.

24:29.000 --> 24:30.000
Okay?

24:30.000 --> 24:39.000
So as I said, 32-bit sequence number, and then uses cryptographic hash algorithms, which are

24:39.000 --> 24:42.000
basically all kinds of versions of HMAC.

24:42.000 --> 24:43.000
Remember HMAC?

24:43.000 --> 24:46.000
Kind of quickly defined it, showed you how it works.

24:46.000 --> 24:52.000
HMAC is a construct that can be used with any good hash function.

24:52.000 --> 24:57.000
Where good means cryptographically strong hash function.

24:57.000 --> 24:59.000
Only symmetric crypto.

24:59.000 --> 25:00.000
Only symmetric.

25:00.000 --> 25:01.000
Okay?

25:01.000 --> 25:09.000
Here's the format of the beast.

25:09.000 --> 25:15.000
First thing you see is next header, which is basically a pointer to what to do next.

25:15.000 --> 25:16.000
Right?

25:16.000 --> 25:18.000
Remember the packets are concentric, right?

25:18.000 --> 25:22.000
Outer header, inner header, inner inner header, and then finally data, right?

25:22.000 --> 25:27.000
So you should be able to, you know, your code, right, that runs and parses packets needs to

25:27.000 --> 25:30.000
go from processing one header to the next header to the next.

25:30.000 --> 25:34.000
So it tells you the next header, where the next header is.

25:34.000 --> 25:37.000
Then it says payload length, right?

25:37.000 --> 25:38.000
Right?

25:38.000 --> 25:41.000
That's the, that's the size.

25:41.000 --> 25:44.000
Then it's reserved, God knows why.

25:44.000 --> 25:46.000
60 bits, not used.

25:46.000 --> 25:49.000
Then there's five, the security parameters index.

25:49.000 --> 25:53.000
Don't ask me what, why they picked this terminology.

25:53.000 --> 25:56.000
Well, actually what it is, is like a session ID.

25:56.000 --> 25:57.000
Okay?

25:57.000 --> 26:04.000
So this identifies, SPI identifies the session, this particular session between these two

26:04.000 --> 26:09.000
communicating IP posts or IP interfaces.

26:09.000 --> 26:13.000
It is one way, just like SSL-TLS, remember?

26:13.000 --> 26:14.000
It's one way.

26:14.000 --> 26:22.000
Meaning that SPI used for host A to B is going to be different than the one used from B, or

26:22.000 --> 26:24.000
back at set, from B to A.

26:24.000 --> 26:26.000
Just like SSL-TLS.

26:26.000 --> 26:29.000
Which means like the keys associated, right?

26:29.000 --> 26:35.000
With A to B direction will be different than those keys used in B to A direction.

26:35.000 --> 26:39.000
Xenos number that I already told you about.

26:39.000 --> 26:47.000
And then authentication data, which it has variable size depending on which cryptographic, like

26:47.000 --> 26:49.000
HMAC flavor you're using.

26:49.000 --> 26:52.000
Because remember, HMAC outputs a value of a hash function, right?

26:52.000 --> 26:54.000
Remember there's two concentric applications, right?

26:54.000 --> 26:56.000
With a key, etc.

26:56.000 --> 26:59.000
But the output varies.

26:59.000 --> 27:05.000
If you're using SHA1, it might be 128, as little as 128 bits.

27:05.000 --> 27:09.000
Using SHA2 will be at least 256 bits.

27:09.000 --> 27:12.000
SHA3, there are a few other hash functions that have it.

27:12.000 --> 27:17.000
So the size of the authentication token, this is the authentication data that authenticates

27:17.000 --> 27:24.000
the packet, will vary depending on the hash function used in the HMAC.

27:24.000 --> 27:26.000
And how do you know which function is used?

27:26.000 --> 27:32.000
Well, the SPI, right, is the identifier of the session that will point to a record somewhere,

27:32.000 --> 27:33.000
right?

27:33.000 --> 27:37.000
They'll say, oh, this connection uses this hash function for HMAC.

27:37.000 --> 27:38.000
Okay?

27:38.000 --> 27:41.000
So there's no confusion, right?

27:41.000 --> 27:46.000
You see, there's no confusion about how long this should be.

27:46.000 --> 27:48.000
But it is a variable field.

27:48.000 --> 27:55.000
Now, for a given host A to host B H session, you cannot change the hash function.

27:55.000 --> 27:58.000
There's no change cipher spec like an SSLT has.

27:58.000 --> 28:04.000
You are fixed for a given connection.

28:04.000 --> 28:07.000
More pictures?

28:07.000 --> 28:14.000
Okay, so this is, again, we're talking about authentication here, but remember, every version

28:14.000 --> 28:20.000
AH and ESP can be used in tunnel mode or transport mode.

28:20.000 --> 28:26.000
So, up top is the IP diagram, right?

28:26.000 --> 28:29.000
I think the colors make it kind of clear what we're talking about, right?

28:29.000 --> 28:34.000
So, the top is untouched original IP packet.

28:34.000 --> 28:39.000
It has an IPv4 header, and the protocol field says 6.

28:39.000 --> 28:43.000
6 is reserved for TCP, right?

28:43.000 --> 28:46.000
So, that's how it's parsed, right?

28:46.000 --> 28:52.000
When you receive, and this is not really looked at so much or processed by the routers along the internet,

28:52.000 --> 28:55.000
but the receiving host gets an IP packet.

28:55.000 --> 29:00.000
It parses as the IP header, looks at the, oh, it's 6, so I pass it to TCP.

29:00.000 --> 29:03.000
It's something else, I pass it to UDP or ICMP, whatever.

29:03.000 --> 29:06.000
These numbers are reserved.

29:06.000 --> 29:07.000
Okay?

29:07.000 --> 29:09.000
They are part of the standard, IP standard.

29:09.000 --> 29:13.000
Then you have TCP header, you see, right?

29:13.000 --> 29:16.000
And then you have data.

29:16.000 --> 29:21.000
And all of that TCP header plus the dark, dark green,

29:21.000 --> 29:22.000
make IP data, right?

29:22.000 --> 29:25.000
So, as far as IP, that's always IP data.

29:25.000 --> 29:29.000
Okay, so what do we do in the transport mode?

29:29.000 --> 29:32.000
In the transport mode, the IP has stays, right?

29:32.000 --> 29:38.000
As I said, it stays almost the same, but the protocol field changes to 51.

29:38.000 --> 29:41.000
51 is reserved for IP set.

29:41.000 --> 29:44.000
So, what they're receiving those processes.

29:44.000 --> 29:50.000
The header, it says, oh, not going to TCP, not going to GDP, not going to ICMP,

29:50.000 --> 29:54.000
going to IP set, invoke IP set receipt.

29:54.000 --> 29:55.000
Okay?

29:55.000 --> 30:03.000
And then what follows this is the H header, authentication header that you saw earlier.

30:03.000 --> 30:10.000
And inside it, there's all these fields you saw, but you see the next header, 6.

30:10.000 --> 30:13.000
That means the next header is TCP, right?

30:13.000 --> 30:16.000
Because that's how they are laid out.

30:16.000 --> 30:19.000
IP, IPsec, TCP.

30:19.000 --> 30:23.000
I mean, no mystery header, right?

30:23.000 --> 30:29.000
Tunnel mode, by now, should be kind of obvious, right?

30:29.000 --> 30:34.000
There was your original header that goes here.

30:34.000 --> 30:35.000
Intact.

30:35.000 --> 30:36.000
Notice nothing changes.

30:36.000 --> 30:41.000
This whole thing, this whole block is exactly what you see at the top, right?

30:41.000 --> 30:46.000
It's like verbatim, wholesale, taken and encapsulated.

30:46.000 --> 30:52.000
Identification header, stuck here.

30:52.000 --> 30:53.000
Okay?

30:53.000 --> 30:58.000
New IP header in front.

30:58.000 --> 31:05.000
So the packet begins with a new outer IP header.

31:05.000 --> 31:07.000
The protocol is 51.

31:07.000 --> 31:10.000
It means IPsec is next.

31:10.000 --> 31:13.000
So as this header is parsed, IPsec is involved.

31:13.000 --> 31:14.000
Right?

31:14.000 --> 31:15.000
IPsec received.

31:15.000 --> 31:19.000
IPsec looks at this and says, oh, let me authenticate.

31:19.000 --> 31:22.000
First of all, it makes sure that it finds an entry.

31:22.000 --> 31:29.000
It's like a table somewhere that says, I have a key for this connection, right?

31:29.000 --> 31:31.000
It uses SPI to do that.

31:31.000 --> 31:32.000
It looks up.

31:32.000 --> 31:33.000
Now this is the key.

31:33.000 --> 31:34.000
I authenticate.

31:34.000 --> 31:36.000
If authentication fails, done.

31:36.000 --> 31:37.000
Packet is discarded.

31:37.000 --> 31:38.000
Okay?

31:38.000 --> 31:43.000
But if the packet is okay, everything checks out, where do we go?

31:43.000 --> 31:44.000
Next header.

31:44.000 --> 31:45.000
Why four?

31:45.000 --> 31:47.000
Four is the reserve for IP.

31:47.000 --> 31:55.000
So it actually goes IP, IPsec, back to IP.

31:55.000 --> 31:59.000
Because it now processes this as an IP packet.

31:59.000 --> 32:03.000
And IP here says on the X protocol 6, TCP.

32:03.000 --> 32:06.000
So it sounds a little weird, but it holds very robust.

32:06.000 --> 32:11.000
It goes IP, IPsec, IP, TCP.

32:11.000 --> 32:15.000
All within your kernel, right?

32:15.000 --> 32:20.000
Or maybe outside the kernel, depending on which .

32:20.000 --> 32:22.000
Questions?

32:22.000 --> 32:25.000
Pretty straightforward, right?

32:25.000 --> 32:26.000
Okay.

32:26.000 --> 32:33.000
Now it gets a little more tricky, but just a little bit.

32:33.000 --> 32:34.000
ESP.

32:34.000 --> 32:39.000
Redundant, redundant, redundant.

32:39.000 --> 32:42.000
Don't ask me why.

32:42.000 --> 32:45.000
They designed it that way.

32:45.000 --> 32:48.000
My guess is because, well, I kind of was around during that time.

32:48.000 --> 32:56.000
I sort of remembered that the idea was to give people a choice between something very lightweight, like AH.

32:56.000 --> 33:05.000
Which means that you could use upper layer encryption, like you could use something like SSLTLS, whatever, at a higher layer.

33:05.000 --> 33:13.000
But at IP, you should just have basic protection, like integrity and origin authentication.

33:13.000 --> 33:15.000
But everything else, leave it to the higher layer.

33:15.000 --> 33:16.000
So that's one philosophy.

33:16.000 --> 33:17.000
Right?

33:17.000 --> 33:21.000
Another philosophy is protect everything.

33:21.000 --> 33:25.000
And that's more like what ESP does.

33:25.000 --> 33:26.000
So they do overlap.

33:26.000 --> 33:32.000
Meaning that they actually, you could use one to, you know, you can configure one to be almost like the other.

33:32.000 --> 33:36.000
But they do offer also different services.

33:36.000 --> 33:51.000
So it provides everything that AH already offers, but also gives you data confidentiality, which means like actual encryption of data.

33:51.000 --> 34:01.000
The details uses a counter also to detect, replace, and delay, and replace reward packets.

34:01.000 --> 34:05.000
Uses similar integrity check coverage because it also needs integrity.

34:05.000 --> 34:09.000
You cannot, you should not be just using encryption without integrity.

34:09.000 --> 34:10.000
Okay?

34:10.000 --> 34:17.000
But distinctive features, confidentiality, and metadata protection.

34:17.000 --> 34:18.000
Right?

34:18.000 --> 34:26.000
So metadata confidentiality as well, meaning that you can hide the actual endpoints from being used.

34:26.000 --> 34:29.000
And here we go.

34:29.000 --> 34:31.000
Here's the header.

34:31.000 --> 34:36.000
The first thing you see in a header is SPI.

34:36.000 --> 34:39.000
Now let's walk back to the application header.

34:39.000 --> 34:40.000
What do we see?

34:40.000 --> 34:43.000
You see SPI and a sequence number.

34:43.000 --> 34:44.000
Here?

34:44.000 --> 34:48.000
You see SPI, sequence number, but it's preceded by a few things.

34:48.000 --> 34:49.000
So it's not exactly the same.

34:49.000 --> 34:50.000
Yeah?

34:50.000 --> 34:58.000
So you're making it sound like AH doesn't have the ability to protect the earth at the endpoints?

34:58.000 --> 34:59.000
It cannot.

34:59.000 --> 35:02.000
So what's the point of tunnel mode?

35:02.000 --> 35:06.000
What is the point of tunnel mode?

35:06.000 --> 35:07.000
Good question.

35:07.000 --> 35:08.000
Good question.

35:08.000 --> 35:09.000
Yeah?

35:09.000 --> 35:15.000
If you use the tunnel mode, you get double protection maybe?

35:15.000 --> 35:18.000
I mean, you could imagine that...

35:18.000 --> 35:19.000
Let me see.

35:19.000 --> 35:30.000
You could, you could imagine that, like to say you're using some higher layer, like session layer encryption,

35:30.000 --> 35:39.000
and the tunnel mode maybe gives you some, a little extra because you could use maybe a tunnel mode between two gateways

35:39.000 --> 35:44.000
and rely on, on application level security for hand to hand.

35:44.000 --> 35:48.000
But I'm not sure if that, that actually holds water.

35:48.000 --> 35:57.000
So that's one of the things that they, for compatibility, decided to provide both tunnel and transport for AH and ESP.

35:57.000 --> 35:58.000
You had a comment?

35:58.000 --> 35:59.000
Come on.

35:59.000 --> 36:05.000
I just think that tunnel mode may be used for like, things like VPN.

36:05.000 --> 36:06.000
Yes.

36:06.000 --> 36:09.000
Tunnel mode is used by, for VPN.

36:09.000 --> 36:22.000
But what his question is, since tunnel mode does not protect the source and destination addresses, the original source and destination, what is the point?

36:22.000 --> 36:24.000
For AH.

36:24.000 --> 36:25.000
For AH.

36:25.000 --> 36:26.000
For AH, right?

36:26.000 --> 36:28.000
So in AH, what does it actually give?

36:28.000 --> 36:42.000
And I think there is something, there is something maybe that have to do with, ah, you remember, hey, so you have these mutable fields, right?

36:42.000 --> 36:45.000
Remember mutable fields, the fields that change an IV header?

36:45.000 --> 36:51.000
Well, if you tunnel, then you protect the fields of the inner header, everything.

36:51.000 --> 36:53.000
Does that make sense?

36:53.000 --> 36:56.000
Because, but, and it doesn't actually change, right?

36:56.000 --> 36:58.000
Until the end of the tunnel.

36:58.000 --> 37:02.000
But still there is something, there is, I didn't remember there was something.

37:02.000 --> 37:03.000
So that's that.

37:03.000 --> 37:08.000
That you get to protect these fields that normally change an IP.

37:08.000 --> 37:15.000
So, let's just go back for a second.

37:15.000 --> 37:17.000
Right, right.

37:17.000 --> 37:20.000
So, let's look at the transport mode.

37:20.000 --> 37:23.000
In the transport mode, the original IP header, right, is still there.

37:23.000 --> 37:26.000
And it has these fields that change, remember?

37:26.000 --> 37:31.000
Time to live, check some, fragmentation, right?

37:31.000 --> 37:34.000
IHL, they can change.

37:34.000 --> 37:35.000
In transit.

37:35.000 --> 37:36.000
So you cannot really protect them.

37:36.000 --> 37:40.000
It protects other fields, like source, destination, but not those.

37:40.000 --> 37:42.000
Not the ones I have in red, remember?

37:42.000 --> 37:50.000
But with the transport mode, sorry, with the tunnel mode, the former IP header is now here.

37:50.000 --> 37:52.000
And it's protected fully.

37:52.000 --> 37:55.000
Because these fields don't change in here, right?

37:55.000 --> 37:57.000
As the packet moves through the internet.

37:57.000 --> 37:59.000
They change in here.

37:59.000 --> 38:00.000
Right?

38:00.000 --> 38:02.000
Is it worth it?

38:02.000 --> 38:03.000
Eh.

38:03.000 --> 38:04.000
Eh.

38:04.000 --> 38:07.000
It's a little bit of like a tiny delta you get out of it.

38:07.000 --> 38:10.000
If you ask me, I wouldn't use it.

38:10.000 --> 38:19.000
I think like, for example, in the second example, we can maybe defend the tray in the contact mode.

38:19.000 --> 38:20.000
What?

38:20.000 --> 38:21.000
Like the tray of that.

38:21.000 --> 38:29.000
So that the receiver can know where actually this package comes from rather than in the transport mode.

38:29.000 --> 38:30.000
Well, no, no.

38:30.000 --> 38:32.000
In the transport mode, you do.

38:32.000 --> 38:33.000
You do.

38:33.000 --> 38:40.000
Because the authentication header, I mean, I'm assuming here that the tunnel is end-to-end, not gate-to-end.

38:40.000 --> 38:41.000
Okay?

38:41.000 --> 38:43.000
So let's think of tunnel as end-to-end.

38:43.000 --> 38:46.000
You do know where it comes from.

38:46.000 --> 39:02.000
Because the authentication header in either mode, in either mode, protects the IP header, this IP header, or this IP header, but only the fields that don't change.

39:02.000 --> 39:04.000
And source destination does not change.

39:04.000 --> 39:05.000
Right?

39:05.000 --> 39:09.000
But if you're using it in a gateway-to-gateway, right?

39:09.000 --> 39:21.000
Gateway-to-gateway, like there, what would happen is, so there's no IPsec here, I suppose, no IPsec here, but there's IPsec here.

39:21.000 --> 39:28.000
A will send a packet with IP header that has A, the source, B destination.

39:28.000 --> 39:39.000
When it gets in a transport mode, it still has to be A source, B destination.

39:39.000 --> 39:46.000
But when in tunnel mode, the outer header will say, gateway A source, gateway B destination.

39:46.000 --> 39:48.000
See the difference?

39:48.000 --> 39:50.000
Because it's tunnel, right?

39:50.000 --> 40:01.000
So the outer IP header will have the end points of the IPsec connection, which is in this case, between these two.

40:01.000 --> 40:02.000
And this type can still reach the packet.

40:02.000 --> 40:05.000
Yeah, yeah, yeah, yeah, yeah, yeah, yeah, sure.

40:05.000 --> 40:06.000
Sure.

40:06.000 --> 40:16.000
As I said, AH provides zero confidentiality, only integrity and data and origin of integration.

40:16.000 --> 40:28.000
So in that case, that I just described, gateway B will be able to verify that this packet really came from gateway A.

40:28.000 --> 40:30.000
And that the data has not been modified.

40:30.000 --> 40:31.000
But that's it.

40:37.000 --> 40:38.000
Right.

40:38.000 --> 40:40.000
Okay, so ESP.

40:40.000 --> 40:43.000
So you see the area is a bit different.

40:43.000 --> 40:47.000
The security parameter index followed by sequence number.

40:47.000 --> 40:53.000
I mean, those are the same as in the previous, but the AH and other stuff before.

40:53.000 --> 40:54.000
Then there's payload data.

40:54.000 --> 40:55.000
This is different.

40:55.000 --> 40:58.000
It's encapsulating.

40:58.000 --> 41:04.000
Encapsulating means you can encapsulate, right?

41:04.000 --> 41:09.000
Which means you don't just stick something in the beginning, you stick something in the end.

41:09.000 --> 41:12.000
That's what encapsulation actually means in English, right?

41:12.000 --> 41:13.000
Like you're surrounded.

41:13.000 --> 41:14.000
Therefore, this is the actual payload that you're protecting.

41:14.000 --> 41:15.000
See?

41:15.000 --> 41:16.000
This is the variable length.

41:16.000 --> 41:17.000
Okay?

41:17.000 --> 41:19.000
Then there's padding because you need to align it on a 32-bit boundary.

41:19.000 --> 41:20.000
If it already aligns, no padding.

41:20.000 --> 41:21.000
It's optional, right?

41:21.000 --> 41:22.000
Next header.

41:22.000 --> 41:23.000
Next header.

41:23.000 --> 41:24.000
Next header.

41:24.000 --> 41:25.000
Next header.

41:25.000 --> 41:26.000
Next header.

41:26.000 --> 41:27.000
Same as before.

41:27.000 --> 41:28.000
Followed by authentication data.

41:28.000 --> 41:29.000
This is the variable length.

41:29.000 --> 41:30.000
See?

41:30.000 --> 41:31.000
This is the variable length.

41:31.000 --> 41:32.000
Okay?

41:32.000 --> 41:37.000
Then there's padding because you need to align it on a 32-bit boundary.

41:37.000 --> 41:38.000
There's no padding.

41:38.000 --> 41:39.000
There's no padding.

41:39.000 --> 41:40.000
There's no padding.

41:40.000 --> 41:41.000
It's optional, right?

41:41.000 --> 41:42.000
Next header.

41:42.000 --> 41:43.000
Next header.

41:43.000 --> 41:44.000
Same as before.

41:44.000 --> 41:45.000
Followed by authentication data.

41:45.000 --> 41:46.000
And that's it.

41:46.000 --> 41:48.000
So this is the end of the packet.

41:48.000 --> 41:49.000
Right?

41:49.000 --> 41:50.000
The word is trailer.

41:50.000 --> 41:51.000
Header.

41:51.000 --> 41:52.000
Trailer.

41:52.000 --> 41:54.000
And in between is the packet.

41:54.000 --> 41:56.000
Whereas AH was about header on the trailer.

41:56.000 --> 41:57.000
Right?

41:57.000 --> 41:58.000
That's it.

41:58.000 --> 41:59.000
That's the main difference.

41:59.000 --> 42:01.000
That encapsulation has both headers.

42:01.000 --> 42:02.000
And the packet is stuck in the middle.

42:02.000 --> 42:03.000
And AH just has a header.

42:03.000 --> 42:04.000
So why do we put next header?

42:04.000 --> 42:05.000
Header.

42:05.000 --> 42:06.000
Header.

42:06.000 --> 42:07.000
Trailer.

42:07.000 --> 42:08.000
And in between is the packet.

42:08.000 --> 42:13.000
Where as AH was about header on the trailer.

42:13.000 --> 42:14.000
Right?

42:14.000 --> 42:15.000
That's it.

42:15.000 --> 42:17.000
That's the main difference.

42:17.000 --> 42:21.000
That encapsulation has both header and trailer and the packet is stuck in the middle.

42:21.000 --> 42:26.000
And AH just has a header.

42:26.000 --> 42:44.540
So, why do we put next header here? Because, well, it tells you as you parse the packet, right? As you parse the packet, it tells you, oh, and check this authentication, right? It comes at the end of the packet.

42:44.540 --> 42:54.420
So, it allows you essentially to, as you're receiving the packet, right, kind of keep computing in real time the authentication of that packet.

42:54.780 --> 43:00.920
And then when you start, when you finally receive this, you compare it. So, it doesn't match? Good. Right?

43:00.920 --> 43:05.140
And then it allows you also to right away jump to the next header after that.

43:05.780 --> 43:11.160
But the next header isn't actually here, right? It's not below, right? This is the end.

43:11.160 --> 43:18.680
The next header is actually there. Do you see how this is different?

43:20.840 --> 43:27.740
So, before, the next header was like following, right? But there's nothing after this. This is the end.

43:29.100 --> 43:36.900
The authentication data is the trailers. So, there's nothing after it. The next header is here.

43:41.160 --> 43:51.340
Okay? So, this is the same picture. So, before, except this one is for PSP.

43:53.580 --> 43:56.720
Same original data, original packet at the top.

43:56.720 --> 44:11.200
So, then you have transport mode. Transport mode, the IPv4 header copy. Now, the protocol is 50. Now, 51, 50 is reserved for ESP.

44:11.200 --> 44:28.520
Okay? Then it's ESP header that you saw previously. Inside the whole TCP, the payload that you saw where they are. You see the, what's it, lilac followed by darker green.

44:28.520 --> 44:36.320
And then, at the end is the ESP trailer, which says, next header, pointer. Okay?

44:38.960 --> 44:43.640
Make sense? The meaning of next header is the same. It's which protocol to invoke next.

44:43.640 --> 44:49.640
And then, the very last thing is the data, the authentication data.

44:53.240 --> 45:02.380
Tunnel mode? Okay. Already, by now, it should be clear. Protocol, 50. New IP header. Brand new IP header.

45:03.160 --> 45:09.580
ESP header. The original IP datagram, untouched, encapsulated, and encrypted. Okay?

45:09.580 --> 45:15.480
And then, you have the ESP trailer, and then D. So, minor difference, right?

45:18.340 --> 45:23.160
But, you protect the entire, you protect the meaning of next header.

45:23.560 --> 45:29.000
Everything here, in this rectangle, is fully encrypted.

45:32.300 --> 45:35.540
And should be, essentially, a black box.

45:39.580 --> 45:42.080
Naturally, why have both, right?

45:42.400 --> 45:45.500
So, I think you already kind of see one answer, right?

45:46.000 --> 45:46.940
One is lightweight.

45:48.100 --> 45:49.400
One of them says, you know what?

45:49.400 --> 45:50.380
I don't deal with encryption.

45:51.120 --> 45:52.780
I just give you the bare bones,

45:53.540 --> 45:55.620
authenticity of origin, and data integrity.

45:57.480 --> 45:58.040
That's it.

45:59.080 --> 46:00.380
And the other one says,

46:01.000 --> 46:02.340
I'm going to give you the whole enchilada.

46:03.540 --> 46:05.340
I'm just going to give you everything you want.

46:05.340 --> 46:06.600
Encrypt everything.

46:09.580 --> 46:12.960
Why is it not using public key?

46:13.120 --> 46:15.280
Well, public key is expensive.

46:15.440 --> 46:17.540
You never want to use public key for bulk data, right?

46:17.600 --> 46:19.220
That's, like, super obvious.

46:20.420 --> 46:20.620
Right?

46:20.640 --> 46:22.460
You always want to use symmetric key cryptography.

46:22.580 --> 46:25.640
And just like SSL, you know, once you establish a connection,

46:25.860 --> 46:28.460
only symmetric cryptography is used, say, here.

46:29.440 --> 46:33.220
So, the way to think about IPsec is really more like

46:33.220 --> 46:35.700
the record layer in SSL-TLS.

46:35.820 --> 46:36.280
Remember that?

46:36.280 --> 46:39.360
It had this record layer, and it had these protocols on top

46:39.360 --> 46:40.920
that are doing the management, right?

46:41.340 --> 46:43.500
Establish reconnection, alert, blah, blah, blah.

46:44.020 --> 46:49.300
Well, IPsec is, like, the data, the record layer in SSL-TLS.

46:51.400 --> 46:55.480
Algorithms, that's not for IPsec to decide, right?

46:55.540 --> 46:56.900
IPsec just provides formats,

46:56.900 --> 47:04.800
and it leaves the choice of algorithms both for computing and integrity check

47:04.800 --> 47:11.200
and for encryption, it leaves those two specific endpoints policy, right?

47:12.060 --> 47:12.520
Decisions.

47:12.520 --> 47:23.700
So, I want you to remember, of course, this is more like, it's more than obvious, right?

47:23.780 --> 47:29.500
That what you get is, at the very least, what I'm saying is authentication, right?

47:29.580 --> 47:33.060
The data integrity, but who does it authenticate, or what does it actually authenticate?

47:33.060 --> 47:36.900
It does not authenticate a human.

47:37.840 --> 47:40.320
It does not authenticate a chair.

47:40.780 --> 47:46.780
It does not authenticate a window on your screen, or a web browser, or a user who is logged in

47:46.780 --> 47:48.700
on a particular account.

47:48.940 --> 47:52.460
What it actually authenticates is, like, this specific interface here.

47:52.460 --> 47:59.500
And a given host, like this, as I said before, can have many interfaces, right?

47:59.560 --> 48:01.640
You could have IP over Bluetooth.

48:02.340 --> 48:05.360
You could have IP over wired Ethernet.

48:05.440 --> 48:07.280
You could have IP over Wi-Fi.

48:07.400 --> 48:09.080
You could have IP over ZigBee.

48:09.540 --> 48:12.560
You could have IP over Pigeons, for all I can.

48:12.880 --> 48:16.620
You could have IP over any medium, a data link Mac layer.

48:17.260 --> 48:21.060
And so, it only authenticates the interface.

48:21.060 --> 48:23.240
Okay?

48:28.840 --> 48:31.740
Another important thing, denial of service.

48:33.220 --> 48:35.500
I said nothing about denial of service.

48:36.660 --> 48:40.340
Because IPsec sucks when it comes to denial of service.

48:41.080 --> 48:47.440
And I don't blame it, because if you want security, denial of service is a security in and of itself

48:47.440 --> 48:48.180
is denial of service.

48:50.440 --> 48:50.920
Why?

48:51.060 --> 48:52.440
Because think about this.

48:52.620 --> 49:00.080
You have a router, I'm sorry, a gateway, like one of those guys, or a host.

49:01.160 --> 49:03.700
And they have an IP, one or more IP interfaces.

49:04.380 --> 49:06.320
And let's say you're using IPsec, right?

49:07.620 --> 49:10.920
And some adversary says, oh, you're using IPsec.

49:10.920 --> 49:11.600
How nice.

49:12.280 --> 49:20.000
I'm going to send you a barrage of IP packets that look like IPsec, right?

49:20.000 --> 49:24.320
But the authentication data, right?

49:24.320 --> 49:26.900
It's just frivolous.

49:26.900 --> 49:27.740
It's just garbage.

49:27.740 --> 49:36.760
Now, you cannot just send a random packet with random source to a given IP address.

49:36.760 --> 49:43.160
You have to send it or an IP address for which the source already has a connection, right?

49:43.160 --> 49:43.680
That association.

49:43.680 --> 49:47.840
So what you do, you eavesdrop on the communication.

49:48.060 --> 49:53.020
You say, oh, these two hosts, I don't care what they are, our gateways are, all right?

49:53.160 --> 49:53.780
We'll just close.

49:54.540 --> 49:55.520
Yeah, using IPsec.

49:55.600 --> 49:57.500
You can tell this from the headers, right?

49:58.160 --> 50:00.680
Remember, header says 50, 51, IPsec.

50:00.740 --> 50:01.180
You can tell.

50:02.640 --> 50:03.080
Nice.

50:04.160 --> 50:11.140
Well, what you do, you say, okay, I see a packet that uses IPsec, and it has source A destination B.

50:12.880 --> 50:21.260
I'm going to manufacture a giant quantity of packets in real time with source A, not my source,

50:21.260 --> 50:27.980
but I'm going to fake it and put source A destination B, IPsec, and the authentication of this garbage.

50:29.420 --> 50:29.620
Right?

50:30.620 --> 50:31.380
You with me?

50:33.460 --> 50:37.560
And send high speed to the victim.

50:38.220 --> 50:40.140
What is the poor receiver going to do?

50:43.320 --> 50:45.780
Well, the receiver, it says, right?

50:46.000 --> 50:47.140
Yes, sir.

50:47.500 --> 50:48.820
IPsec packet received.

50:48.820 --> 50:51.380
I have a connection with B, right?

50:52.180 --> 50:53.560
Verify authentication token.

50:55.040 --> 50:55.560
First thing.

50:56.360 --> 50:58.360
Well, that's not easy.

50:58.840 --> 51:00.880
That requires computing a HMAC.

51:02.560 --> 51:07.300
You might think, okay, HMAC is not a RSA decryption like in TLS SSL, right?

51:08.200 --> 51:13.620
But it's still inexpensive and frivolous operation because it prevents you from actually getting data

51:13.620 --> 51:16.160
by actual service.

51:17.760 --> 51:20.280
That's why it's called denial of service.

51:20.940 --> 51:26.760
Essentially, it's like, denial of service is like saying, you know, remember, I think I already mentioned this analogy.

51:26.980 --> 51:31.200
You're trying to exit your house front door and somebody points a fire hose at you.

51:31.200 --> 51:33.160
That's denial of service.

51:35.640 --> 51:39.960
You can't exit your door because there's a fire hose with, like, high-pressure water.

51:42.040 --> 51:43.960
Now, that's one type of denial of service.

51:44.060 --> 51:47.820
If the adversary has a fire hose, what would be an equivalent?

51:47.820 --> 51:53.760
A very high-speed interface that is able to generate a huge amount of traffic directed at the victim.

51:56.000 --> 51:59.600
A version of that is a distributed denial of service.

52:00.960 --> 52:07.500
Much, much craftier, much easier to mount that kind of an attack, which is the other system.

52:07.620 --> 52:13.780
Then I don't have enough bandwidth or my interface is not fast enough to just, like, I have a trickle.

52:13.780 --> 52:15.600
I can point, like, a guarded hose at your door.

52:16.320 --> 52:27.200
But if I get a bunch of zombies or a botnet or out the internet to start sending you low bandwidth IPsec packets,

52:29.120 --> 52:29.900
you follow what I'm saying?

52:29.900 --> 52:34.480
It's like I get everybody in the room to take a guarded hose and point at the door.

52:34.980 --> 52:37.100
20 guarding hoses equals fire hose.

52:39.360 --> 52:40.360
You get the idea.

52:40.360 --> 52:51.760
So, IPsec is actually a pain in the neck for denial of service because it forces the receiver to verify the authentication token.

52:54.060 --> 52:56.100
That means it has to receive the entire packet.

52:56.380 --> 52:57.340
It cannot say halfway.

52:57.740 --> 53:00.200
It's like receiving the header, saying, ah, this doesn't look good.

53:00.280 --> 53:00.680
No, no, no.

53:01.020 --> 53:06.500
It has to receive the entire packet, right, because the A and B already have an IPsec connection.

53:06.500 --> 53:09.320
It receives the entire packet, verifies the header, saying, ah, garbage.

53:09.320 --> 53:14.340
By that time, CPU resources have been consumed.

53:14.880 --> 53:16.920
Bandwidth resources have been consumed, right?

53:17.960 --> 53:19.020
That's denial of service.

53:20.060 --> 53:21.520
An IPsec makes it worse.

53:24.880 --> 53:26.520
Oh, it makes DOS easier.

53:26.520 --> 53:29.940
The other thing to remember, the order of operations.

53:29.940 --> 53:31.760
First, you encrypt, then you authenticate.

53:31.760 --> 53:39.040
So, if encryption is used, and this does not apply to authentication, this applies to ESP, right?

53:39.040 --> 53:49.800
The first thing you do, whether you use transport mode or autonomous mode, it doesn't matter, is that you first encrypt this, right?

53:49.800 --> 53:54.820
Or whether you're doing this or this, the first encrypt, and then you compute the authentication.

53:59.720 --> 54:00.160
Why?

54:07.500 --> 54:08.260
Good example.

54:08.260 --> 54:11.820
Why don't do it the other way around?

54:16.820 --> 54:23.900
Why not authenticate the data, put the authentication token inside here, and then encrypt the whole thing?

54:26.600 --> 54:27.500
Sounds the same.

54:27.500 --> 54:34.780
Yeah, I mean, you see that says the pink box, and at the end it says ESP authentication data.

54:35.660 --> 54:41.020
Why not sleep that pink box inside here, right?

54:43.300 --> 54:48.280
Like, compute the authentication first, and then encrypt also the authentication data.

54:48.280 --> 54:55.640
Any bright ideas, or not so bright ideas, any ideas?

55:01.640 --> 55:06.360
Yeah, it's not, so, kind of, yeah, yay.

55:07.280 --> 55:08.700
And also, yeah.

55:09.560 --> 55:14.480
There is a, today, encryption, in the past, encryption was always more expensive.

55:14.480 --> 55:19.020
Like, remember, I talked about DES, right?

55:20.200 --> 55:24.040
That's, like, a traditional encryption technique, more expensive, like, the order of magnitude.

55:24.480 --> 55:31.100
Because they were, like, in the olden days, they were designed to work very fast on hardware, but work poorly in software.

55:32.840 --> 55:36.420
But, today, modern encryption algorithms are pretty damn fast.

55:37.080 --> 55:40.020
So, they are, like, pretty much the same, you can think of the same speed.

55:41.120 --> 55:42.200
No, the answer is simple.

55:42.200 --> 55:53.900
So, if you do it in the other way, which is, you authenticated and encrypt, you would have to perform decryption first, and then compute the authentication token.

55:54.140 --> 55:56.020
That's double the work before you detect it.

55:56.080 --> 55:56.460
It's cracked.

55:58.160 --> 55:58.600
Right?

55:59.420 --> 56:04.340
Whereas, if you authenticated the packet first, you see what I mean?

56:04.440 --> 56:09.820
If you authenticated it first, and then decrypted, you don't need to worry about whether the decryption would succeed.

56:09.820 --> 56:13.400
Because, you know, because it's authentic, right?

56:14.020 --> 56:20.700
So, unless there was some broken implementation at the sender's end, you know that the decryption is going to work.

56:22.080 --> 56:24.580
You don't have to wonder whether you will or not.

56:25.340 --> 56:25.520
Okay?

56:25.520 --> 56:29.060
So, that's a performance consideration.

56:31.600 --> 56:32.000
Right?

56:33.440 --> 56:33.840
Alright.

56:33.960 --> 56:35.140
We're not going to talk about Ike.

56:35.700 --> 56:37.480
I'm just going to tell you a few things.

56:37.680 --> 56:43.300
So, Ike is, like, this giant standard for Internet Key Exchange.

56:43.300 --> 56:49.220
And it allows, so it's what happens before you start IPsec, right?

56:49.260 --> 56:52.380
Before you can send IPsec packets.

56:53.320 --> 56:53.500
Right?

56:53.540 --> 56:54.660
The keys need to be set out.

56:54.740 --> 56:58.520
However, IPsec also works with pre-installed keys.

56:59.020 --> 57:05.460
So, it can, in fact, like, if you have manually installed cryptographic keys,

57:05.460 --> 57:09.420
have A and B, they don't really need Ike.

57:09.880 --> 57:12.020
They can just, like, start using IPsec.

57:13.600 --> 57:13.920
Okay?

57:14.640 --> 57:18.980
And this is done sometimes with, these days, with Ike.

57:19.040 --> 57:22.000
Well, it used to be done a lot, but people didn't know how to use Ike.

57:22.060 --> 57:22.960
There was no Ike yet.

57:23.500 --> 57:26.140
But it's done also today with, like, IoT devices sometimes.

57:26.140 --> 57:30.340
Well, the manufacturer will pre-install a key or a set of keys,

57:30.760 --> 57:36.040
and then an IoT device doesn't really talk to many hosts, right?

57:36.560 --> 57:38.040
An IoT device might talk like that.

57:38.180 --> 57:40.760
Your Echo, what does it talk to?

57:41.200 --> 57:43.780
If you have an Echo voice assistant.

57:44.880 --> 57:45.960
Who does it talk to?

57:46.680 --> 57:47.200
Amazon.

57:47.660 --> 57:48.880
It's mothership, right?

57:49.660 --> 57:52.620
It doesn't talk to random other devices, really, right?

57:53.040 --> 57:54.400
At least not the flow-end Echo.

57:54.400 --> 57:57.280
So, for those types, they say, I'll just pre-install a key, you know?

57:58.500 --> 57:59.340
So, that might be...

57:59.340 --> 58:03.000
I'm not saying I don't know if Echo's use IPSec, but that's one way.

58:04.380 --> 58:04.740
All right.

58:07.260 --> 58:13.220
So, IPSec, what IPSec gives you is this something called security association.

58:13.840 --> 58:16.440
And security association is where you get the SPI.

58:16.520 --> 58:19.200
Remember the SPI, SPI, security parameters, and the session ID.

58:19.440 --> 58:24.300
You get it based on a security association between post-Aid or IP address,

58:24.400 --> 58:26.960
IP address, and it's always one way.

58:27.120 --> 58:27.760
Remember, right?

58:27.980 --> 58:28.300
One way.

58:28.520 --> 58:30.220
A to B is different from B to A.

58:31.360 --> 58:34.760
And then every host that uses IPSec is supposed to have a database,

58:34.940 --> 58:40.960
really just a table of, oh, sad, security association database.

58:40.960 --> 58:48.980
Okay, where it keeps a record for every security association where it will say,

58:49.100 --> 58:52.580
I know who I am, I'm host A, but, like, there will be an entry.

58:52.780 --> 59:00.380
Host B, what protocol to use, like AH, tunnel mode, what is the key, blah, blah, blah, etc.

59:00.560 --> 59:01.960
Like, lifetime, something like that.

59:01.960 --> 59:08.600
So, SPI, I already told you, right?

59:08.600 --> 59:13.400
So, this is an entry that the SAP database, the security association database,

59:13.900 --> 59:14.920
points you to the SPI.

59:15.580 --> 59:21.180
So, when you receive a packet, right, you are on the receiving side of the IPSec packet,

59:22.160 --> 59:24.400
you, remember, every header has a SPI, right?

59:24.460 --> 59:26.940
Whether it's AH or ASP has a SPI field.

59:26.940 --> 59:30.000
You take the SPI field and you look up that database immediately.

59:32.060 --> 59:34.740
Okay, if you don't find it, toss the packet.

59:36.160 --> 59:39.320
If you find it, that tells you, oh, this is the header I'm using.

59:39.440 --> 59:42.320
So, how do you know which IPSec header, which mode?

59:42.800 --> 59:43.820
Well, the database tells you.

59:44.800 --> 59:45.000
Okay?

59:46.280 --> 59:48.360
So, that's very important.

59:48.640 --> 59:49.880
You know, it's mandatory.

59:50.100 --> 59:52.700
Every IPSec application must maintain the database.

59:52.700 --> 59:58.980
And then it has something called security policy database, which actually governs,

59:59.020 --> 01:00:02.380
it's more like a, similar to what you will see firewalls do,

01:00:02.600 --> 01:00:07.680
it governs, like, which connections require which parameters.

01:00:08.900 --> 01:00:09.600
Policies, right?

01:00:09.640 --> 01:00:13.260
It says, oh, if you're talking to an internal host, you don't need to use IPSec.

01:00:13.260 --> 01:00:17.840
If you're talking to, I don't know, our branch office on the East Coast,

01:00:17.940 --> 01:00:21.880
you must use authentication header, transport mode.

01:00:22.480 --> 01:00:22.560
Okay?

01:00:23.140 --> 01:00:27.560
Or if you're using, if you're talking to, I don't know, a host in a foreign country,

01:00:27.940 --> 01:00:34.620
then you must use the host to gateway ESP transport mode, something like that.

01:00:34.700 --> 01:00:35.740
It's a policy.

01:00:35.880 --> 01:00:40.680
Something your security, every organization's security administrator configures.

01:00:43.260 --> 01:00:46.440
All right, so it kind of fits together like this.

01:00:47.340 --> 01:00:49.200
Then, of course, the blob is the internet.

01:00:50.820 --> 01:01:00.360
And so that each host will have its own database of security associations

01:01:00.360 --> 01:01:03.780
that will be governed by the security policy database.

01:01:03.780 --> 01:01:14.820
Well, I think I'll just end on this, because I don't really want to go for it, Ike.

01:01:15.720 --> 01:01:21.780
The idea is, the main thing you need to know about Ike is that it establishes a secure channel,

01:01:22.300 --> 01:01:25.700
like, outside, on the side, like a control channel,

01:01:25.700 --> 01:01:27.840
and it establishes a set of keys.

01:01:28.460 --> 01:01:28.580
Okay?

01:01:29.700 --> 01:01:32.140
And then, after that, we do like to say.

01:01:32.260 --> 01:01:34.560
So Ike has its own message format.

01:01:34.860 --> 01:01:37.580
It does not, this is where it differs from SSLTLS.

01:01:37.740 --> 01:01:41.440
In SSLTLS, all the messages go for the record player, if I remember.

01:01:42.220 --> 01:01:44.020
Well, in Ike, they don't.

01:01:44.160 --> 01:01:46.380
Ike has its own message format.

01:01:46.380 --> 01:01:49.260
And so that, this is like the example.

01:01:49.840 --> 01:01:50.740
It might be helpful.

01:01:51.240 --> 01:01:55.720
So in this case, we have host A, kind of like what I drew on the board earlier.

01:01:56.360 --> 01:01:59.400
Host A, and then two gateways, right?

01:01:59.500 --> 01:02:01.400
The blue arrow is the internet, right?

01:02:02.660 --> 01:02:03.700
And then you have host B.

01:02:04.240 --> 01:02:12.560
And so, in this case, A and B use a transport mode of either H or ESP, like end-to-end.

01:02:12.560 --> 01:02:20.060
And in addition to that, the gateways between themselves use a tunnel mode to hide,

01:02:21.260 --> 01:02:24.000
among other things, the IP addresses of the internal host.

01:02:24.580 --> 01:02:32.260
So if we look at, like, inside the host A, its security policy database might say something like,

01:02:32.620 --> 01:02:40.560
oh, if I have, if I'm talking to host B on any protocol, using any protocol, and using any port,

01:02:40.560 --> 01:02:44.600
remember, any transport, when protocol means any transport, or about IP protocol,

01:02:45.060 --> 01:02:52.140
and any port, I should use authentication header, IPsec, with HMAC MD5,

01:02:52.820 --> 01:03:00.860
that is MD5, so HMAC instantiated with MD5 hash function to protect, to compute the authentication data.

01:03:00.860 --> 01:03:08.640
Okay, that's a policy database, it contains no keys, it does not refer to any active connection,

01:03:09.120 --> 01:03:10.500
it is a general policy.

01:03:11.080 --> 01:03:17.080
But the SAD, the security association database, will say, ah, currently, there is a connection

01:03:17.080 --> 01:03:22.220
between A and B, and the protocol we use is AH, as policy dictates, right?

01:03:22.220 --> 01:03:28.640
And the SPI is 12, so that's our session ID, and our, we're using HMAC MD5,

01:03:28.720 --> 01:03:32.600
and probably what I don't show here is that the actual key will be stored there, too.

01:03:33.420 --> 01:03:33.660
Okay?

01:03:36.080 --> 01:03:42.780
Now, the gateways database, right, this is gateway C, will say something like,

01:03:42.880 --> 01:03:47.220
oh, anybody from subnet, this refers not to A, but subnetwork, right?

01:03:47.220 --> 01:03:48.520
That's what subnet is, right?

01:03:48.520 --> 01:03:55.940
So anybody on A's subnet, talking to B's subnet, on using any protocol on any port,

01:03:56.120 --> 01:04:00.860
must use ESP with triple tensing, or encryption.

01:04:03.600 --> 01:04:08.380
And tunnel destination is D, that's our friend D over here, right?

01:04:08.720 --> 01:04:10.500
That's the endpoint of the IPC tunnel.

01:04:10.920 --> 01:04:15.120
So that, again, is policy, does not refer to any existing connection,

01:04:15.120 --> 01:04:18.120
doesn't matter if any exists or not, this is the rule.

01:04:18.940 --> 01:04:22.340
The actual, currently, existing connection is,

01:04:22.980 --> 01:04:27.040
there is an A sub to B sub, anybody from A to B,

01:04:27.900 --> 01:04:30.500
there is an existing connection using ESP,

01:04:31.780 --> 01:04:34.800
SPI is 14, there's a number that I picked,

01:04:35.240 --> 01:04:36.940
triple tensing, the key is there.

01:04:36.940 --> 01:04:39.020
Okay, what does that mean?

01:04:39.420 --> 01:04:42.040
If there was another host, A prime,

01:04:43.300 --> 01:04:45.260
talking to another host, B prime,

01:04:46.080 --> 01:04:49.540
they would use the same tunnel.

01:04:51.560 --> 01:04:52.300
Nice, right?

01:04:52.920 --> 01:04:53.920
They all fit in the same tunnel.

01:04:54.000 --> 01:04:57.340
No reason that C and D should have multiple tunnels.

01:04:57.980 --> 01:04:59.740
Everything is within the same tunnel.

01:04:59.740 --> 01:05:04.160
So, an adversary who listens on that blue arrow on the internet,

01:05:04.620 --> 01:05:06.220
it cannot distinguish between,

01:05:07.600 --> 01:05:09.240
he does not know how many hosts are talking to,

01:05:09.300 --> 01:05:10.720
how many other hosts at all.

01:05:10.980 --> 01:05:13.460
The only thing they will see is the volume of traffic.

01:05:14.600 --> 01:05:15.960
The only other thing they will see,

01:05:16.020 --> 01:05:17.520
in addition to the volume of traffic,

01:05:18.180 --> 01:05:19.940
is the timing of that traffic.

01:05:21.600 --> 01:05:22.120
But what,

01:05:23.100 --> 01:05:24.420
this is not part of IPC,

01:05:24.720 --> 01:05:26.180
but what smart people do,

01:05:26.280 --> 01:05:28.620
if they're really concerned about traffic analysis,

01:05:28.620 --> 01:05:29.560
and hiding,

01:05:30.460 --> 01:05:31.080
like, for example,

01:05:31.200 --> 01:05:32.720
in the morning, the volume goes up,

01:05:32.760 --> 01:05:34.880
in the afternoon, maybe at lunch, it goes down, right?

01:05:35.040 --> 01:05:36.340
You might not think this is important,

01:05:36.440 --> 01:05:37.860
but this is very important sometimes,

01:05:37.860 --> 01:05:40.220
especially, like, in critical application,

01:05:40.420 --> 01:05:42.520
defense, you know, et cetera.

01:05:43.040 --> 01:05:44.900
What they do is they pat the traffic.

01:05:45.860 --> 01:05:51.460
Meaning that C and D might send trash to each other,

01:05:52.120 --> 01:05:53.300
just garbage,

01:05:54.260 --> 01:05:57.560
to make it seem like real hosts are communicating.

01:05:57.560 --> 01:05:59.320
Make sense?

01:06:00.740 --> 01:06:00.960
No?

01:06:01.540 --> 01:06:03.280
To obscure the patterns.

01:06:04.440 --> 01:06:05.340
On that note,

01:06:05.540 --> 01:06:05.900
we're done.

01:06:06.720 --> 01:06:07.240
For today.

01:06:07.860 --> 01:06:08.400
So remember,

01:06:09.040 --> 01:06:12.440
I strongly urge you to show up on Tuesday

01:06:12.440 --> 01:06:14.460
for the guest lecture.

01:06:16.800 --> 01:06:17.860
Decision is always true.


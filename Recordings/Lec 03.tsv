start	end	text
0	9160	where instead of doing what you see here, every block is encrypted with a different key.
11520	16380	Now, you start with the same key, but for every block that you encrypt,
16700	23640	you derive a unique key based on the master key and the block number, the position of the block.
23640	32740	So that makes sure that every block knows its place and cannot be moved around or deleted, okay?
37140	42180	So there are other modes that I'm not going to go into here, but if you're in, because that's crypto, right,
42240	48440	then we're trying to kind of bulldoze for crypto fairly quickly because you should know something about it.
48440	55800	Now, as you also know, there's two types of crypto, symmetric or conventional, and public key or asymmetric.
56900	60560	All right, and the differences are fairly obvious.
60980	65300	In a symmetric crypto, both parties, assuming there are two parties to communicate,
65640	68260	both parties need to know the same key, okay?
69320	72460	And the biggest problem there is how to distribute that key,
72460	78580	how to, who comes up with the key, and how does the other party learn the key, right?
78660	80280	So it's key distribution or key management.
81640	85660	In a public key crypto, you have this radically, totally different approach, right,
85700	90640	where the public key is known for everybody, but private keys are not, right?
90720	95840	So, typical situation, I put my public key on my webpage or on Canvas.
95840	102680	As enrolled students, you will see it as public, and then any one of you can send me a secure message
102680	104180	using my public key.
105120	110080	As long as you trust that it is mine, okay, you can send me a secure message,
110300	114820	and none of you can interfere with other people's messages or read them, right, or anything like that, right?
115180	119560	So only I can decrypt because I have, I am the only one who has a private key.
119560	123460	So that kind of solves, sort of, kind of the distribution problem,
123640	132460	because my public key is not secret, so there's no, like, headache of how do I distribute it, right?
132500	133400	I just post it somewhere.
135580	135820	Yeah?
140500	145840	So in public key crypto, the plain text message goes for the encryption algorithm,
145840	148020	which is computed with the message itself.
149560	155360	It must be allergies.
156180	158800	Ah, Bob's public key is known to Alice.
158940	162340	Alice uses the message, and Bob's public key to produce the ciphertext.
162640	165220	That's the notation we use in this lecture.
165820	167020	I'm borrowing from the book.
168780	172980	And then Bob, who knows a private key, not the same as the public key, okay,
172980	178520	that's the whole point, will somehow compute a transformation on the ciphertext
178520	183240	that will negate the effects of encryption and spit out the same message.
183240	185140	That's where magic happens.
185140	195340	In order for this magic to work, you need to have some functions, right?
196000	203680	Encrypt and decrypt functions, where essentially these operations with two different keys reverse each other.
203680	208400	And this is different from symmetric crypto, where you can say, well, XOR, for example, right?
208400	217680	They use one-time path, XOR with a key encrypts the plaintext, and, again, XORing the ciphertext with a key decrypts,
217680	223280	because XOR of something with something, the same cancels it out.
224280	231880	But here, we have two different keys, and so, in addition, if you know the public key,
232240	236960	like in my example, I'm the instructor, I post my public key on the bulletin board somewhere,
237960	242380	that public key should not allow you to let my secret key, or my private key.
242380	246080	If that was the case, it would be useless, right?
246340	252800	So, it's not impossible, because obviously there is some relationship between my public key and my private key, right?
253780	256960	So, by saying impossible, that's a high bar.
257200	262040	I'm not saying it's impossible, but it should be computationally very hard for you to learn my private key.
262040	271040	Right? An example of that, well, Diffie-Hellman, but it's not truly an encryption scheme, it's more of a key management scheme.
271600	274020	The best known example is RSA, right?
274140	275160	Rivest-Chemeyer Edelman.
281980	289720	Dating back to 1978, the public key as a concept was actually invented in 1974 by a guy who doesn't get enough credit,
289720	295980	partially because he's super weird, even for a computer scientist, his name is Ralph Merkle.
297040	301020	And if you study computer security, you probably come across his name because there's something called Merkle-Hastries,
301620	307640	and if you haven't heard of him, you should know his name, Merkle, M-E-R-K-L-E, Ralph Merkle.
307640	311940	He invented the very first public key method that at least was published, right?
312420	313920	That he doesn't get credit for, for some reason.
313920	323500	Anyway, RSA, how it works, you first, to set up the system, you have to choose two large prime numbers.
324400	330380	By large, I mean, while it says 2048 bits each, probably even 1,000 bits is okay.
331140	335240	So, you pick two large numbers, let's say they are 1,044 bits long.
335240	342380	When you multiply them together, which you should, you get another large integer, which is no longer prime, right,
342440	344600	because it's a multiplication of two prime numbers.
344940	350980	It is a composite number, but it has an interesting property that it can only be factored in one way, right, with two primes.
351780	353760	And prime numbers, as you know, have no factors.
355200	360040	So, you come up with this giant number, which is a product of two large primes.
360440	362480	The large primes must be about the same in length.
362480	372080	They are not the same, same is bad, they are different, but they are about the same length, in terms of, like, digits of bits.
373700	374680	And there is a good reason for that.
375200	378940	So, you compute the product, which is not difficult, just another huge number.
379400	383580	And then you compute another product, which is called Z, which is a P-1 times Q-1.
385320	385720	Okay?
386080	388200	P-1 times U-1.
388200	396240	Notice, if P and Q are prime, there's no way P-1 is prime or Q-1 is prime, right, in fact, you'll know they are even.
398340	398620	Yeah?
399060	399340	Right.
399340	403780	So, that product is not, is not a product of two prime.
404940	405300	All right.
405420	408900	Then, you choose a number E.
409960	411360	That E is very important.
412640	417140	Of course, that E is less than N, making greater than N makes absolutely zero sense.
417140	420420	And it must have no common factors with Z.
422340	428900	But P, but N, Z, must have no common factors with Z.
429580	434120	When two numbers have no common factors, they are called, in mathematics, relatively prime.
434120	438880	Which means, E and Z must be relatively prime for each other.
439680	442600	To be relatively prime, the numbers don't need to be prime.
443360	443600	Right?
444000	444720	Are you following me?
444760	445300	I'm waking up.
445420	445580	Right?
446340	447420	They don't need to be prime.
447600	449720	They just need to have no common factors.
449720	457340	Now, if you choose E to be prime, that helps.
457500	462420	Because then, it obviously has no common factors with Z minus 1, sorry, with Z.
462860	463040	Right?
463960	464540	That's okay.
464660	466640	You can, in fact, choose E to be 3.
468560	470080	If it helps you think about it.
470360	471260	It doesn't have to be large.
471840	472860	Can't be, but it doesn't have to be.
474480	477500	Then, so these 3 and 4 are the crucial steps.
477500	481160	If you've never heard of it, then I see your eyes are not glazing over,
481280	482920	which means some of you have probably never heard of this.
483480	483880	Amazing.
485820	486780	You pick a D.
488640	489660	Another number, D.
489900	490940	But D, you don't pick.
491020	491960	Actually, you compute it.
492240	498480	You compute it that it must be the case that E times D minus 1 is divisible by Z.
500840	502340	So it's not like you actually pick.
502540	502660	Right?
502780	503480	E you pick.
504420	505380	D you compute.
507500	510960	So it must be the case, in other words, so if this doesn't make sense, think of this.
511160	516880	E times D must be 1 mod Z.
522500	523620	Remember the mod operator?
523780	525140	Everybody loves mod operators, right?
525140	533360	So, in other words, they are called inverses of each other mod Z.
535440	541060	Now, there's a whole number theoretic background that goes into this, which, again, the 134 slides
541060	543960	that I thought you should go in excruciating detail.
543960	550840	So, if you really love this stuff, and you really want to understand, go there, okay?
550840	556800	But there's, like, a whole mathematical foundation about why this works and why this is important.
556800	560980	So, okay, at the end, step five, what is your public key?
561060	568020	Your public key is N, modulus, the product of T and Q, and E, that number you pick.
569320	571240	Together, N and E are your public key.
571240	574540	You throw them on your web page, you put them on your canvas, whatever.
575860	577100	You are free to give it away.
579840	583820	But your private key, well, it says N and D, that's actually incorrect.
585240	588260	D, P, and Q are your private key.
588260	591860	Because N is public.
592700	594620	So, if you really want to know, it's D.
594840	597340	That D is the one you're going to use to be the private key.
599820	607680	And the whole trick with the RSA is that it seems, we believe, right?
608800	610480	You're not the mathiest, you understand.
610480	617400	We believe that knowing E, N, and E, it is really, really hard
617400	618860	to compute a D.
621180	622300	We don't have a proof.
623280	625300	We, what I mean, the world, at least.
626500	628560	The math, the mathematicians, the computer scientists.
628640	631840	There is no formal proof that it is computationally difficult.
632960	638140	But there has been no evidence to the contrary.
639040	640660	Proof by hundreds of demons, right?
640820	644880	It's, yes, proof by repetition and trial, repetition and trial.
645240	646720	People like me keep repeating it.
646720	648840	We think it's hard, and we think it's hard.
649220	652800	And other people try, and other people try and break it, and yet they fail.
653400	654920	One day somebody might succeed.
656000	658260	In which case, we're screwed.
659580	660380	At least a little bit.
661200	668120	Because a lot of today's secure communications are sort of based on RSA problem.
668120	670140	Okay?
670140	676040	Any questions?
680120	681000	Just an anecdote.
681400	687540	Until 2002, everybody thought that primality testing, does everybody know what primality
687540	688120	testing means?
688120	691300	I'll give you an integer, tell me if it's primed.
692040	693340	I don't mean like 17.
694300	696940	I mean like a thousand digit integer.
696940	701660	I'll give you a huge integer, and I'll tell you, is it primed?
703200	705060	That problem is called primality testing.
705140	708080	Until 2002, it was believed to be computationally hard.
708080	718400	Well, then in 2002, there was a paper by two very bright Indian students, and a no-good professor.
718540	719940	We just tagged them along.
720500	721460	But the students did the work.
721540	722120	I know it's for a fact.
722120	728740	And they proved, formally, mathematically, that primality testing is, in fact, polynomial.
730380	733900	So, the entire math world was super surprised.
734760	735840	So, these things happen.
737600	739640	That's why we can never be absolutely sure.
741520	742000	Right.
742380	742660	Okay.
742780	743740	So, RSA encryption.
743920	744500	How does it work?
745160	747020	Given modulus N.
747200	748060	N is called the modulus.
748060	748560	Okay?
748560	750340	And that exponent E.
750720	754080	E is called E because it's exponent, and also because it's for encryption.
755360	755520	Right?
755640	755860	E.
757040	758700	And D is for decryption.
758860	758980	Right?
759020	760140	So, that's why we call it D.
760800	765560	To encrypt a message, you simply compute, take a message, raise it to the power E, mod N.
768100	770380	Everybody should know how the mod operator works, right?
770880	773860	So, N to the E, mod N.
774520	775920	The mod part is a crucial one.
775920	782000	If you don't do mod, if you simply take a message and exponentiate to E, first, you'll
782000	782580	have an expansion.
783380	783560	Right?
783640	785420	Because exponentiation expands.
787060	787280	Right?
787780	788560	The message will grow.
788660	790900	And if E is a large number, the message will grow out of bounds.
791060	791860	Way out of bounds.
792820	793520	That's one problem.
793640	794880	The other problem would be insecure.
794880	800080	Because even given a very large number, to take a discrete, sorry, to create a log, not
800080	804000	a discrete one, a log of a number, okay, is easy.
804640	806400	Or take a square root of an number, it's easy.
806640	808140	Take a cube root of a number, it's easy.
808780	809920	And E is public, right?
809920	817120	So, if I give you M to the E, and I say, can you take an E root of that and give me M?
817840	818800	That's not a hard problem.
820000	820680	That's polynomial.
822140	829960	But if I give you M to the E mod N, and ask you to take an E root of that, that's a hard
829960	830260	problem.
830260	832580	So, again, we believe.
835160	836440	So, the magic is here.
837580	837840	Right?
838020	848720	It's difficult, apparently, to take an E root of the cypertext, which is M to the E mod N.
849200	855900	But also, and this is real magic, if you take M to the E mod N, and then raise it to the
855900	857940	power D, you get back M.
857940	860560	Even though E and D are different.
863080	863440	Okay?
866260	867460	There is a reason for this.
868300	871800	So, if you've never, now, to be honest, there's no penalty.
871960	875620	Is anybody here who has not really seen the guts of the public kicker therapy before?
877120	877880	One, two.
878200	878720	Anybody else?
879400	879820	I'm guessing.
880040	880200	Okay.
880740	882960	So, the way you think about public kicker therapy is like this.
883460	884780	This is like what I tell the guts.
884780	889920	Anybody use a U.S. Postal mailbox recently?
890740	891760	Remember those blue boxes?
892260	894580	You touch one inappropriately.
895260	895980	You molest it.
896260	897040	It's a federal offense.
897640	898700	You'll go to federal prison.
899380	899680	But don't.
900160	903160	Now, the interface that the box gives you is what?
903300	903800	A hole.
904060	904860	A slit.
905120	905240	Right?
905240	906340	Open it.
906460	909540	You stick your mail in.
909700	910180	You close it.
910820	913440	Once you throw it in, you can't.
913560	914020	You can't.
914060	914220	Right?
914320	916500	You try to do anything, federal prison.
917540	919540	And if you're not a citizen these days, God knows.
919660	919960	God help.
920600	920720	Yeah.
921080	921520	So.
922300	922780	Bad joke.
922880	923100	I don't know.
923520	924220	Too soon.
924220	928740	So, the thing is, anybody can use a mailbox, right?
930420	933120	You can just come up, open, slide letter in.
933980	936960	To get things out, you need to be a postman with a key.
937540	938480	That's a public decryptor.
939100	940080	Anybody can encrypt.
940980	941180	Right?
941240	942540	The public key interface is public.
943260	945420	But to decrypt, you need to have a private key.
945420	948600	So, this is a trickery with RSA.
950500	951500	Let's look at an example.
951800	952440	You can trust me.
952500	952920	It works.
953180	955620	You can verify in your favorite calculator.
956200	957720	If we pick toy example, right?
957800	958540	P equals Q.
958620	960020	You will never pick such strong numbers.
960120	960360	First one.
960460	960680	Ever.
961280	962440	But this is just a toy example.
962800	965560	If P equals Q, P equals 5, Q equals 7.
965660	966340	These are prime numbers.
966940	970180	P minus 1 times Q minus 1 is 24.
971540	972860	And N is 35.
973820	974580	Still correct?
974640	975120	Of two primes.
975960	977320	We pick E equals 5.
978840	979120	Okay?
980000	981620	I know, silly, but okay.
982460	989540	Then, the inverse of P, mod 24, is 29.
991540	992600	Is that possible?
996760	998180	What's 29 times 5?
1000460	1001180	145.
1001560	1001820	Right?
1001820	1006360	145, mod 24.
1013360	1013840	Mod 24.
1014840	1015400	1.
1015400	1019440	Now, I didn't pick this example.
1019560	1021320	This is from the Kuroza-Kuroza book.
1022760	1024400	Why did I pick 29?
1026320	1028800	I should have picked 5 there instead of 49.
1030560	1030940	Right?
1030940	1033960	Because 49 does not exist.
1035960	1037100	It's greater than 24.
1037100	1040980	So, actually, in this silly example, which I did not come up with, but I should have really
1040980	1043680	corrected it, E and D are the same.
1043680	1046580	It will never happen in real life.
1048580	1053740	So, that's because 29 is actually 5 mod Z.
1053740	1056500	So, let's look at the encryption, let's follow along.
1056500	1063160	Yeah, I want to encrypt the letter I, that's not a 1, that's an M.
1063160	1068620	And so, I is the 12th letter of the alphabet, so actually, what the message is, it's M is 12.
1069000	1071900	So, then, you raise it to the power E, which is 29.
1072900	1073700	Stupid.
1073700	1079380	You get this number, which, actually, mod N is 17.
1080740	1081860	So, that's the Cypher case.
1083380	1083780	17.
1084660	1086980	Then, when you raise it to the D, again, this is stupid.
1087540	1089060	It should be, actually, 5.
1089780	1093940	Raised to the 5, not 29, which, in that case, would be just about as long as that.
1094000	1095440	Not that number, but as long as that.
1095780	1098020	It will be 12, which is that.
1098980	1099320	All right.
1099320	1107900	So, the whole point is, to convince you, to demonstrate that encryption and decryption are inverses of each other.
1108320	1115320	Even though you encrypt with one number and decrypt with another number, you get back the original plaintext.
1116340	1125240	Not only that, but if you first apply the D, meaning that you first decrypt a plaintext,
1125760	1128060	and then encrypt it, the same thing works.
1129320	1131920	Which means that encryption and decryption are commutative.
1133780	1135300	Why is that important?
1136340	1136880	Anybody know?
1139380	1142120	Why would you want to decrypt a message that's not encrypted?
1144600	1145000	No idea?
1145480	1146920	Do you have the same thing in decrypting?
1148980	1149580	Yes.
1150580	1151560	It's true.
1152020	1153920	If you reverse those, yes.
1153920	1163500	But on a more serious note, have you all ever heard of signatures?
1165480	1166380	Digital signatures?
1167500	1176100	Well, a digital signature is computed by taking a plaintext message, signing it with your private key,
1176100	1180360	then releasing the message, then releasing the message, and the signature.
1181880	1186820	Notice in that case, I said releasing the message, not hiding the message.
1188160	1190020	Public key encryption is about hiding.
1191280	1193820	Public key signatures are not about hiding the message.
1193960	1196220	It's to prove that you generated the message.
1196220	1199120	So let's come back to our classroom example.
1199640	1204560	You went to my classroom page, a web page, and a canvas, and obtained my public key.
1205600	1207300	Now you have nothing to tell me.
1207360	1208560	You're not sending me anything.
1208660	1210340	But I have something to tell you.
1210340	1213880	And now what I have to tell you is this class is canceled.
1215400	1215760	Okay?
1216100	1220740	Due to low attendance and poor performance, the class is hereby canceled.
1220880	1222320	Don't come to class next time.
1223420	1226120	The message sounds a little weird, unhinged, bizarre.
1226380	1226620	Okay?
1227540	1228580	Is it really me?
1228900	1234200	Or is it some hacker in Krakistan, you know, hiding in his mom's basement, sending this?
1235100	1239520	Well, you verified my signature on the message.
1240340	1248260	By using my public key to check that the signature was computed with my private key that only I could have known.
1249120	1249700	Make sense?
1250740	1254440	In that case, I'm not hiding the message to you all.
1255200	1258940	You are verifying the origin of the message and its integrity.
1260520	1263740	So that's where decrypting the plaintext, essentially, is useful.
1264180	1264320	Yeah?
1264700	1269060	So in theory, like, you always have had some trust with public key photography,
1269060	1271400	because you have to have some trusted public key release.
1272400	1272660	Ah.
1273460	1273940	Okay.
1274860	1278980	What you're talking about is how do you distribute public keys.
1279280	1279460	Right.
1279960	1280440	Okay.
1281160	1282440	That's the new headache.
1284200	1287660	Symmetric photography has this big headache of how do you distribute secret key.
1287840	1289060	You have to distribute secret.
1289060	1292060	A little bird has to sit on the shelf and tell you.
1292360	1293460	God has to talk to you.
1293460	1293840	I don't know.
1293900	1296560	I have to meet you in physically, meet you, give you something.
1296840	1300560	Our phones have to touch NFCs, right, in order to transmit the secret key.
1301080	1304260	But with public key, the problem is not as bad, right?
1304720	1307940	It's more like, do I trust this is your public key?
1308300	1308480	Right.
1308480	1310860	So, very good question.
1311120	1312360	That is very true.
1312440	1314140	It's called a public key distribution problem.
1314780	1319640	Again, I emphasize, it is not nearly as nasty as the symmetric key distribution problem.
1320620	1324740	Because what we're distributing here is not fundamentally secret, right?
1325320	1328160	What we're distributing here has to be reliable.
1328320	1334380	It has to be like, yes, it has to be my public key, not some other person's public key.
1334380	1337300	So, well, we're coming to that.
1337540	1343940	But to make a shortcut, you have to basically trust the place you give it from.
1344500	1350340	So, of course, if I give it to you personally, yes, it's mine, but then how is this different from symmetric?
1351780	1359240	If you trust the UCI ICS webpage, you go there and say my public key is there, yeah, fine.
1359240	1367340	If you trust Canvas, right, and I post my public key there and you trust that I authenticate it, it all has to be like a chain of trust, right?
1367640	1378400	That if the Canvas authenticated me based on my UCI credentials and blah, blah, blah, and therefore only I could have posted my public key and my Canvas page, et cetera, et cetera.
1379520	1381960	It's only going to be as secure as the weakest link.
1381960	1386180	So, there's no, like, protocol that exists that would not be.
1386360	1388340	Ah, there are.
1389440	1390880	There are protocols.
1392760	1393680	There are.
1395920	1402480	But ultimately, there's no, like, Big Bang, like some elegant description of how all this is done.
1402700	1403760	Think about your browser.
1404320	1411680	What happens when you install your browser on, let's say, you buy a new computer and it comes with some god-awful thing like Safari?
1411960	1417960	I don't know, I don't know, or worse yet before you used to be an Internet Explorer, before you died in that time you got it.
1418500	1425060	And, you know, and then you wanted to install Chrome, or Tor, perhaps, or Brave, I don't know.
1425580	1426600	And what would you do?
1427060	1437760	You went to that, you used a very crappy browser that you got there, right, to go somewhere and, like, download the code that did this game, I didn't try to package it, depending on what's that business.
1437760	1440380	And you had to trust that place.
1441200	1449360	And then, when you install the browser, assuming you're kind of like, okay, I trust that, it came with, like, some called roots of trust.
1450040	1461120	With these kind of, what's called CAs, right, Certification Authority keys that certify all the other keys for all the websites that you deal with using HTTPS or TLS, right?
1461120	1470480	So, you see, now, in operation today, when you use your browser, 99% of the time, you see HTTPS, if you pay attention.
1471220	1477720	And that means you're using TLS with whatever web server you're talking to.
1477720	1486040	But the original connection established, when you first went to that web server, had to have what's called a handshake, and we'll cover that later.
1487300	1490540	And that handshake involved, public key, of that web server.
1491460	1492100	Not of yours.
1492260	1493660	Usually, you are not involved.
1493720	1495320	You don't have a public key like HTTPS.
1495400	1495920	I mean, you can't.
1496040	1496700	It's obscure.
1497280	1498960	Usually, you want to authenticate your web server.
1498960	1509140	You want to go, I'm going to Wells Fargo, and not, you know, .com, and not whatfargo.cn, or .fargo.kr, I don't know, North Korea somewhere, right?
1509480	1511320	So, that's important.
1512100	1519680	And that's all based on the roots of trust that the original browser package came with, so, get that in?
1520080	1520280	Yeah.
1520800	1521020	Yeah.
1522700	1526740	Anyway, so, back to RSA, where does it work?
1526740	1537780	Well, there's lots of number-theoretic results, and I'm going to explore you with, but essentially, the reason, remember, we picked E and D, so they're inverses of each other, mod Z.
1538160	1542640	Well, it turns out, when you do things, you're modular, mod N, right?
1543260	1552660	So, if you say, take X to the Y, you raise X to the power of Y, mod N, in the exponent, things are also modular.
1552660	1556760	But, not mod N, they're mod what's called phi of N, or Z.
1557780	1559520	See, mod V minus 1 times Q minus 1.
1559700	1562320	So, everything gets wrapped around in the exponent.
1562320	1572780	And so, when you take X and raise it to the power of E, and then again raise it to the power of D, the two exponents multiplied, right?
1572980	1573740	E times D.
1574560	1578660	But, we pick them so that E times D, mod E minus 5 times Q minus 1 is 1.
1579840	1580860	And that's the explanation.
1581920	1582200	Right?
1582200	1590120	To use RSA, you don't need to understand this.
1591300	1593660	You just need to see the result, okay, that it works.
1594420	1598580	And it's been working for the last 40 years, almost 40 years.
1598580	1611320	So, this is what I alluded to before, is that you can use the encryption key, then decrypt, you know, using the private key.
1611380	1617300	Or you can first use the private key, and then follow that by decryption, sort of decryption with a public key.
1618280	1622740	But then, when you use RSA for digital signatures, that's exactly what happens.
1622740	1628160	So, yes, I take a message, I apply the private key to the message.
1628900	1632000	I take that result, right?
1632640	1634980	This decryption of the message.
1635620	1639760	And I send it to you, together with the actual plain text of the message.
1640680	1646300	So, now you have a plain text of the message, and decryption of the message with my private key.
1647640	1647920	Yeah?
1648100	1648740	With me so far?
1648740	1652720	Now, then what you do is to verify that it really comes from me.
1654000	1660000	You take the decryption of the message, encrypt it using E.
1661240	1663700	Remember, E reverses D, D reverses E.
1664000	1665140	So, you should get back the message.
1665820	1667040	You compare it to the plain text.
1667160	1667800	Is it the same?
1668500	1670600	If it's the same, only I could have sent it.
1671240	1672800	And it has not been modified.
1673700	1673900	Okay?
1675020	1678040	So, that's the basics of digital signatures.
1678740	1682420	So, and data integrity.
1682700	1688660	So, typically, we need both data integrity and origin authentication.
1689300	1689440	Right?
1689820	1693420	These terms are trivial, right?
1693640	1696620	Integrity means something has not been modified.
1697440	1698740	It has integrity.
1698740	1703580	So, and origin authentication means it comes from a place I think it comes from.
1704780	1708340	Like, if GeneSutic sign it, well, then you know it comes from GeneSutic.
1708420	1708840	I can verify.
1708840	1709320	Okay?
1709320	1719000	So, but what we don't do is we don't use digital signatures on messages.
1719000	1724600	Because messages, files, can be very long.
1725880	1728720	And digital signatures are based on public key cryptography.
1728720	1734640	So, if we're going to exponentiate, and trust me, this is the problem with public key cryptography.
1734800	1740540	Not only, I mean, there are other problems, but one of them is the usage problem is that it's slow.
1740540	1751320	It does not use efficient primitives like XORs and SHIFTS and ORs and ANDs, like the symmetric cypress.
1751460	1753860	It uses large number arithmetic.
1754980	1760680	A large number arithmetic requires all kinds of tricks to be implemented efficiently in software.
1760680	1766860	And so, anything that is in public key world can never match the speed of symmetric cryptography.
1768340	1768740	No way.
1769000	1769440	No chance.
1770540	1772600	It's several orders of magnitude slow.
1773000	1779980	So, using public key cryptography on bulk data is wasteful and senseless.
1780840	1781720	So, we don't do that.
1783040	1789140	So, in particular, when it comes to signing a message, or signing a file, or signing a video, right?
1789140	1797400	Or signing a software distribution, which is, by the way, when you get, you know, your next software update for the operating system, it's signed.
1798480	1803980	And the delay you experience often in, like, a pre-installation is the verification of the signature.
1805420	1810520	So, we don't sign it directly with RSA or anything like that.
1811040	1814340	What we do is compute a hash function over the thing.
1814340	1818800	And a hash function is essentially like an integrity token.
1820100	1821940	And then we sign the hash function.
1823260	1823780	Make sense?
1826480	1827840	Can I ask one question?
1828100	1828280	Yeah.
1828420	1831180	What output should be a fixed length value HM?
1831200	1831540	The who?
1832020	1835780	What output should be a fixed length value HM rather than...
1835780	1837500	Ah, fixed length.
1837620	1844660	Well, because we want to make sure that what we compute is a canonical length, right?
1844740	1852700	If we vary the length, if, like, a very large input produces a larger output, you know, we cannot write standard code, right?
1852700	1853240	It's harder.
1853240	1861620	But it can also be, like, we hash a long value into a short value, like, if we have some...
1861620	1868060	Well, remember, all of this is done because it's not humans who operate on this, right?
1868100	1872220	It's software and no hardware that operates on these hash functions, computes them.
1872220	1881700	So, in the implementation, that would compute variable length output would be much strictly less efficient than that that computes a standard length output.
1882420	1887840	So, if we are not considering efficient, but purely security is a bad...
1887840	1891360	Eh, purely security.
1894860	1898400	Well, for pure security, you may not really need...
1898400	1900120	You can just sign every block.
1900120	1902120	Right?
1902120	1904800	You can just sign every block using publicly crypto.
1904800	1906000	You don't need a hash function.
1906000	1912260	See, the hash function, the beauty of having a hash function is the function acts as a checksum of sort, right?
1912260	1917220	As an integrity protector of the message.
1917220	1924360	It allows you to detect manipulations of the message without having to inspect every block.
1924360	1933920	Because what I think is that, for example, for some encrypto algorithm, for example, RSA, I think they encrypt information with different length, right?
1933920	1934920	Yes.
1934920	1935920	That's not a problem.
1935920	1936920	Yes.
1936920	1937920	That's not a problem.
1937920	1938920	Block site, whether it's a symmetric key, crypto, or public key.
1938920	1940920	But you never want to use public key more than absolutely necessary.
1940920	1941920	Yes.
1941920	1948920	Because it's several orders of magnitude slower.
1948920	1955920	So, when you want to protect integrity of a message or a file of data, and that data is more than one block long, which is whatever the block is in the same order, you want it's much cheaper to compute a hash function.
1955920	1984920	Standard length, standard length, standard size, where standard varies, right?
1984920	1985920	Depending on what's that.
1985920	1988920	20 years ago, 128 bits were okay.
1988920	1989920	Right.
1989920	1990920	Now, at least 256 bits.
1990920	1991920	Okay?
1991920	1993920	And that's a good reason for that.
1993920	2001920	So, you want to agree on the implementation of a hash function that produces a fixed length
2001920	2005920	output regardless of the length of the input, right?
2005920	2009920	Because that facilitates faster, more efficient implementation.
2009920	2013920	And also, the security level remains the same, right?
2013920	2020920	Because what we don't have time to cover is hash functions that are chosen for many reasons.
2020920	2023920	One of them is the length of the output.
2023920	2030920	If the length of the output is too short, then functions become susceptible to something called the birthday paradox.
2030920	2033920	Has anybody heard of the birthday paradox?
2033920	2034920	Some of them have.
2034920	2035920	Okay?
2035920	2047920	Anyway, the common wisdom is the hash function has to be roughly double what an encryption should
2047920	2048920	be for a block cipher.
2048920	2059920	So, for example, today, we're okay using a 128-bit encryption key for a block cipher.
2059920	2067920	But the minimum hash length we use today, I think, should be like 256 or so.
2067920	2068920	Right?
2068920	2071920	And that's one of the reasons is the birthday paradox.
2071920	2074920	Which, if you all like, I could cover.
2074920	2077920	Sounds like a lot of you don't know what it is.
2077920	2086920	But anyway, so it is important to compute the canonical fixed length output regardless of the input.
2086920	2089920	And these three properties are very important.
2089920	2091920	So, that is for convenience.
2091920	2092920	Right?
2092920	2095920	For convenience, it's nice to have a fixed length output.
2095920	2096920	Okay?
2096920	2101920	So, you could also say, well, why not compute a minimum 256 and go from there.
2101920	2103920	And then for a long way, you could.
2103920	2106920	But again, it will not be efficient.
2106920	2113920	But these three important properties must hold for a function to be a cryptographic hash function.
2113920	2118920	So, first of all, it must be one-way.
2118920	2123920	One-wayness means that if I give you an output of a hash function,
2123920	2128920	it must be computationally hard for you to come up with input.
2128920	2130920	Unless I give you the input.
2130920	2131920	Okay?
2131920	2132920	So again, right?
2132920	2140920	Given z, finding x such that h of x is z must be computationally different.
2140920	2141920	Okay?
2141920	2144920	This is also important.
2144920	2146920	They're all equally important.
2146920	2155920	Given x, finding another value, y is a different value, such that they have what's called a collision,
2155920	2157920	a hash function collision.
2157920	2162920	So, finding another value such that h of x equals h of y.
2162920	2167920	That process of finding another y must be computationally hard.
2167920	2168920	Okay?
2168920	2176920	Now, we know for a fact that collisions exist, right?
2176920	2185920	Because a hash function, as we just discussed, takes on arbitrary input and reduces it to a fixed length output.
2185920	2189920	It is impossible not to have collisions, right?
2189920	2191920	A block cipher will not have collisions, right?
2191920	2197920	Because it takes a plaintext and with a given key transforms into a ciphertext.
2197920	2199920	You cannot have collisions.
2199920	2204920	It's impossible for two plaintexts under the same key to produce the same ciphertext.
2204920	2207920	Do you see that?
2207920	2209920	But here, collisions are given.
2209920	2210920	They exist.
2210920	2213920	But finding them must be hard.
2215920	2216920	Okay?
2216920	2218920	And this last one is subtle.
2218920	2221920	And the subtle is different from this.
2221920	2227920	Here, this last third product, this third product, this is called strong collision resistance.
2227920	2229920	This is called weak collision resistance.
2229920	2231920	This is called strong collision resistance.
2231920	2234920	Here, you are not given x.
2234920	2241920	You are said, you are told, find me any two that collide.
2241920	2247920	Any two distinct values that produce the same hash output.
2247920	2250920	That's called strong collision resistance.
2250920	2256920	All today's hash functions that you will come across have all of these properties.
2256920	2259920	Now, are they proven?
2259920	2260920	Formally, mathematically?
2260920	2261920	No.
2261920	2266920	They are beaten to death with testing and evaluation and so on.
2266920	2269920	But they are not formally mathematically proven.
2269920	2271920	That's how the world is.
2271920	2281920	So if you look at something like IP, right, to the IPv4.
2281920	2284920	So IPv4 has what's called header checksum.
2284920	2288920	Have you ever seen it in network class maybe?
2288920	2290920	It's a very trivial checksum, right?
2290920	2296920	It's just like a once complement and once complement of summation of all the words in the header.
2296920	2299920	And so checksums are weak hash.
2299920	2303920	We don't, of course, use the prescriptor guide to cache because they have collisions.
2303920	2304920	Right?
2304920	2318920	And this is just an example of how if you use insufficiently long or trivial checksums in place of a real hash function, it's easy to find collisions.
2318920	2325920	Okay, so let's come back to another real word application, which is message authentication codes.
2325920	2328920	Now, this is not to be confused with digital signatures.
2328920	2329920	Right?
2329920	2330920	This is symmetric crypto.
2330920	2335920	And this is what happens when Alice and Bob share a secret.
2335920	2336920	Okay?
2336920	2343920	And this is, in fact, what happens in TLS, right, after the initial TLS entry or in IPsec after the keys down.
2343920	2358920	Alice has a secret, Bob has the same secret, and Alice wants to send a message to Bob.
2358920	2363920	Now, in this example, the message M in deep blue is not encrypted.
2363920	2366920	That's because encryption isn't always important, right?
2366920	2378920	In some cases, the message is not confidential, but Bob wants to make sure that the message hasn't been modified in transit and really comes from Alice.
2378920	2379920	So what happens here?
2379920	2385920	Well, Alice has a secret key K. Bob presumably has the same secret key K.
2385920	2397920	The message is hashed, okay, and the message and the hash of the message and the key is sent along.
2397920	2404920	So you see the blue part, the green part, that gets sent over the internet or whatever communication channel.
2404920	2410920	The Bob receives them and then recomputes the hash and compares to itself.
2410920	2413920	So now, again, keep in mind, this is not a digital signature.
2413920	2417920	This is message authentication code with symmetric character.
2417920	2418920	Okay?
2418920	2421920	Now, in the real world, this is what they use.
2421920	2429920	This is actually a standard canonical way of computing a key-based, symmetric key-based MAC.
2429920	2438920	It's used all over the place in many different purposes, HMAC, hashMAC, and it involves this, right?
2438920	2442920	You take a message, M, you see the message M over there on the red.
2442920	2447920	The very first thing you do is you take the secret key, XOR it with a constant.
2447920	2452920	iPad is a constant, not an Apple device.
2452920	2453920	You XOR it with a constant.
2453920	2455920	The constant is public.
2455920	2462920	And then you hash that the result of an XOR concatenated with a message.
2462920	2464920	Then you take the result of that.
2464920	2468920	That returns a fixed length result, right?
2468920	2469920	This H.
2469920	2478920	And then you take the same key, XOR it with an outer path, concatenated with that result,
2478920	2479920	and hash it again.
2479920	2481920	So there's an inner hash and an outer hash.
2481920	2487920	The inner hash is long, meaning it computes over the entire message M, and the outer hash
2487920	2489920	just computes over two values.
2489920	2495920	And that's supposed to resist a lot of attacks and so on.
2495920	2500920	So this is, you're going to implement a M, a scheme that needs a message authentication code.
2500920	2502920	This is what you should use.
2502920	2507920	On inventor-owned.
2507920	2515920	Alright, so for hash functions, historically, like when I was growing up, essentially we used MD5.
2515920	2521920	Now, if you see MD5 run away, because that's not secure for a number of years.
2521920	2524920	It was only 128 hits long.
2524920	2531920	Insecurity of it was, essentially, its resistance to the birth repair was about 2 to the 64,
2531920	2532920	which is considered insecure.
2532920	2540920	Which means it takes 2 to the 64 trials to find, on average, to find a collision in MD5.
2540920	2543920	Today, we use SHA-2 and SHA-3.
2543920	2550920	SHA-2 is about 20 years old, more than 20 years old, but it's a US standard.
2550920	2553920	You want to do business with the government, you must use it.
2553920	2557920	If you want to get a stamp of like, what is it, ISO certification,
2557920	2563920	and at any company you work for using secure hash functions, you must adhere to this standard.
2563920	2572920	So, SHA-2 is a very flexible hash function, so is SHA-3, which is completely better, but slower.
2572920	2582920	So, it works with, SHA-2 works with 160, 224, 256, 384, 512 outputs.
2582920	2590920	That means, coming back to your question, with this hash function, you can configure it to produce output that you want.
2590920	2597920	Now, you cannot pick 259 if you want more, but you can pick from those.
2597920	2604920	So, if you need something faster, with smaller hashes, right, because maybe bandwidth or storage is an issue, you would do this.
2604920	2612920	If you need something super secure, that will be secure for like, I don't know, 20 years, you'll probably want to pick 512.
2612920	2613920	Okay?
2613920	2617920	This is more for efficiency.
2617920	2618920	Right?
2618920	2623920	Here, that, varying the block size means how many, how many bits at a time does the function process?
2623920	2629920	Because the hash function does not swallow a message as a whole.
2629920	2635920	It, like, like, like ciphers, like block ciphers, it processes one block at a time.
2635920	2636920	Okay?
2636920	2639920	So, this is just a block size.
2639920	2641920	It's not so much security relevant.
2641920	2642920	Right?
2642920	2643920	It's more like how efficient it is.
2643920	2644920	Okay?
2644920	2645920	Go ahead, question.
2645920	2650920	What do you mean by SHA-3 strictly better?
2650920	2653920	Well, it's better because it's redesigned.
2653920	2654920	Right?
2654920	2658920	So, it's not like they were, as I said, there were no, like, specific weaknesses found in SHA-2.
2658920	2661920	But, these functions tend to age.
2661920	2666920	And to describe, if you ask me, like, why and how, I really don't know.
2666920	2672920	Because, because designing hash functions is like designing symmetric ciphers, they're very
2672920	2675920	similar principles using designing both.
2675920	2677920	That's like, not a science.
2677920	2679920	That's an art.
2679920	2685920	And, there's probably, like, a couple hundred people in the world who are good at it.
2685920	2690920	There are people who do it, but only about a couple hundred people who will do it well.
2690920	2694920	And so, they typically, these designs come from, like, well-known, and there's not, like,
2694920	2695920	one genius behind any of them.
2695920	2697920	There's usually a team of people.
2697920	2699920	And, they're, they're repeatedly good at it.
2699920	2700920	Right?
2700920	2701920	They've come up with, like, several designs.
2701920	2702920	I know some of them.
2702920	2704920	And, they're very specialized breed.
2704920	2708920	So, they have, you know, it's like artists.
2708920	2709920	Right?
2709920	2711920	You don't know how, how they come up with what stuff they do.
2711920	2714920	But, generally, they have, I mean, they have to demonstrate everything.
2714920	2717920	So, these designs are public.
2717920	2718920	Everything is specified.
2718920	2719920	There's nothing secret.
2719920	2723920	Some of the criteria, why they take this over that, they might only know.
2723920	2725920	But, the designs are fully open.
2725920	2728920	And so, whenever they are, before they are standardized, right?
2728920	2730920	Before, well before, there's a competition.
2730920	2735920	Typically, the U.S. government, when it wants to have a standard for either encryption,
2735920	2738920	or hashing, or signature, they open what's called a competition.
2738920	2739920	It's worldwide.
2739920	2745920	And, anybody in the world can enter and propose a candidate encryption function, or hash function.
2745920	2753920	And, in fact, this, I think both of these, are not from the U.S.
2753920	2754920	The U.S.
2754920	2759920	In fact, the AES, the advanced encryption stadium, we all used to be, also, is not from the U.S.
2759920	2760920	It originates from Belgium.
2760920	2763920	So, and then, anyways, it's like the American Idol.
2763920	2771920	I mean, it's a circuit competition with several rounds and eliminations.
2771920	2774920	And, in the end, only one wins.
2778920	2779920	Okay.
2779920	2785920	So, yeah, this one is, has more flexibility with block sizes, you see.
2785920	2788920	I don't know why it has these particular features, right?
2788920	2789920	Yeah.
2789920	2791920	From 576 to 152.
2791920	2795920	As far as output, you see, it does not go beyond, but it's supposed to be better.
2795920	2798920	It, it, it, it obviates a hundred, it does not do 160 anymore.
2798920	2807920	Output because, you can see this, because 160-bit output would be 2 to the 80 resistant.
2807920	2811920	First, the attacks, and 2 to the 80 is no longer considered secure, like, putting up five,
2811920	2812920	six years from now.
2812920	2827920	So, FYI, today, if you're going to use encryption, 80 bits of entropy, 80-bit key, assuming it's random,
2827920	2830920	is the absolute minimum you should use.
2830920	2831920	The absolute minimum.
2831920	2833920	And that's just for short term.
2833920	2836920	If you look for long term secrecy, you should not use 80 bits.
2836920	2837920	You should not use 80 bits.
2837920	2839920	You should use at least 128 bits.
2839920	2840920	Yeah.
2840920	2841920	Only.
2841920	2842920	All right.
2842920	2848920	So, the digital signatures, what I already mentioned before, basically, they are sort of
2848920	2853920	people say, people say, again, these are slides I, from, from the book, from the Crows and
2853920	2854920	Rose book.
2854920	2858920	They are, to a point, slightly analogous to handwritten signatures.
2858920	2859920	Right?
2859920	2861920	The way that we sign them.
2861920	2864920	But they're actually not really.
2864920	2869920	In a sense that, if our handwritten signatures, indeed, may be unique.
2869920	2870920	Right?
2870920	2873920	Especially if you record the patterns of movement and pressure.
2873920	2874920	You know, that's true.
2874920	2879920	But when we do sign a document, and remember signing a document in real life, like, actual
2879920	2883920	physical document, what is it actually you sign?
2883920	2888920	Like, I don't know, you sign some official legal document.
2888920	2889920	What is it you sign?
2889920	2892920	Well, generally, you sign a corner of it.
2892920	2893920	Right?
2893920	2894920	Some place on a page.
2894920	2897920	And maybe there is a document that has 20 pages, but you don't sign for every page.
2897920	2898920	Right?
2898920	2902920	And even if you do sign every page, you don't sign the page.
2902920	2904920	You sign a part of the page.
2904920	2905920	Somewhere.
2905920	2910920	Well, how difficult is it to, I don't know, get rid of your signature?
2910920	2915920	Or cut out your signature and replace it with another piece of paper.
2915920	2920920	Or take the pages of the document that you did not sign and replace them with some other
2920920	2921920	pages.
2921920	2922920	Or delete pages.
2922920	2923920	Or insert pages.
2923920	2924920	Right?
2924920	2929920	So in a physical world, we kind of like, don't think about those things.
2929920	2930920	But they're totally possible.
2930920	2931920	Right?
2931920	2934920	Now you think about recent real estate contracts, or God knows why.
2934920	2937920	I mean, you sign one page and the rest may be your initial or something.
2937920	2939920	Like, how does initial mean?
2939920	2942920	Initial, there's no wait anywhere.
2942920	2943920	Right?
2943920	2949920	So, but in the digital world, digital signatures actually mean, it's like, when you sign something,
2949920	2952920	you sign every bit of that.
2952920	2953920	Okay?
2953920	2956920	Every single bit of the message is signed.
2956920	2959920	So it's strictly stronger.
2959920	2960920	Right?
2960920	2966920	So if Bob signs a document, he establishes that he creates the entire document and he is
2966920	2967920	the one who creates it.
2967920	2968920	Right?
2968920	2969920	Yeah.
2969920	2979920	So, with all that, and we already talked about it, right?
2979920	2981920	So Bob basically uses this private key.
2981920	2983920	I mean, I kind of jokingly say decrypt.
2983920	2984920	We don't say decrypt.
2984920	2985920	He signs.
2985920	2988920	But Bob signs with the private key.
2988920	2991920	And Alice verifies with the private key.
2991920	2995920	But, of course, as I said before, we don't actually sign the message.
2995920	2999920	We first hash the message and we sign the hash.
2999920	3006920	And the idea is that the message and the hash are like, there's like an umbilical cord between
3006920	3007920	the two.
3007920	3008920	They're tied together.
3008920	3012920	Because if you can replace the message with another message that has the same hash, you
3012920	3014920	won the game.
3014920	3015920	Right?
3015920	3016920	Okay.
3016920	3018920	So, this is all the same.
3018920	3019920	Uh, no, no, no.
3019920	3020920	Sign hash.
3020920	3021920	I said all that.
3021920	3022920	Boring.
3022920	3023920	Boring.
3023920	3024920	Okay.
3024920	3037920	Now, we come back to what you raised, which is, okay, so what about this subtle headache?
3037920	3041920	Not the big headache, but the subtle headache of how do we know, well, first of, where do
3041920	3042920	we get the public key?
3042920	3044920	How do we know they have the right public key?
3044920	3047920	Well, that's called public key certification.
3047920	3048920	Welcome to hell.
3048920	3049920	Public key certification.
3049920	3054920	This is something that we deal with every day today, even without knowing it.
3054920	3055920	Right?
3055920	3060920	So, what Alice obtains while it's public key, how does she know it's public key apart?
3060920	3061920	Right?
3061920	3065920	And the solution is called CA's, or Certification Authority.
3065920	3068920	Maybe you've heard the term PKI.
3068920	3069920	Right?
3069920	3071920	Public key infrastructure.
3071920	3072920	Right?
3072920	3075920	That's what's required to solve this headache.
3075920	3077920	Public key infrastructure.
3077920	3083920	That is usually hierarchical structure of certification authorities.
3083920	3085920	With some God on top.
3085920	3086920	Right?
3086920	3087920	The root of trust.
3087920	3088920	Okay?
3088920	3089920	Okay?
3089920	3091920	Don't say to anybody I'm made by the religion.
3091920	3093920	It's just a God in terms of public keys.
3093920	3094920	Okay?
3094920	3099920	So, public key God on top, and then branches, like in a tree, right?
3099920	3102920	Going up to lower level certification authority.
3102920	3103920	Okay?
3103920	3104920	Okay?
3104920	3109920	So, and then at some point, you know, at the bottom of the tree, the leaves are users.
3109920	3112920	Or entities that are, that have public keys.
3112920	3114920	And Alice's and Bob's.
3114920	3117920	Or a web service.
3117920	3118920	Right?
3118920	3120920	In TLS there would be web service.
3120920	3123920	Because what happens underneath when you go to a website.
3123920	3124920	Right?
3124920	3125920	You do.
3125920	3126920	You type in a URL.
3126920	3127920	Or you click on a URL.
3127920	3130920	Your browser says, oh, cool.
3130920	3131920	New things.
3131920	3134920	Extracts the domain name part of the URL.
3134920	3135920	Okay?
3135920	3138920	Looks up using DNS.
3138920	3139920	Right?
3139920	3142920	And then collect.
3142920	3147920	And then TLS, what it tries to do, it sees first checks in the local caches.
3147920	3149920	Do I have already talked to this website?
3149920	3152920	If I talk to this website, do I have a public key certificate for that?
3152920	3153920	And the key is up.
3153920	3154920	If yes, good.
3154920	3157920	If not, then he needs to go and get it.
3157920	3159920	And what is he going to get it?
3159920	3161920	He's going to get it from the server.
3161920	3165920	And the server's going to reply with his public key, but it better be a public key certificate
3165920	3168920	because just saying a public key isn't enough.
3168920	3175920	So actually, what your browser is going to do is make sure that the public key certificate
3175920	3182920	that that server sends you is traceable to the root of some public key infrastructure
3182920	3185920	that your browser trusts.
3185920	3188920	And that comes back to that browser installation problem.
3188920	3193920	The browser, when you installed it, pray to God, securely, blah, blah, blah.
3193920	3199920	And it has some root of trust that says, I don't know, Panamanian Certification Authority.
3199920	3200920	All right?
3200920	3202920	Federal certification of Panamanian.
3202920	3203920	Panamanian.
3203920	3204920	Panamanian.
3204920	3206920	And you are going to a bank in Panama somewhere, right?
3206920	3207920	Your web browser.
3207920	3209920	You're actually trying to connect to that.
3209920	3210920	I don't know.
3210920	3212920	Banco Central de Panama.
3212920	3215920	And it gives you a public key certificate.
3215920	3221920	And the public key certificate is signed by the Central Certification Authority of Panama.
3221920	3224920	Okay, so what does your browser do?
3224920	3229920	Your browser says, oh, I trust the Central Authority of Panama and its public key.
3229920	3234920	I use its public key to verify the certificate of the central bank I'm going to.
3234920	3235920	Is it verified?
3235920	3236920	Yes.
3236920	3237920	Is it expired?
3237920	3238920	No.
3238920	3239920	Good.
3239920	3240920	This is a simple example.
3240920	3241920	It could go deeper.
3241920	3246920	Because the public key infrastructure could be deeper.
3246920	3247920	Okay.
3247920	3256920	So, in other words, we need these certification authorities as points of, like, trust.
3256920	3261920	And what they do, really, what they do is bind public keys to entities.
3261920	3268920	That's really the main function of the Certification Authority is to say, this guy has this public key.
3268920	3270920	This guy has that public key.
3270920	3271920	Okay?
3271920	3277920	Now, before it all begins, somebody has to ask for a public key certificate.
3277920	3285920	Meaning, if the bank in Panama wants to have a server and he wants that server to be securely connected to,
3285920	3291920	he needs to obtain a public key certificate, which means it needs to generate a public key and a private key,
3291920	3296920	go to the CA, and obtain a certificate.
3296920	3298920	Pay money.
3298920	3302920	Usually in the commercial world, you pay money to get a certificate.
3302920	3307920	And you need to verify your identity, meaning you need to bring credentials.
3307920	3308920	Right?
3308920	3313920	So, a lot of this process is actually administrative and it takes place offline.
3313920	3317920	Especially for, like, web servers, commercial entities.
3317920	3323920	For people like us, no, we can get a certificate, a low-grade certificate, often for free.
3323920	3324920	Okay?
3324920	3329920	But the certificate will contain a group, essentially, some kind of a binding.
3329920	3330920	Right?
3330920	3346920	Essentially, it says, oh, this is Alice Smith, and this certificate is to be used for email only, and it's valid from this date until this date.
3346920	3350920	And, um, I don't know, Alice lives in California.
3350920	3352920	And here's the public key.
3352920	3353920	I know it's called the public key.
3353920	3356920	And also attached to the certificate is the signature.
3356920	3361920	And, well, and the name of the CA, of the CA that issues the certificate and the signature.
3361920	3367920	So it's not unlike a driver's license or a passport, in a way, if you think about it.
3367920	3373920	Except your driver's license is a passport, well, actually, they do contain a key, but never mind you.
3373920	3376920	Well, the way you look at them today, right, the driver's license is a passport.
3376920	3379920	There are no cryptographic things in there.
3379920	3381920	At least you don't see them.
3381920	3388920	Now, if you have a recent driver's license or a fairly recent passport, chances are there are cryptographic keys inside them.
3388920	3393920	Because there's, like, RFID, data, all sorts of biometric information inside them.
3393920	3396920	That's not quite an analogy here.
3396920	3397920	Right?
3397920	3398920	So everybody understands?
3398920	3402920	So, certificates are absolutely necessary.
3402920	3405920	You cannot live without them today.
3405920	3412920	So, when Alice wants to get Bob's public key, she needs to get it from somewhere.
3412920	3414920	It doesn't matter, actually, where she finds it.
3414920	3418920	So, for example, my public key, you could have found it on the floor somewhere.
3418920	3421920	You could have picked it out from a garbage can.
3421920	3423920	It's not important how you got it.
3423920	3426920	And what's important is how you verify it.
3426920	3427920	Okay?
3427920	3429920	So, you get the certificate.
3429920	3432920	The first thing you do is you check for expiration.
3432920	3434920	Because it's cheap or something.
3434920	3435920	You look at it.
3435920	3436920	Is the certificate expired?
3436920	3438920	No, it's expired.
3438920	3440920	Why bother checking anything else?
3440920	3441920	Is it valid yet?
3441920	3445920	Meaning, is it a certificate that is not valid yet, but will be valid in the future?
3445920	3446920	It's not valid yet.
3446920	3449920	No point in checking anything.
3449920	3450920	Okay.
3450920	3453920	Now, you check for validity.
3453920	3455920	Meaning, you check the CA's public key.
3455920	3459920	Assuming you trust the CA's public key, very widely, the signatures.
3459920	3460920	Right?
3460920	3462920	Ah, but you're not done yet.
3462920	3463920	Not done.
3463920	3468920	Because a certificate is what's called in operating systems, or in general, a capability.
3468920	3471920	Maybe you've heard before in other classes.
3471920	3474920	A capability is like a bearer document.
3474920	3476920	Like a driver's license is a capability.
3476920	3477920	A passport is a capability.
3477920	3479920	It's given to you.
3479920	3480920	You have it.
3480920	3483920	But if you behave badly, it could be reformed.
3483920	3485920	A visa is another capability.
3485920	3486920	It could be reformed.
3486920	3487920	A driver's license could be reformed.
3487920	3488920	A passport could be reformed.
3488920	3491920	Well, same thing with public key certificates.
3491920	3498920	And because you could have found my public key certificate anywhere, you have no idea if it's been reformed.
3498920	3499920	Right?
3499920	3500920	Because it's still valid.
3500920	3501920	It says valid.
3501920	3503920	It expires in 2029.
3503920	3505920	And valid from 2021.
3505920	3506920	Great.
3506920	3512920	But how do you know I haven't behaved badly and it's been reformed since?
3512920	3514920	Or maybe I've lost my credibility.
3514920	3516920	There are many reasons it's been reformed.
3516920	3519920	Some of them have nothing to do with my bad behavior.
3519920	3520920	Maybe I've been robbed.
3520920	3524920	Maybe a gun was put to my head and I was forced to devolve my privacy.
3524920	3525920	Certificate is gone.
3525920	3526920	Right?
3526920	3527920	It should be revoked.
3527920	3533920	And the only person or the only entity in the world that knows that it's revoked is the issuing CA.
3533920	3534920	Right?
3534920	3536920	Don't ask me.
3536920	3538920	I might not want to tell you.
3538920	3541920	Or I'll tell you now why.
3541920	3549920	The only authoritative entity in the world that knows whether my certificate is revoked or not is the issuing CA.
3549920	3555920	Just like the only entity in the world that can tell you whether your U.S. passport is revoked is the U.S. State Department.
3555920	3556920	Okay?
3556920	3562920	Or the only entity that can tell you if your California license is valid is DMV in California.
3562920	3566920	So don't ask DMV in Illinois or federal government.
3566920	3567920	Ask DMV in California.
3567920	3568920	That's the CA.
3568920	3569920	Say again.
3569920	3572920	So that means somehow you need to check for revocation.
3572920	3575920	That's another headache.
3575920	3577920	Another big headache.
3577920	3578920	Revocation.
3578920	3585920	And once you've solved all those problems and passed all those tests, then you extract the public key and then you can verify the signature.
3585920	3586920	Amazing.
3586920	3587920	Right.
3587920	3593920	And, okay, this is a very old fashioned format.
3593920	3596920	Public key certificates don't look like that anymore because this is old.
3596920	3598920	But essentially it could look like that.
3598920	3611920	And if you go into your browser or if you use like a mail client like I do, like Thunderbird, you can go into it and the cuts of it will see what a public key, or should display what public key certificates look like.
3611920	3614920	And they look a bit more complex than what you see here.
3614920	3619920	But basically the idea is to show you, okay, it says this certificate belongs to, to whom it was issued.
3619920	3620920	Right?
3620920	3624920	This, in this case, the certificate belongs to another CA.
3624920	3625920	Right?
3625920	3627920	Because CA themselves have certificates.
3627920	3628920	Who was it issued to?
3628920	3634920	Oh, in this case, it was issued by itself.
3634920	3636920	Weird, right?
3636920	3640920	Certificate issued to an entity by the same entity.
3640920	3643920	Does that make any sense?
3643920	3647920	Not, not, not, not like immediately, but you think about it.
3647920	3649920	Who certifies God?
3649920	3653920	I mean, really, right?
3653920	3655920	If you're a God of your own public key infrastructure, right?
3655920	3657920	You're like a root of the tree.
3657920	3658920	Who's going to certify you?
3658920	3660920	The only choice you have is to certify yourself.
3660920	3662920	That's called a self-signed certificate.
3662920	3663920	Right?
3663920	3670920	So when you get your browser installation, for example, like a new browser installation, it comes with all these roots of trust.
3670920	3672920	They're usually self-signed.
3672920	3673920	Okay?
3673920	3674920	For that reason.
3674920	3676920	Because there's no global world authority.
3676920	3678920	You know what I mean?
3678920	3681920	Couldn't it be like a cycle or something?
3681920	3684920	Because there are multiple CA's, right?
3684920	3686920	Sometimes they sign each other.
3686920	3687920	Right.
3687920	3688920	Like I vouch for that guy.
3688920	3691920	And so that's called a peer sign.
3691920	3692920	Right.
3692920	3693920	They will do it.
3693920	3694920	And that's, that's, that happens.
3694920	3695920	That happens.
3695920	3699920	I don't think it happens in browsers, but it happens in other, in other applications.
3699920	3702920	Why would they allow self-signing if that is an option?
3702920	3704920	Ah, because at least it preserves the tech.
3704920	3707920	So, ah, good point, good point.
3707920	3709920	Um, self-signing in general is useful.
3709920	3714920	It's better than nothing because it tells you that whoever signed it knows the private key.
3714920	3718920	Otherwise they just say, here's my private public key and it's complete nonsense.
3718920	3722920	At least I know whoever, whoever self-signed knows the private key.
3722920	3723920	All right.
3723920	3728920	So it says who, to whom it belongs, by whom it was issued, always a serial number.
3728920	3729920	There is always a serial number.
3729920	3732920	It must be unique per seat, per issuer.
3732920	3739920	So you can definitely see two certificates with exactly the same serial number, but they
3739920	3740920	apply different issues.
3740920	3744920	So the combination of issuer serial number must be unique.
3744920	3747920	Uh, that is valid from.
3747920	3748920	Okay.
3748920	3751920	So this is super old, 1996 to 2028.
3751920	3752920	Pretty generous, right?
3752920	3753920	32 year validity.
3753920	3755920	Nobody issued certificates this long.
3755920	3756920	This used to be the case.
3756920	3760920	People were much more optimistic in the beginning of the internet.
3760920	3765920	Uh, but yeah, it says, you must say from to.
3765920	3766920	Always.
3766920	3769920	Fingerprint is a hash of a certificate.
3769920	3770920	Right?
3770920	3772920	That's just for integrity and checking.
3772920	3774920	And then you see there's like other stuff there.
3774920	3776920	It's like, this certificate belongs to the certifying authority.
3776920	3779920	Accept the certificate for certifying human subject.
3779920	3783920	Like for example, this certificate should never be used for web authentication.
3783920	3784920	Right?
3784920	3789920	It will not work with TLS because, you see, this says only email.
3789920	3791920	So this is for sending email.
3791920	3792920	Only.
3792920	3793920	Now in reality, one second.
3793920	3798920	In reality, the formula certificate is pretty abstruse.
3798920	3803920	There's a standard called X509.
3803920	3806920	To be precise, X509 version 3.
3806920	3808920	That's an international standard.
3808920	3815920	And if you do a quick web search on X509v3, you'll see a ASN1 notation.
3815920	3817920	If you know what that means.
3817920	3822920	Specification, again, not for the faint of heart.
3822920	3824920	It's very sleep inducing.
3824920	3828920	It tells you all these fields that must be found in a certificate.
3828920	3830920	Some are mandatory.
3830920	3833920	Like most of the fields we've covered here are mandatory.
3833920	3835920	And then there are lots of options.
3835920	3836920	Okay?
3836920	3838920	Like some certificates don't even have a key.
3838920	3840920	There are like authorization certificates.
3840920	3843920	You know, some are like assigned to a goal or something like that.
3843920	3844920	Question?
3844920	3845920	Yes.
3845920	3848920	I'm just wondering why we need to pay for the certificate.
3848920	3849920	And the, yeah.
3849920	3852920	Well, you, you, so, so, you is a individual, right?
3852920	3853920	A student.
3853920	3854920	Yeah, yeah.
3854920	3855920	You can get a free certificate.
3855920	3860920	Like there are, there are, if you want, I can, I can tell you the next time.
3860920	3866920	There are services that will give you a low grade, low grade certificate, but just saying,
3866920	3869920	oh, you know, here's an email address.
3869920	3870920	Give us your email address.
3870920	3871920	You enter your email address.
3871920	3877920	As long as you're a student at UCIEDU, they'll do a verification, like one of those, you
3877920	3878920	know, send your code, right?
3878920	3881920	Verify that you own this email address or access it.
3881920	3883920	And they'll issue you a certificate.
3883920	3887920	Commercial entities or high grades.
3887920	3890920	Well, because the certification authorities are businesses.
3890920	3892920	What do they do?
3892920	3895920	Oh, they make money on this.
3895920	3896920	Yeah, yeah, yeah.
3896920	3897920	Oh, but okay.
3897920	3898920	Okay.
3898920	3901920	Not that I love them or have any connection to any situation.
3901920	3902920	But consider this.
3902920	3904920	If you are a CEA, right?
3904920	3911920	And you do have a for profit business, you need to be amazingly secure.
3911920	3918920	Because the key that you sign, certificates, is like the family jewels.
3918920	3924920	If somebody gets that key, they can now impersonate you and issue certificates.
3924920	3925920	This is super dangerous.
3925920	3926920	Your whole reputation is gone.
3926920	3928920	You lose all your customers overnight.
3928920	3929920	Right?
3929920	3933920	Your key leaks and your business is dead.
3933920	3934920	Like suicide immediately.
3934920	3937920	Now, does anybody know the word Stuxnet?
3937920	3941920	How many people heard of the word Stuxnet?
3941920	3942920	Not many.
3942920	3944920	God, guys, here we go.
3944920	3961920	Stuxnet, 2014 timeframe, was an incident when a malware made its way into Natanz nuclear reactor
3961920	3974920	in Iran and severely and irreplaceably damaged centrifuges, or uranium centrifuges, producing centrifuges in that facility.
3974920	3975920	Okay.
3975920	3979920	Now, that malware jumped what's called air gaps.
3979920	3982920	Meaning that Iranian nuclear facility, Iranian is not stupid.
3982920	3984920	It is not connected to the internet.
3984920	3985920	Okay?
3985920	3990920	But it means there's an air gap between the internet and that facility.
3990920	3994920	Like it is in the United States and many places.
3994920	4007920	So that malware came in the form of a software update for a PLC, Programming Logic Controller,
4007920	4012920	that was operating these turbines, the centrifuge turbines in the nuclear plant.
4012920	4014920	Why am I telling you this story?
4014920	4029920	Because the software update was signed, digitally signed, by a CA in Taiwan that was compromised.
4029920	4031920	Okay?
4031920	4036920	So, nobody knows for a fact who did it.
4036920	4049920	But everybody kind of knows that it's very likely Mossad and the NSA together mounted this joint operation to retard the Iranian nuclear weapons program.
4049920	4050920	Okay?
4050920	4053920	To do so, it was a massive logistic operation.
4053920	4055920	They had to patiently wait.
4055920	4058920	This malware did not infect computers outside Iran.
4058920	4061920	It actually was very like, am I in Iran?
4061920	4062920	No.
4062920	4064920	Sometimes it would delete itself.
4064920	4070920	And then it would like, look, am I running on a particular Windows industrial system, Windows control?
4070920	4071920	Oh, okay.
4071920	4072920	Then is it made by Siemens?
4072920	4078920	Because it particularly targeted specific turbines made by Siemens, which is a German company, right?
4078920	4085920	And they knew that whoever did this knew that the Siemens PLC turbines were running inside this nuclear reactor.
4085920	4090920	In Iran, it would make them essentially spin at such speed that they burned out or something like that.
4090920	4092920	I don't know the exact details.
4092920	4099920	What we do know is that they were damaged beyond repair and severely retarded the Iranian nuclear program.
4099920	4101920	Now, does that answer your question?
4101920	4102920	Or not yet?
4102920	4113920	The moral of the story is somebody got into the supply chain there and stole the private key of that CA in Taiwan.
4113920	4127920	Without that, this whole incident would have not happened because they started signing certificates for code distribution and then allowed whoever mounted the attack to sign fake code distribution.
4127920	4128920	Right?
4128920	4129920	The code updates.
4129920	4130920	Right?
4130920	4131920	You get the idea?
4131920	4132920	Yeah.
4132920	4136920	So one thing leads to another, to another, to another.
4136920	4143920	So that's why if you are a CA, if you're running a CA as a business, you need to have amazing, not just electronic, but physical security.
4143920	4155920	Because chances are all these, these kinds of attacks start with some amount of social engineering that involve humans and bribery, et cetera, et cetera.
4155920	4160920	So physical security for a CA business is extremely important.
4160920	4164920	So, and of course, disconnection from the internet.
4164920	4167920	Typically CA will not run accessible from the internet.
4167920	4168920	At least not high grade CA.
4168920	4169920	They will be disconnected.
4169920	4175920	They will actually be a human interface between, let's say requests will come in to issue certificates.
4175920	4182920	And then at the end of the day, somebody will like bunch up those requests and physically like carry them over to the actual CA.
4182920	4193920	So I'm in a bunker, you know, in a Faraday cage room and feed them to the CA and then get certificates and come out and turn off the CA.
4193920	4197920	So basically the idea is this has to be a very secure operation.
4197920	4202920	And so it's not, it's not, it's not like so easy to run a CA.
4202920	4205920	So today's, today, I mean, you have all kinds of CAs.
4205920	4211920	Of course, if you go to some third world place, like, I don't know, middle of nowhere, you know, Marshall Islands, you know,
4211920	4218920	their CA is not going to be as secure as a CA in France, you know, but the prices will also be different, right?
4218920	4224920	And the trust people will have in the certificate issued by a CA in like Solomon Islands in Vanuatu
4224920	4232920	would be different from a, from a certificate issued, let's say by some reputable California authority.
4232920	4233920	Yeah.
4233920	4236920	So this is all, it's not super technical, right?
4236920	4239920	This is all very reputation.
4239920	4240920	Yeah.
4240920	4241920	All right.
4241920	4243920	So that's done to be done.
4243920	4244920	Yes.
4244920	4245920	See you on Thursday.
4245920	4250920	So if you haven't yet again, start thinking about who you're going to work with, what you're
4250920	4253920	going to work on in the project.
4253920	4259920	If you have questions, by the way, was somebody there yesterday because I had some music playing
4259920	4264920	in my office and not yesterday, Monday, yeah, Monday yesterday.
4264920	4268920	And I may have missed somebody not yesterday in the office hours.
4268920	4269920	No?
4269920	4270920	Okay.
4270920	4271920	Good.
4271920	4272920	Good.
4272920	4273920	Good.

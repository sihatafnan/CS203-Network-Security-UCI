WEBVTT

00:00.000 --> 00:07.560
system, whereby you log in once per work session, a day, for example, at work, as in a typical

00:07.560 --> 00:16.420
office, and you don't have to supply your password again. Okay, everything else happens

00:16.420 --> 00:25.880
under the covers. Okay, transparent to the human user. All right, so Kerberos does this

00:25.880 --> 00:32.240
by introducing a trusted third party, TDB, which we call Kerberos, collectively a

00:32.240 --> 00:36.080
kid distribution center. Trusted third party is a generic name, but in Kerberos, the

00:36.080 --> 00:40.280
terminology is KDC, and inside KDC, there are two components. There is a

00:40.280 --> 00:47.900
authentication server and a ticket-granting service. Now, what I did not mention last

00:47.900 --> 00:53.660
time, and maybe I did, but I don't recall, is that the authentication service knows

00:53.660 --> 00:59.540
all users. Users clients all the humans, right, all the accounts, essentially, right,

00:59.540 --> 01:05.000
but it does not need to know, it does, but it does not need to know all the servers.

01:05.000 --> 01:11.000
The Ticket-granting service needs to know all the servers, and is less concerned

01:11.000 --> 01:16.420
about users, although it has access to the same user digits.

01:16.420 --> 01:23.260
All right, so this was the overview. User approves identity, requests a ticket, receives

01:23.260 --> 01:29.440
ticket, goes to access service. But that's a problem, right, because what we know is

01:29.440 --> 01:34.600
that it's not enough to just get a ticket for a service, right. You may not need the

01:34.600 --> 01:38.320
service right away. You may have to go to the particular service, like printing

01:38.320 --> 01:43.240
service, file service, many times a day. So that's why Kerberos separates these two

01:43.240 --> 01:48.120
tasks of, like, initial authentication that deals only with signal sign-on of the

01:48.120 --> 01:54.080
user when the user provides a password, etc., etc., and what follows later, which is

01:54.080 --> 01:59.520
user tries to access various services. Okay, let's go for that. We already did.

01:59.520 --> 02:09.360
Blah, blah, blah. Okay, I think, do we stop here? No? Roughly? Right, so you see here in

02:09.360 --> 02:15.240
the cloud. That key distribution center houses both functions. You can think of them in two

02:15.240 --> 02:22.540
processes running on the same highly secure computer. Okay? User logs in first, gets an

02:22.540 --> 02:29.240
encrypted TGS ticket. The TGS ticket actually is for the TGS server that it will use later.

02:29.240 --> 02:34.360
By the time it decrypts it, it has to decrypt it using knowledge of its password or password-derived

02:34.360 --> 02:40.740
key. You will go to the TGS and ask, I want to access a particular service. If the TGS

02:40.740 --> 02:45.440
decides to grant it, you will reply to the encrypted service ticket. The service ticket

02:45.440 --> 02:51.240
will then be decrypted, partially decrypted by the client, the encrypted portion that I'll

02:51.240 --> 02:57.640
explain later will be sent to the server, and then there's a brief authentication exchange

02:57.640 --> 03:06.020
between the client and the server. So there's really three phases in the Kerber's sort of

03:06.020 --> 03:09.020
protocol hierarchy.

03:13.020 --> 03:19.020
Okay, okay. So here, here I think actually what we almost got to get about that. I want you

03:19.020 --> 03:26.640
to understand this terminology. The client and the user are almost the same thing but not quite.

03:26.640 --> 03:36.020
The user is the human. The user knows the password. Okay? The user uses their laptop, smartphone,

03:36.020 --> 03:44.520
workstation, desktop, whatever, their device, where they log in and supply the password. That

03:44.520 --> 03:54.760
device, okay, let's call it device, user device, has Kerber's client-side software. Once the user

03:54.760 --> 04:00.900
provides the password, that client-side software is client from here on. User does not perform

04:00.900 --> 04:06.140
decryption, encryption in their head, right? Software does it for them. So that's why I use

04:06.140 --> 04:16.280
the word client to denote that user-side software, which is part of the purpose. Okay, so KC is

04:16.280 --> 04:23.720
the client's key, right? Client's key, but it's not the same thing as the user password. It's a key

04:23.720 --> 04:26.660
derived from a password. Okay?

04:26.660 --> 04:38.040
Known only to the client, to that client, and the key distribution center. Okay? Now, KTGS is a key of the TGS

04:38.040 --> 04:43.920
for the ticket-granting service. It is known only to the TGS, so you can think of it, it shares it with nobody

04:43.920 --> 05:09.300
but itself. And if you think, well, why are we using it like that? Because the reason is very simple. The TGS does not need to maintain or does not want to maintain a giant database of all outstanding tickets. Okay? That's a headache. The same way, the same way that on the web today, you have cookies.

05:09.300 --> 05:38.620
Why do you have cookies? Because the web server does not want to have the headache of maintaining state information about everybody who accesses that web server. So we have cookies. So when you come back to the web server, it can recognize you, spying you, etc. But also it has beneficial side effects. Okay? So it's for the same reason that the TGS is used. Alternative would have been for the

05:38.620 --> 05:48.620
the TGS for the TGS, sorry, the DGS ticket, the DGS is used. The alternative would be for the KDC to store all tickets locally. But then we have the headache of managing it.

05:50.940 --> 06:04.460
Okay, so, so therefore, it uses a key that it only shares with itself to essentially encrypt for itself the fact that you have a ticket as a user. And when you come back, you better bring that ticket.

06:04.460 --> 06:11.460
You don't have a ticket. You don't have a ticket. You don't have a ticket? Your problem. Not server setting. Or not, sorry, not TGS setting.

06:11.460 --> 06:31.460
KV, the one I think, is a long-term strong key of each server. Printer server, file server, mail server, etc. Okay? Every server has a name V, has a KV, long-term, not converted to anything. It is a key. A real key. Okay?

06:31.460 --> 06:52.460
Okay? Down to the server and the TGS. Okay. Next, KC TGS. That is a short-term session key that a client, C, okay, will share with the TGS when the ticket is issued.

06:52.460 --> 07:01.880
When the client first logs in, provides the password, does the authentication exchange. At the end of that exchange, the client will learn this key.

07:04.460 --> 07:14.300
Okay? It's issued by the AS, but it is for the client to share with the TGS because the client does not talk to the AS anymore after logging.

07:14.300 --> 07:26.300
Okay? Puzzled? Horrified? Excited? What? Okay? Everything understood.

07:26.300 --> 07:45.300
All right. Well, there is a shorter-term key. Okay? This is specific to a server. When a client already logged in and has this, wants to access a particular server, it goes to the TGS with its ticket-granting ticket and says,

07:45.300 --> 07:59.300
I am so-and-so, I want to access that server, please facilitate this. The TGS will reply with a service ticket, and that service ticket will have two parts, but in those two parts, there are some redundancies,

07:59.300 --> 08:13.300
redundancies, and this KCV is the key that is conveyed directly or indirectly to both the client and the server. So when a client is talking to the printer, or the printer driver,

08:13.300 --> 08:25.300
the rubberized printer driver on the printer, it will use this key. Okay? That's the hierarchy of key. Almost. There's a little more at the end.

08:25.300 --> 08:41.300
So, this KNIT program, client, that's the client-side software. It's not the only piece of software in the client, but KNIT is the one that handles this exchange. So there is a user entering a password.

08:41.300 --> 08:53.300
The password by the client-side software. The password by the client-side software is converted into the KC. But the message, when the user types in, in fact, username,

08:53.300 --> 09:05.300
Alice. The KNIT does not even have to wait for her to type in the password in order to already send to the key distribution center a message that says,

09:05.300 --> 09:18.300
hey, I'm Alice, I want to log in. And the reason is because that initial message is not authenticated. Right? It has the idea of the client,

09:18.300 --> 09:34.300
idea of the DGS, and it seems redundant, but you'll see what it's for, and the time. The current time on the client-side. The time has to be reasonably well synchronized.

09:34.300 --> 09:49.300
Kerberos, by default, I think, allows five-minute clocks, too. But it can be modified for installation. So the time tells this KDC, right?

09:49.300 --> 10:00.300
Well, the AS inside the KDC, that this is recent, right? And not a replay, not stale. Okay, so then it issues, then it says, okay, do I,

10:00.300 --> 10:09.300
the first thing it does, do I know this client? Is this client in my database? If not, no reply or error message. Okay?

10:09.300 --> 10:17.300
If the client is in a database, the client may be not allowed to log in. In fact, Kerberos has a policy database that I will not show you,

10:17.300 --> 10:26.300
because it's super boring, but it's necessary. It has a policy database that says, for each existing client, what is the policy for that client to log in?

10:26.300 --> 10:36.300
A night watchman does not log in in the middle of the day. Okay? A cashier does not log in at 2 AM. These kinds of requirements, policies.

10:36.300 --> 10:48.300
Who can log in when? A remote employee who works from home Thursday and Friday should not be logging in on Thursday and Friday. For example. Okay?

10:48.300 --> 10:59.300
Don't quote them, just randomly generated policies. So, then, when it finds the employer, or defines the user, the client, and it finds that the user is allowed to log in,

10:59.300 --> 11:11.300
it will issue this TGS ticket, or TGT, Ticket Granting Ticket. It's called Ticket Granting Ticket because it's not really a ticket in and of itself, it's a ticket to other tickets.

11:11.300 --> 11:31.300
All right. So, client obviously cannot forge that ticket. You'll see why. Client can, of course, if the client is a real user and knows the passwords and can compute KC,

11:31.300 --> 11:46.300
he can forge part of that ticket. But what he cannot do is forge something for the TGT. Sorry, for the TGS. Because he doesn't know the key of the TGS.

11:46.300 --> 11:59.300
What you see here in green is an encryption. It's essentially a two-layer encryption, but the outer layer is encrypted under the KC, the client's password-derived key.

11:59.300 --> 12:12.300
And inside, there is a blue KC TGS, right? This is the session key for this entire session, for the, until the client logs out, or the TGT expires, whichever comes first.

12:12.300 --> 12:23.300
Because you see there is also ID TGS, it better match what the client says. So when the client decrypts this, first of all, if the client cannot decrypt this, like he gets garbage, that means two things.

12:23.300 --> 12:35.300
Either the client is lying, meaning the user is not the right user, or the user mistyped the password, it happens, or somebody modified this green blob on the way between the KPC and the user.

12:35.300 --> 12:44.300
Totally possible. Could be innocuous, like a router is buggy, or could be malicious.

12:44.300 --> 13:00.300
Okay, so failure to decrypt can be any of those things. If the decryption succeeds, the client will make sure that ID TGS he sent in the blue is the same one that comes back in the green.

13:00.300 --> 13:07.300
It will also make sure that time KPC is reasonably near the time C that he sent earlier.

13:07.300 --> 13:23.300
And the reason is because time C is in fact acting as a challenge. Yeah? You see that? Time kicks up. So it's kind of acting as a challenge.

13:23.300 --> 13:24.300
Lifetime.

13:24.300 --> 13:33.300
Lifetime. Clearly, that's the ticket lifetime for that, for that, for that ticket granting ticket. After that lifetime, you have to re-login.

13:33.300 --> 13:45.300
And then the last, but definitely in all this, that's a big part, that red part is ticket TGS. That is encrypted using TGS's key.

13:45.300 --> 13:56.300
Client cannot read it. It just treats it as a block. But if the client decrypts, and everybody, by the way, trusts the KPC.

13:56.300 --> 14:04.300
KPC is called a trusted third party for a reason. You have no choice but to trust it. It's your big brother.

14:04.300 --> 14:14.300
If the client succeeds in decrypting the green part, right, the outer encryption, it knows the structure of the red part. It just cannot read it.

14:14.300 --> 14:24.300
But it knows its structure. It knows what should be inside. And inside, among other things, should be an exact copy of that blue KC TGS.

14:24.300 --> 14:34.300
And better be the same lifetime, too. Otherwise, the curve of simplification isn't correct.

14:34.300 --> 14:38.300
Right?

14:38.300 --> 14:44.300
That key is freshly generated, randomly generated by the AS.

14:44.300 --> 14:53.300
Right? And so what's inside? Roughly here, this is not an exact format. What is inside is that same blue P, as I said, the ID of the client, for good reason.

14:53.300 --> 15:03.300
Address of the client. Actually, it could be like a, depending on the version of the purpose, it's either an address, IP address, or a list of IP addresses.

15:03.300 --> 15:12.300
Okay? Or it could be like blank or like asterisk, which means any IP address. Not advised.

15:12.300 --> 15:13.300
ID TGS.

15:13.300 --> 15:14.300
ID TGS.

15:14.300 --> 15:15.300
ID TGS.

15:15.300 --> 15:18.300
Well, that's what TGS is going to allow, okay. It's neat.

15:18.300 --> 15:19.300
Time.

15:19.300 --> 15:22.300
KDC's time, which is the same as the time in the green.

15:22.300 --> 15:26.300
And lifetime, which is, again, the same as in the green.

15:26.300 --> 15:33.300
So there's a lot of duplicate information, and it has to agree, because that's what KDC always does.

15:33.300 --> 15:40.300
It makes sure that whatever is inside the red part is faithfully replicated inside the green part, okay?

15:40.300 --> 15:45.300
In fact, there's nothing really secret there. You see, the client can know what's inside.

15:45.300 --> 16:01.300
But he just cannot decrypt. So, client decrypts with, like I said, green part, the planes keeps TGS, gets the six tracks, the ticket TGS, bam.

16:01.300 --> 16:10.300
Now, it goes to the TGS, okay, with this TGT on, this ticket from before.

16:10.300 --> 16:13.300
But it only goes there if it needs to.

16:13.300 --> 16:22.300
If the client came to work, a user came to work, used the workstation to log in, and wants to, like I said before, take a break, no problem.

16:22.300 --> 16:27.300
He just wants to run something locally that requires no server access, no problem.

16:27.300 --> 16:33.300
Kerberis is not involved. The moment the client wants to use some server that is Kerberized, right?

16:33.300 --> 16:38.300
It's protected by Kerberis, like print something, alright?

16:38.300 --> 16:44.300
Or use some CAD package, or access a database, or whatever.

16:44.300 --> 16:49.300
So what it does is it sends the following thing.

16:49.300 --> 16:58.300
It encrypts, under the case TGS, which he just extracted, or earlier, not just, earlier extracted from the previous packet,

16:58.300 --> 17:08.300
to encrypt its identity, right, its address, where it's coming from, and the current time.

17:08.300 --> 17:11.300
And that becomes authentication token.

17:11.300 --> 17:12.300
Okay?

17:12.300 --> 17:14.300
Off C.

17:14.300 --> 17:17.300
In addition to that, it adds the ID of the service.

17:17.300 --> 17:20.300
It wants server, he wants to access ITV.

17:20.300 --> 17:25.300
And that red ticket TGS from before, which he cannot read.

17:25.300 --> 17:29.300
But we remember what's inside there, right?

17:29.300 --> 17:34.300
So he sends it to the TGS, and the TGS does what?

17:34.300 --> 17:43.300
It looks at ID and says, huh, well, actually, I'm missing something.

17:43.300 --> 17:46.300
There's, you'll see it when I give you a full format.

17:46.300 --> 17:49.300
There's, also, identity of the client is sent in that message.

17:49.300 --> 17:50.300
It's kind of implied.

17:50.300 --> 17:59.300
So the, the ticket granting service says, okay, client Alice wants to access server printering.

17:59.300 --> 18:02.300
So it's, is that allowed?

18:02.300 --> 18:05.300
So now there's a policy database, right?

18:05.300 --> 18:10.300
There's, like, a user, remember I said there's, like, a user database that lists users and when they can log in

18:10.300 --> 18:14.300
and all kinds of policy about when can they, can they get onto the system.

18:14.300 --> 18:19.300
And then there's a separate policy database that says, which is essentially an access control,

18:19.300 --> 18:29.300
a representation that says, does this user have the right to access this resource, this server, at this time?

18:29.300 --> 18:30.300
Okay?

18:30.300 --> 18:33.300
That is called access control.

18:33.300 --> 18:35.300
Okay?

18:35.300 --> 18:39.300
So, if that fails, the TGS doesn't bother.

18:39.300 --> 18:41.300
It just returns an error.

18:41.300 --> 18:43.300
Access denied.

18:43.300 --> 18:46.300
Maybe it was, I forget, maybe it was some code.

18:46.300 --> 18:58.300
The next thing it does, it authenticates, well, sorry, the next thing it does, it decrypts that red ticket.

18:58.300 --> 19:03.300
And because the red ticket is encrypted under its own key, it can't decrypt it.

19:03.300 --> 19:10.300
If it cannot, then, again, either the client is supplying something wrong, or somebody in transit modified it.

19:10.300 --> 19:11.300
Right?

19:11.300 --> 19:14.300
You have to always consider the possibility.

19:14.300 --> 19:23.300
But if it manages to decrypt that red or orange part, then inside it, you will find what we already saw.

19:23.300 --> 19:28.300
Inside it, you will find this.

19:28.300 --> 19:31.300
This, this, this, this, this.

19:31.300 --> 19:32.300
Okay?

19:32.300 --> 19:37.300
So, among other things, you see the first, the blue part is the KCTGS.

19:37.300 --> 19:38.300
He will extract it.

19:38.300 --> 19:39.300
Right?

19:39.300 --> 19:45.300
He will extract it, and then he will verify off C.

19:45.300 --> 19:50.300
Off C is computed with KCTGS.

19:50.300 --> 19:51.300
That's the key she would extract.

19:51.300 --> 19:57.300
If the off C does not verify, again, two things are possible.

19:57.300 --> 20:05.300
Either the ticket has been hijacked, and somebody is, or the client did something wrong, or somebody modified it in transit.

20:05.300 --> 20:15.300
For the message to be fully processed, the TGS has to be able to decrypt the ticket TGS and verify successfully off C.

20:15.300 --> 20:20.300
And, of course, the policy part, but can this client access this service?

20:20.300 --> 20:30.300
If all that succeeds, the TGS replies, okay, with, again, double encryption.

20:30.300 --> 20:35.300
That's a standard format inside, inside Kerberos, double encryption.

20:35.300 --> 20:40.300
Today, it doesn't do that, but this is canonical Kerberos.

20:40.300 --> 20:46.300
KCTGS encryption, which the client knows, or should know, right?

20:46.300 --> 20:51.300
KCV is the new key, randomly, freshly generated.

20:51.300 --> 20:55.300
That will be the key for the client to talk to that print server.

20:55.300 --> 20:58.300
Not yet, right, but to be.

20:58.300 --> 21:01.300
IDV, meaning the server ID.

21:01.300 --> 21:05.300
Time on the TGS side, and the ticket V.

21:05.300 --> 21:11.300
The ticket V, in whatever color that is, beige, is not, again, not decryptable by the client.

21:11.300 --> 21:14.300
But the client pretty much knows what's inside.

21:14.300 --> 21:18.300
You see, similar to what we saw on the previous slide.

21:18.300 --> 21:26.300
It's an encryption on the server V's key, long term, strong key.

21:26.300 --> 21:34.300
On the same KCV, ID of the client, address of the client, ID of the server, just for sanity.

21:34.300 --> 21:37.300
Time on the TGS side, and the lifetime of the ticket.

21:37.300 --> 21:43.300
This is how long can this user, Alice, use this particular printer,

21:43.300 --> 21:48.300
without having to go back to the TGS and get another ticket.

21:48.300 --> 21:53.300
This lifetime cannot be longer than the TGS ticket lifetime.

21:53.300 --> 21:55.300
Make sense?

21:55.300 --> 21:58.300
Otherwise, it would be really stupid.

21:58.300 --> 21:59.300
Right?

21:59.300 --> 22:09.300
You don't want to give somebody a right to say print past the time they should be logged back.

22:09.300 --> 22:14.300
Or, for example, access an employee database.

22:14.300 --> 22:15.300
Okay.

22:15.300 --> 22:19.300
So, the client does the same thing to do with TGS before.

22:19.300 --> 22:30.300
It will, because it knows KC TGS, it will decrypt that outer part, obtain KCV, obtain IDV.

22:30.300 --> 22:33.300
It will compare IDV to the one it sent in the first message.

22:33.300 --> 22:34.300
They better match.

22:34.300 --> 22:37.300
If they don't match, there's something wrong.

22:37.300 --> 22:43.300
It will check the time TGS to make sure it's a recent time.

22:43.300 --> 22:50.300
And, you cannot verify TKD, but it just caches it.

22:50.300 --> 22:51.300
Okay?

22:51.300 --> 22:54.300
Caches it because we need it again.

22:54.300 --> 22:56.300
Okay?

22:56.300 --> 22:59.300
Everybody gets it?

22:59.300 --> 23:03.300
And now it's time to go obtain CERNs.

23:03.300 --> 23:04.300
Okay.

23:04.300 --> 23:06.300
So, you want to actually print.

23:06.300 --> 23:07.300
Okay.

23:07.300 --> 23:09.300
So, now you have the client.

23:09.300 --> 23:12.300
Actually, what I said, the user just says, I want to print.

23:12.300 --> 23:17.300
But all of this other stuff, like going on the previous slide and this slide, that happens under coverage.

23:17.300 --> 23:19.300
The user, human, is not involved.

23:19.300 --> 23:20.300
Right?

23:20.300 --> 23:22.300
Unless there is an error, right?

23:22.300 --> 23:24.300
Like access denied or some sort.

23:24.300 --> 23:27.300
User is not bothered with anything.

23:27.300 --> 23:29.300
It all happens quickly.

23:29.300 --> 23:37.300
So, the user, client, excuse me, goes to the server directly now, finally, and says,

23:37.300 --> 23:40.300
Yo, I have a ticket for you.

23:40.300 --> 23:41.300
Okay?

23:41.300 --> 23:43.300
Here is the ticket.

23:43.300 --> 23:45.300
That pink thing.

23:45.300 --> 23:47.300
Came from the previous slide.

23:47.300 --> 23:48.300
Right?

23:48.300 --> 23:49.300
Here is an authenticator.

23:49.300 --> 23:50.300
And here is an authenticator.

23:50.300 --> 23:55.300
To prove that I know the same key that is included in the ticket.

23:55.300 --> 23:56.300
Why?

23:56.300 --> 24:01.300
Well, because if I don't know the key, then it's not my ticket.

24:01.300 --> 24:03.300
Or I'm not me.

24:03.300 --> 24:07.300
So, the server receives that ticket.

24:07.300 --> 24:13.300
The server, first, decrypts that ticket using KD.

24:13.300 --> 24:14.300
Right?

24:14.300 --> 24:16.300
Decrypts the ticket.

24:16.300 --> 24:20.300
And inside finds what we already saw.

24:20.300 --> 24:22.300
That pink thing.

24:22.300 --> 24:27.300
And it finds KCD, IDC.

24:27.300 --> 24:28.300
Right?

24:28.300 --> 24:33.300
It will make sure that the ID of the client is the same one that the message of the next

24:33.300 --> 24:34.300
slide comes from.

24:34.300 --> 24:35.300
The address.

24:35.300 --> 24:36.300
The IP address should be the same.

24:36.300 --> 24:37.300
Although those are fungible.

24:37.300 --> 24:38.300
We all know this.

24:38.300 --> 24:41.300
It will send it to check its own ID.

24:41.300 --> 24:44.300
Does my ID match what is inside the pink thing?

24:44.300 --> 24:47.300
The time TGS has to be recent.

24:47.300 --> 24:48.300
Right?

24:48.300 --> 24:51.300
But the important thing is the lifetime.

24:51.300 --> 24:53.300
Okay.

24:53.300 --> 24:54.300
Okay.

24:54.300 --> 25:00.300
Now, the interesting thing is time TGS has to be, does not have to be synchronized here.

25:00.300 --> 25:05.300
Does anybody see why that is?

25:05.300 --> 25:10.300
All the previous times, when you, all the previous times you saw time, it was like they have to

25:10.300 --> 25:11.300
be reasonably linear.

25:11.300 --> 25:15.300
This time TGS does not have to be reasonably linear.

25:15.300 --> 25:18.300
This has to be within like time.

25:18.300 --> 25:19.300
Exactly.

25:19.300 --> 25:30.300
So, if a printer server receives a ticket, a service ticket from some user, and the inside

25:30.300 --> 25:36.300
when it decrypts the ticket, it's part of the ticket, it says time TGS 8 AM, but it's

25:36.300 --> 25:39.300
now noon, that's okay.

25:39.300 --> 25:40.300
That's okay.

25:40.300 --> 25:45.300
Because the lifetime, right, as long as the lifetime is okay.

25:45.300 --> 25:55.300
Because it just gives it time TGS plus the lifetime, that's when the ticket expires.

25:55.300 --> 25:56.300
Okay.

25:56.300 --> 25:58.300
So now, we're almost done.

25:58.300 --> 25:59.300
All right?

25:59.300 --> 26:04.300
So the server extracts, extracts, decrypts the pink ticket, extracts the information, and

26:04.300 --> 26:06.300
then verifies off C. Why?

26:06.300 --> 26:13.300
Because the same Kcb better be inside there that was computed with, off C was computed

26:13.300 --> 26:19.300
with, checks the idea of decline, again, the rest of the time, fine, that time is better

26:19.300 --> 26:20.300
be timed.

26:20.300 --> 26:27.300
That off, right, that off C better include the time that's, like, near.

26:27.300 --> 26:28.300
Synchronized.

26:28.300 --> 26:34.300
Not perfectly synchronized, but somewhat synchronized.

26:34.300 --> 26:35.300
Okay.

26:35.300 --> 26:37.300
Last message.

26:37.300 --> 26:40.300
Strictly speaking, it's an optional message.

26:40.300 --> 26:46.300
You can configure curbers to just do one way authentication, like this, to client to

26:46.300 --> 26:47.300
the server.

26:47.300 --> 26:51.300
And the reason is you might want to send a print job to, let's say, to the printer, and

26:51.300 --> 26:53.300
you don't care if you hear anything back.

26:53.300 --> 26:54.300
Right?

26:54.300 --> 27:01.300
So the client can just take that, what is that color, lilac, that first message in lilac,

27:01.300 --> 27:08.300
and append a print job to it, like a PDF file, and say, here, let's print this one.

27:08.300 --> 27:11.300
So that last message might not always be necessary.

27:11.300 --> 27:14.300
But typically, I think, by default, it is.

27:14.300 --> 27:23.300
So it's an encryption on the KCV of the time, time C is from client off C, right?

27:23.300 --> 27:25.300
So it's kind of a challenge, right?

27:25.300 --> 27:27.300
Time C functions as a challenge.

27:27.300 --> 27:32.300
It proves to the client that the server received the previous message, right?

27:32.300 --> 27:35.300
And, of course, he knows KCV.

27:35.300 --> 27:39.300
Otherwise, nobody would compute that time C plus 1.

27:39.300 --> 27:44.300
That is actually one of the vulnerabilities of this version of Curveverse.

27:44.300 --> 27:48.300
But that's for another lecture.

27:48.300 --> 27:51.300
Anyway, for now, let's consider this reasonably secure.

27:51.300 --> 27:52.300
Right?

27:52.300 --> 27:53.300
That's the idea.

27:53.300 --> 27:54.300
Right?

27:54.300 --> 28:00.300
So you have essentially, for a given user who starts out fresh, comes into work, or just

28:00.300 --> 28:04.300
logs in for the first time, there are three exchanges.

28:04.300 --> 28:07.300
One is to log in initially.

28:07.300 --> 28:12.300
The next one is, every server you want to access, you have to get a ticket for that server.

28:12.300 --> 28:16.300
And then the third is, you do a handshake exchange with that server.

28:16.300 --> 28:27.300
Now, if the client has multiple jobs to print, let's say, the client gets the tickets for

28:27.300 --> 28:31.300
printer server at 9am, and then it prints something.

28:31.300 --> 28:34.300
And then at 10am, the client has something else to print.

28:34.300 --> 28:40.300
As long as the lifetime of this ticket is valid, the client does not need to go back to the DGS.

28:40.300 --> 28:41.300
Right?

28:41.300 --> 28:44.300
It can reuse the same ticket.

28:44.300 --> 28:46.300
And that's why we have the lifetime.

28:46.300 --> 28:48.300
Okay?

28:48.300 --> 28:49.300
Yes?

28:49.300 --> 28:51.300
Clear?

28:51.300 --> 28:58.300
So, let's just go through the reasoning.

28:58.300 --> 29:00.300
For the last, I forgot to mention this.

29:00.300 --> 29:01.300
Right?

29:01.300 --> 29:04.300
So, the server, let's look at it from the client perspective.

29:04.300 --> 29:08.300
The server can only produce this message if he knows the KCB.

29:08.300 --> 29:09.300
Because only the server.

29:09.300 --> 29:11.300
Client does not generate messages like that.

29:11.300 --> 29:12.300
Like this new message.

29:12.300 --> 29:13.300
Right?

29:13.300 --> 29:15.300
Because the client is not a server.

29:15.300 --> 29:17.300
It is not programmed to generate such messages.

29:17.300 --> 29:21.300
So, the only party that could generate such messages is the right server.

29:21.300 --> 29:23.300
Because it is the only other party.

29:23.300 --> 29:27.300
Well, except for the trusted third party who we trust not to do and interfere.

29:27.300 --> 29:29.300
So, only that server can do.

29:29.300 --> 29:36.300
Server, on his part, the server can only learn the KCB if he could have decrypted the ticket.

29:36.300 --> 29:40.300
There's no way he could learn the KCB without decrypting the pink ticket.

29:40.300 --> 29:41.300
Okay?

29:41.300 --> 29:44.300
And verifying everything.

29:44.300 --> 29:47.300
So, everything was A-OK.

29:47.300 --> 29:48.300
Alright?

29:48.300 --> 29:52.300
And the server can only decrypt that ticket if he knows KB.

29:52.300 --> 29:53.300
Right?

29:53.300 --> 29:56.300
Because that ticket, that pink one, was encrypted with KB.

29:56.300 --> 30:00.300
Well, then, if the server knows KB, then it must be the right server.

30:00.300 --> 30:02.300
So, therefore, it's authenticated.

30:02.300 --> 30:06.300
That's kind of the change of logic here.

30:06.300 --> 30:11.300
Here's the, sometimes the bird's eye view comes again.

30:11.300 --> 30:12.300
Okay?

30:12.300 --> 30:16.300
So, here's the high level of Rubio Athenians for the Stallings book.

30:16.300 --> 30:20.300
So, it's probably a different terminology but it may help you understand that.

30:20.300 --> 30:26.300
So, again, once per user login session, you have the request ticket, granting ticket,

30:26.300 --> 30:29.300
which is essentially login with authentication server.

30:29.300 --> 30:36.300
You see that all this blob is one machine running two processes or two functions.

30:36.300 --> 30:38.300
You get a ticket and a session key.

30:38.300 --> 30:42.300
Then, when you want to use a server, you request service granting ticket, service ticket.

30:42.300 --> 30:46.300
If successful, you get back a ticket and a session key.

30:46.300 --> 30:51.300
And then, when you actually use the service, you request service with that server.

30:51.300 --> 30:57.300
And, if it succeeds in authentication, it will return a mutually authentication.

30:57.300 --> 30:58.300
Okay?

30:58.300 --> 31:03.300
And, in another way, more specific.

31:03.300 --> 31:05.300
These are the messages in Kerberos.

31:05.300 --> 31:12.300
One day, if you work in the security industry or even for security, doing security function

31:12.300 --> 31:17.300
in a non-security company, you might have to deal with this.

31:17.300 --> 31:21.300
Because a lot of industry uses Kerberos in one way.

31:21.300 --> 31:22.300
Sometimes it's called Kerberos.

31:22.300 --> 31:29.300
It's integrated like in Windows Enterprise or some other larger software packages.

31:29.300 --> 31:32.300
But, underneath it is Kerberos.

31:32.300 --> 31:37.300
So, again, client, server, KDC.

31:37.300 --> 31:39.300
First message is called ASRequest.

31:39.300 --> 31:41.300
Authentication, service request.

31:41.300 --> 31:43.300
That's the login allowed by me.

31:43.300 --> 31:50.300
The reply with the TGT is ASReply because it comes from the AS file of the KDC.

31:50.300 --> 31:53.300
Next, when you want to use a service called TGSRequest,

31:53.300 --> 31:55.300
request from the ticket granting service.

31:55.300 --> 31:58.300
The reply, if always good, is TGSReplied.

31:58.300 --> 32:00.300
Then, finally, app.

32:00.300 --> 32:05.300
Application server request and application server reply.

32:05.300 --> 32:10.300
Ad nauseam added to that.

32:10.300 --> 32:19.300
And here's the gory detail of what's inside.

32:19.300 --> 32:20.300
Okay.

32:20.300 --> 32:24.300
Now, the terminology here is a little different because it's formal.

32:24.300 --> 32:25.300
Right?

32:25.300 --> 32:26.300
Formal from the spec.

32:26.300 --> 32:30.300
So, ASRequest, principle C is the name of the user.

32:30.300 --> 32:34.300
You can think of it as the client's name.

32:34.300 --> 32:41.300
The next one is around, and I'll jump ahead and say that Kerberos works for a single administrative entity.

32:41.300 --> 32:47.300
Meaning that you cannot have several organizations living under one Kerberos umbrella.

32:47.300 --> 32:48.300
That doesn't work.

32:48.300 --> 32:49.300
Each has its own.

32:49.300 --> 33:02.300
If you have different companies, different parts of the same company, you may want to have two or different multiple Kerberos installations.

33:02.300 --> 33:04.300
I'll say a few words by the way.

33:04.300 --> 33:08.300
But this is the, each Kerberos installation is called a round.

33:08.300 --> 33:10.300
And you need to specify.

33:10.300 --> 33:12.300
Like, Kerberos is reserved.

33:12.300 --> 33:17.300
It is, it's a, it's a request to Kerberos, for Kerberos ticket granting ticket.

33:17.300 --> 33:21.300
And then the uppercase realm, that's configurable.

33:21.300 --> 33:22.300
Right?

33:22.300 --> 33:24.300
That's whatever the name of your realm is.

33:24.300 --> 33:34.300
IP list is the list for potentially empty of IP addresses for which you are requesting a TGT.

33:34.300 --> 33:37.300
Now, the policy may disallow this.

33:37.300 --> 33:38.300
And only allow one.

33:38.300 --> 33:41.300
But, policy allows it to specify multiple.

33:41.300 --> 33:46.300
Say, for example, I'm going to use an IP address of my MacBook and my desktop and my smartphone.

33:46.300 --> 33:47.300
Okay.

33:47.300 --> 33:56.300
But, if the IP list is empty, that means I want a TGT that's independent of the IP address.

33:56.300 --> 33:57.300
I want it to be portable.

33:57.300 --> 33:59.300
Again, that might not be allowed.

33:59.300 --> 34:01.300
That depends on the installation.

34:01.300 --> 34:02.300
Lifetime.

34:02.300 --> 34:05.300
I want the ticket for this lifetime.

34:05.300 --> 34:12.300
That may not, may or may not agree with the lifetime the, the, the, the, the AS wants to issue a ticket for.

34:12.300 --> 34:13.300
Anyway.

34:13.300 --> 34:14.300
Okay.

34:14.300 --> 34:15.300
That's AS request.

34:15.300 --> 34:16.300
AS reply.

34:16.300 --> 34:20.300
Let's stick to that, let's stick to that second line.

34:20.300 --> 34:22.300
AS reply is the same, the realm.

34:22.300 --> 34:23.300
Right?

34:23.300 --> 34:24.300
Just echo it.

34:24.300 --> 34:25.300
Okay?

34:25.300 --> 34:26.300
Timestamp on AS.

34:26.300 --> 34:31.300
Lifetime, which cannot be longer than what the user asked for.

34:31.300 --> 34:32.300
Can be shorter.

34:32.300 --> 34:34.300
So, the user can ask for 24 hours but only got 8 hours.

34:34.300 --> 34:35.300
That's okay.

34:35.300 --> 34:36.300
Lifetime, and KC, TGS.

34:36.300 --> 34:37.300
Right?

34:37.300 --> 34:38.300
So, that's the key.

34:38.300 --> 34:39.300
Remember, we already talked about it.

34:39.300 --> 34:41.300
And all that curly brackets, curly brackets denote encryption.

34:41.300 --> 34:42.300
All that is encrypted under KC, which is the client's password or IP.

34:42.300 --> 34:49.300
And then, that little seeming little part in yellow is TGT and encrypted for TGS.

34:49.300 --> 34:50.300
Notice what's inside that.

34:50.300 --> 34:51.300
Okay?

34:51.300 --> 34:52.300
It's encrypted, right?

34:52.300 --> 34:53.300
So, I only show you the unencrypted part on second line.

34:53.300 --> 34:59.300
It has the name of the principle, which is the same, the name of the user, the round,

34:59.300 --> 35:02.300
the IP list, the timestamp of the AS, lifetime, and KC, TGS.

35:02.300 --> 35:07.300
So, it actually duplicates a lot of the fields you will see on the left side.

35:07.300 --> 35:08.300
So, it's encrypted.

35:08.300 --> 35:09.300
So, it's encrypted.

35:09.300 --> 35:10.300
So, it's encrypted.

35:10.300 --> 35:11.300
So, it's encrypted.

35:11.300 --> 35:12.300
So, it's encrypted.

35:12.300 --> 35:13.300
So, it's encrypted.

35:13.300 --> 35:14.300
So, it's encrypted.

35:14.300 --> 35:15.300
And the KC, which is encrypted.

35:15.300 --> 35:16.300
And the KC, which is the client's password or IP.

35:16.300 --> 35:17.300
And then, that little seeming little part in yellow is TGT and encrypted for TGS.

35:17.300 --> 35:18.300
Notice what's inside that.

35:18.300 --> 35:19.300
Okay?

35:19.300 --> 35:20.300
It's encrypted, right?

35:20.300 --> 35:23.300
It actually duplicates a lot of the fields you will see online.

35:23.300 --> 35:24.300
Great.

35:24.300 --> 35:25.300
All right.

35:25.300 --> 35:26.300
And TGS request.

35:26.300 --> 35:32.300
This is when this client goes to the TGS and says, I want a ticket for the printer.

35:32.300 --> 35:35.300
That contains principle V.

35:35.300 --> 35:39.300
Principle V is the name, official name of the printer service or whatever service you

35:39.300 --> 35:40.300
want access.

35:40.300 --> 35:41.300
Lifetime.

35:41.300 --> 35:42.300
For how long?

35:42.300 --> 35:47.300
Again, cannot be longer than the lifetime of your TGS ticket.

35:47.300 --> 35:49.300
And an authenticator, right?

35:49.300 --> 35:52.300
You don't come to the door without an authenticator.

35:52.300 --> 35:59.300
So, the authenticator one-off-one is an encryption of the principal C, meaning his own name, timestamp,

35:59.300 --> 36:04.300
current timestamp on C, the client, and checksides.

36:04.300 --> 36:05.300
Okay?

36:05.300 --> 36:08.300
It's an authenticated checksides.

36:08.300 --> 36:10.300
Very simple checksides.

36:10.300 --> 36:11.300
Okay?

36:11.300 --> 36:12.300
So, TGS request arrives.

36:12.300 --> 36:13.300
It is decrypted and verified.

36:13.300 --> 36:14.300
Okay?

36:14.300 --> 36:15.300
And when it's successful, everything goes well.

36:15.300 --> 36:16.300
The TGS replies with this, with the service ticket.

36:16.300 --> 36:17.300
And it contains two parts.

36:17.300 --> 36:18.300
Remember?

36:18.300 --> 36:19.300
The name of the server.

36:19.300 --> 36:20.300
The timestamp.

36:20.300 --> 36:21.300
The timestamp.

36:21.300 --> 36:22.300
The timestamp.

36:22.300 --> 36:23.300
The timestamp.

36:23.300 --> 36:24.300
The timestamp.

36:24.300 --> 36:25.300
The timestamp.

36:25.300 --> 36:26.300
The timestamp.

36:26.300 --> 36:27.300
The timestamp.

36:27.300 --> 36:28.300
The timestamp.

36:28.300 --> 36:29.300
And it contains two parts.

36:29.300 --> 36:30.300
Remember?

36:30.300 --> 36:31.300
The name of the server.

36:31.300 --> 36:32.300
The timestamp.

36:32.300 --> 36:33.320
The timestamp.

36:33.320 --> 36:34.320
The timestamp.

36:34.320 --> 36:35.320
The timestamp.

36:35.320 --> 36:36.320
The timestamp.

36:36.320 --> 36:37.320
The timestamp.

36:37.320 --> 36:38.320
And theuler of the przyst.

36:38.320 --> 36:40.320
As for the client.

36:40.320 --> 36:47.280
So, this part, this part is decrypted by the client.

36:47.280 --> 36:57.280
And then the next part is only decrypted by the server, when the client decides to go to the server.

36:57.280 --> 37:04.280
Okay, then these are where the last two messages when the client goes to the printer server and supplies an authenticator

37:04.280 --> 37:09.280
and then takes this from here, just per meter, copies it here.

37:09.280 --> 37:17.280
Okay? And yeah, this is time sample, 400 plus 1.

37:17.280 --> 37:25.280
Any other questions? Any questions at all?

37:25.280 --> 37:38.280
It's not as difficult as it might seem. The notation might be a little obscure, but stare at it for a while, and then for a while, everything will be clear.

37:38.280 --> 37:40.280
No question. Okay.

37:40.280 --> 37:47.280
Now, as I said before, Kerberos isn't made for large networks or administratively heterogeneous environment.

37:47.280 --> 37:55.280
So, you want to divide even if you have a large company, even if it is one administration, but you have different geographical locations

37:55.280 --> 38:01.280
and just very large installations, like maybe you have one building, but there are really different departments.

38:01.280 --> 38:10.280
If you have a product department and a sales department and marketing, maybe you want to separate and have two different Kerberos realms for those.

38:10.280 --> 38:23.280
It's just easier to do like that. But every realm has to have a KDC. And every realm has to register its own server and its own users, right?

38:23.280 --> 38:32.280
So, now, how do you interoperate? Well, that's done in a kind of very obvious or naive way.

38:32.280 --> 38:41.280
And so, one way to think about it is, like, imagine you are at UCI, and we run our Kerberos realm, which we actually do.

38:41.280 --> 38:48.280
And then we have, let's say, UC Riverside, about 50 miles away. It's another UC campus. They run their own.

38:48.280 --> 38:57.280
So, they'll have ROM at, you know, Kerberos at UCR, and we have Kerberos at UCI. Those are two different realms.

38:57.280 --> 39:02.280
But because we are all good UC citizens, we are allowed to access each other's resources.

39:02.280 --> 39:09.280
Okay? So, how do we do that? Well, you want to do that, you first need to log in locally, where you are known.

39:09.280 --> 39:20.280
Right? So, your UCI, your UCI denizen of sorts, right? You log in here, you get access, and then, you go to the TGT,

39:20.280 --> 39:33.280
to TGS, and you ask for a special TGT. For a special ticket. Not a TGT. So, you follow me, you log in, you get the ticket-granting ticket.

39:33.280 --> 39:44.280
And now you go to the TGS and say, I want a ticket for a server, but it's a special server, it's called KDC at UC Riverside.

39:44.280 --> 39:52.280
So, the way that it's treated is like another server, but it has to be explicitly registered locally.

39:52.280 --> 39:58.280
And it has to be bought. It doesn't have to be bilateral, but it makes sense if it was bilateral.

39:58.280 --> 40:05.280
Does that make sense? But you're not done. The process is more complicated than that.

40:05.280 --> 40:14.280
Because once you get a service ticket for a TGT, for a TGS in Riverside, you then have to, you don't need to log in.

40:14.280 --> 40:21.280
You don't need to log in. But you need to bring that service ticket and contact directly the KDC at Riverside.

40:21.280 --> 40:31.280
And it will say, oh, this is a foreign issue ticket, let me look in the database if I know of UCI KDCs.

40:31.280 --> 40:41.280
Oh, yes I do, in which case, you know, you can get an application ticket on me locally at UC Riverside,

40:41.280 --> 40:46.280
and then you can get, you know, printing access and file access and all that. Okay?

40:46.280 --> 40:56.280
So, it's not, like, trivial, right, in terms of, like, what's, the particles are trivial, given what you already saw.

40:56.280 --> 41:04.280
It's not really very different, but there are more of them required in order to support cross-ground functionality.

41:04.280 --> 41:12.280
And also, every KDC, then, has to share a key with every other KDC.

41:12.280 --> 41:22.280
So, if we have 10 UC campuses, right, and each UC campus runs, you know, its own Kerberos installation,

41:22.280 --> 41:30.280
there have to be 90 keys, right? And, you know, every UC campus has to share a key, right?

41:30.280 --> 41:36.280
A KDC, you know, every two KDCs have to share a key.

41:36.280 --> 41:45.280
And that has to be done manually.

41:45.280 --> 41:50.280
Now, one of the important things to take away from Kerberos is that it's not super scalable,

41:50.280 --> 41:56.280
it's not like using public key, you know, in the world of web browsing, okay,

41:56.280 --> 42:02.280
where things scale to the entire world with questionable security, of course.

42:02.280 --> 42:05.280
But we feel like they scale to the entire world.

42:05.280 --> 42:07.280
And Kerberos things don't scale that far.

42:07.280 --> 42:11.280
But they scale to reasonable size, medium-sized organization.

42:11.280 --> 42:16.280
And that's important, okay?

42:16.280 --> 42:20.280
The other interesting thing is Kerberos is basically a symmetric key.

42:20.280 --> 42:25.280
It does not use, by default, right?

42:25.280 --> 42:26.280
It's in its vanilla form.

42:26.280 --> 42:30.280
It does not use public key cryptography at all.

42:30.280 --> 42:35.280
Which, for example, if you know anything about what's going on in the world of tech today,

42:35.280 --> 42:41.280
of science, makes it kind of attractive for our quantum resistance.

42:41.280 --> 42:54.280
Because quantum technology will, sooner or later, make most public key techniques weak or obsolete.

42:54.280 --> 42:58.280
And that would leave us with either some very exotic public key techniques,

42:58.280 --> 43:00.280
of this security which we're still not sure about,

43:00.280 --> 43:04.280
or it would leave us essentially with symmetric key work.

43:04.280 --> 43:06.280
Like what Kerberos does.

43:06.280 --> 43:08.280
Anyway, so that's the detour.

43:08.280 --> 43:10.280
So that's a nice feature.

43:10.280 --> 43:13.280
The services that use these short-term session keys.

43:13.280 --> 43:17.280
For both, like, client login session.

43:17.280 --> 43:22.280
The session key lasts for as long as the TGT is valid.

43:22.280 --> 43:27.280
And even short-term client application key, right?

43:27.280 --> 43:29.280
Meaning client-server keys that are used per service.

43:29.280 --> 43:39.280
Now, current release, I think there was a version last year,

43:39.280 --> 43:41.280
right middle of last year was released.

43:41.280 --> 43:42.280
This is 1.13.

43:42.280 --> 43:45.280
You can, Kerberos is fully public domain.

43:45.280 --> 43:50.280
If I had a TA and this was a larger class, I may have,

43:50.280 --> 43:53.280
I would have had maybe some actual exercises with Kerberos.

43:53.280 --> 43:56.280
Because you can totally install it and play with it.

43:56.280 --> 43:58.280
It's not that difficult.

43:58.280 --> 44:02.280
It's reasonably well maintained and it has good documentation.

44:02.280 --> 44:05.280
In order to use it, you have to, of course,

44:05.280 --> 44:07.280
install the client-side software.

44:07.280 --> 44:10.280
Not only that, but the application service.

44:10.280 --> 44:12.280
So if you want to Kerberize your printing,

44:12.280 --> 44:15.280
you want to Kerberize a certain database access,

44:15.280 --> 44:22.280
you have to essentially reinforce every service, right?

44:22.280 --> 44:25.280
So it usually requires a bit of work.

44:25.280 --> 44:27.280
Not a huge amount of work,

44:27.280 --> 44:31.280
but you have to link Kerberos server-side libraries.

44:31.280 --> 44:33.280
And so you cannot just take a software,

44:33.280 --> 44:36.280
generally I don't think you can take a software package

44:36.280 --> 44:38.280
as it is and just plunk it into Kerberos shell

44:38.280 --> 44:39.280
and say it's Kerberized.

44:39.280 --> 44:42.280
It has to be Kerberized, Kerberos-friendly.

44:42.280 --> 44:45.280
It may come Kerberized already from the manufacturer,

44:45.280 --> 44:47.280
from the software provider.

44:47.280 --> 44:48.280
That may be.

44:48.280 --> 44:50.280
But if it doesn't, you have to do it yourself.

44:53.280 --> 44:54.280
Right.

44:54.280 --> 44:56.280
So the current version of Kerberized,

44:56.280 --> 44:58.280
like I said, it's released 1.3.

44:58.280 --> 44:59.280
Version is called 5.

44:59.280 --> 45:01.280
You can't see it over there.

45:01.280 --> 45:04.280
It's obscured by the zoom logger.

45:04.280 --> 45:07.280
But the version I described to you is more older

45:07.280 --> 45:09.280
and still in use.

45:09.280 --> 45:10.280
It's called version 4.

45:10.280 --> 45:15.280
This is where version 5 has certain interesting modifications.

45:15.280 --> 45:20.280
For once, it addresses one of the problems in Kerberos,

45:20.280 --> 45:22.280
which is the first message,

45:22.280 --> 45:24.280
the first login attempt message, right,

45:24.280 --> 45:27.280
by the user is in clear text.

45:27.280 --> 45:29.280
You recall that?

45:29.280 --> 45:34.280
The key, the password derived key is not used in the first message,

45:34.280 --> 45:36.280
from the user to the AS.

45:36.280 --> 45:40.280
And what that says is that if you're an adversary

45:40.280 --> 45:42.280
and you know the name of the user,

45:42.280 --> 45:46.280
then all you need to do is send a clear text message,

45:46.280 --> 45:48.280
pretending to be that user.

45:48.280 --> 45:50.280
And what you will get back is a nice present.

45:50.280 --> 45:55.280
And the nice present is, well, it's an AS reply.

45:55.280 --> 45:57.280
Remember, that's that message.

45:57.280 --> 45:59.280
But remember that nice present carries in it,

45:59.280 --> 46:12.280
AS reply carries in it this first part,

46:12.280 --> 46:14.280
which is encrypted in the KC.

46:14.280 --> 46:15.280
Yeah?

46:15.280 --> 46:18.280
That's a password derived key.

46:18.280 --> 46:21.280
So if you can brute force the password,

46:21.280 --> 46:23.280
you can decrypt it.

46:23.280 --> 46:24.280
Yeah?

46:24.280 --> 46:25.280
Oh.

46:25.280 --> 46:26.280
No.

46:26.280 --> 46:27.280
You just brute force.

46:27.280 --> 46:29.280
Basically, you just brute force the password, right?

46:29.280 --> 46:31.280
It gives you something to play with.

46:31.280 --> 46:33.280
It's essentially like you just got an entry

46:33.280 --> 46:35.280
from an Etsy password file.

46:35.280 --> 46:37.280
You can just try to decrypt it

46:37.280 --> 46:39.280
under every possible password derived key

46:39.280 --> 46:41.280
until you find inside the name of the principal, right?

46:41.280 --> 46:43.280
You'll know when you hit pay dirt.

46:43.280 --> 46:45.280
You'll know when you guessed the key correctly.

46:45.280 --> 46:46.280
Right?

46:46.280 --> 46:48.280
So it's subject to dictionary attacks.

46:52.280 --> 46:55.280
The alternative is very, very simple.

46:55.280 --> 46:57.280
You require what's called pre-authentication,

46:57.280 --> 47:00.280
which means you require the client to prove knowledge

47:00.280 --> 47:02.280
of the password or IP in the first message.

47:02.280 --> 47:09.280
And that's something that Kerber's 5 supports.

47:09.280 --> 47:12.280
That's called pre-authentication in the initial

47:12.280 --> 47:13.280
answer request.

47:13.280 --> 47:15.280
That's not without problems itself.

47:15.280 --> 47:16.280
Yes?

47:16.280 --> 47:18.280
The attacker receives that pre-authentication.

47:18.280 --> 47:19.280
Exactly.

47:19.280 --> 47:20.280
Exactly.

47:20.280 --> 47:22.280
Well, let's talk about it for a second.

47:22.280 --> 47:25.280
Does everybody understand what he just said?

47:25.280 --> 47:26.280
Are you following?

47:26.280 --> 47:27.280
No?

47:27.280 --> 47:28.280
No?

47:28.280 --> 47:29.280
Hello?

47:29.280 --> 47:30.280
Sign up with your phone?

47:30.280 --> 47:31.280
Laptop?

47:31.280 --> 47:32.280
Big thoughts?

47:32.280 --> 47:34.280
Worry about the economy?

47:34.280 --> 47:35.280
No?

47:35.280 --> 47:39.280
Does everybody understand what he just said?

47:39.280 --> 47:40.280
Yes.

47:40.280 --> 47:44.280
If you put, if you require the client to authenticate itself

47:44.280 --> 47:47.280
in the first message, then there will be something

47:47.280 --> 47:50.280
obviously computed with a password-derived key

47:50.280 --> 47:52.280
that is present in the first message.

47:52.280 --> 47:57.280
That means, yep, okay, that's an opportunity for a password attack,

47:57.280 --> 47:58.280
right?

47:58.280 --> 48:00.280
A brute force attack on a password or dictionary attack.

48:00.280 --> 48:01.280
But are they the same?

48:01.280 --> 48:02.280
No.

48:02.280 --> 48:08.280
The main difference is you can't just get an arbitrary

48:08.280 --> 48:10.280
You get, see, in the first case, right?

48:10.280 --> 48:13.280
With the current first version I showed you, you get something

48:13.280 --> 48:14.280
for nothing.

48:14.280 --> 48:15.280
Right?

48:15.280 --> 48:16.280
You get something for nothing.

48:16.280 --> 48:20.280
You just generate a clear text, Alice, blah, blah, blah,

48:20.280 --> 48:23.280
timestamp, how difficult to get the correct time, et cetera.

48:23.280 --> 48:25.280
And you get back to present.

48:25.280 --> 48:29.280
With pre-authentication, indeed, you are still subject to dictionary attack,

48:29.280 --> 48:33.280
but you got to be lucky and wait, you know, lie and wait, right?

48:33.280 --> 48:38.280
Lie and wait until the victim user logs in.

48:38.280 --> 48:40.280
You see what I mean?

48:40.280 --> 48:42.280
So it's not like, you know, oh, at your convenient time,

48:42.280 --> 48:44.280
at 3 a.m., we're going to generate a bunch of these

48:44.280 --> 48:45.280
and get back your class.

48:45.280 --> 48:46.280
No, no, no.

48:46.280 --> 48:48.280
You have to be there when Alice comes in, you know,

48:48.280 --> 48:50.280
and let's move that.

48:50.280 --> 48:53.280
But, so there is a difference.

48:53.280 --> 48:56.280
It's not a huge difference, but it is a difference.

48:56.280 --> 48:57.280
Right.

48:57.280 --> 49:05.280
So the other modification in Curves version 5, which is today's version,

49:05.280 --> 49:07.280
is this in client-server application.

49:07.280 --> 49:14.280
What I showed you before, the client and the server, application server,

49:14.280 --> 49:16.280
use the same KCV.

49:16.280 --> 49:17.280
Remember KCV?

49:17.280 --> 49:22.280
Like, you wanted to print, you used KCV, right?

49:22.280 --> 49:26.280
Or, you wanted to print again using the same ticket, you used again KCV.

49:26.280 --> 49:30.280
Well, that's considered poor cryptographic hygiene.

49:30.280 --> 49:36.280
To reuse the same key for different, like, let's say, server, client service sessions.

49:36.280 --> 49:46.280
So instead, Converse 5 derives, uses the KCV as a master key for the ticket,

49:46.280 --> 49:54.280
and then derives individual subkeys for each, like, short client-server session.

49:54.280 --> 49:55.280
Does that make sense?

49:55.280 --> 49:57.280
Shorter, shorter, shorter.

49:57.280 --> 49:58.280
Yeah, that's right.

49:58.280 --> 50:05.280
So you got your ticket to use the printer for the next 5 hours.

50:05.280 --> 50:08.280
During those 5 hours, let's say you printed 5 times.

50:08.280 --> 50:13.280
In Curves version 4, you would have used the same KCV to print.

50:13.280 --> 50:17.280
In Curves version 5, you would use 5 different subkeys.

50:17.280 --> 50:18.280
Okay?

50:18.280 --> 50:23.280
Now, it should be abundantly clear to you, right,

50:23.280 --> 50:31.280
that the way that the servers are treated in Curves version is as being stateless.

50:31.280 --> 50:34.280
Does everybody understand what I'm saying stateless?

50:34.280 --> 50:40.280
The same way that we don't want the TGS to keep track of the issued tickets

50:40.280 --> 50:47.280
for all the currently loading users, because it makes it heavyweight and unpleasant.

50:47.280 --> 50:52.280
Even so, even more so, it makes it unpleasant for the servers to keep track of tickets.

50:52.280 --> 50:55.280
Because imagine what would happen.

50:55.280 --> 50:59.280
All the users come in the morning, log in, and start printing, and accessing databases,

50:59.280 --> 51:05.280
so all the poor servers would have to remember all the tickets that the users brought to them, right?

51:05.280 --> 51:07.280
Cache them.

51:07.280 --> 51:09.280
That's overhead.

51:09.280 --> 51:11.280
You can lose things, isn't it?

51:11.280 --> 51:14.280
But instead, Curves is stateless.

51:14.280 --> 51:19.280
The server in Curves does not know any users.

51:19.280 --> 51:23.280
Does not know you from you from me.

51:23.280 --> 51:25.280
No idea.

51:25.280 --> 51:30.280
A Curves server only knows one thing.

51:30.280 --> 51:32.280
Its master.

51:32.280 --> 51:35.280
And its master is the KDCs.

51:35.280 --> 51:39.280
Or, more specifically, the Ticket Granting Service.

51:39.280 --> 51:44.280
And it shares only one key, long term, with that Ticket Granting Service, right?

51:44.280 --> 51:47.280
So whatever the master says, it obeys.

51:47.280 --> 51:49.280
Right?

51:49.280 --> 51:52.280
And keeps no state.

51:52.280 --> 51:53.280
Keeps no state.

51:53.280 --> 51:56.280
Which is very nice.

51:56.280 --> 52:02.280
Because otherwise imagine, you'll print, like a printer is a good example.

52:02.280 --> 52:04.280
Because printers are usually zanemic devices.

52:04.280 --> 52:05.280
Right?

52:05.280 --> 52:08.280
They're good at printing, they have fast mechanical parts and whatever.

52:08.280 --> 52:11.280
But, in terms of computing power, they're not very powerful.

52:11.280 --> 52:13.280
And they don't have a lot of storage.

52:13.280 --> 52:15.280
Because in some ways, printers are like embedded devices.

52:15.280 --> 52:20.280
So, you don't want to overload them with having to cash tickets.

52:20.280 --> 52:22.280
So, it's good.

52:22.280 --> 52:28.280
Now, the other thing is, what you can do in Carver's D5 is you can do what's called forwarding.

52:28.280 --> 52:29.280
Take that forwarding.

52:29.280 --> 52:30.280
Yeah?

52:30.280 --> 52:33.280
How much compute do the heavy duty printers have?

52:33.280 --> 52:40.280
Well, you know, if you pay $50,000 for a 3D printer, that one will definitely have compute

52:40.280 --> 52:41.280
power.

52:41.280 --> 52:43.280
But even there, it's such a precious resource.

52:43.280 --> 52:46.280
You don't want to overwhelm it with like caching tickets.

52:46.280 --> 52:47.280
Why?

52:47.280 --> 52:48.280
Right?

52:48.280 --> 52:49.280
I don't know.

52:49.280 --> 52:50.280
Well, it's like the ones we have in DBH.

52:50.280 --> 52:51.280
Yeah.

52:51.280 --> 52:53.280
Those are like connected to the internet and everything.

52:53.280 --> 52:54.280
They are.

52:54.280 --> 52:55.280
Right.

52:55.280 --> 52:58.280
That's going to be a lot more power than my printer.

52:58.280 --> 53:00.280
No, for sure it will have more power.

53:00.280 --> 53:02.280
But it's still not a full-blown computer, right?

53:02.280 --> 53:08.280
It will probably have, my guess is that something that we have in DBH will be a power of an iPad

53:08.280 --> 53:09.280
of some sort.

53:09.280 --> 53:12.280
Maybe a little better than an iPad, you know?

53:12.280 --> 53:18.280
Some kind of embedded like, like a, like a airplane entertainment system type, you know,

53:18.280 --> 53:19.280
device.

53:19.280 --> 53:22.280
Or a car, infotainment system in a car.

53:22.280 --> 53:25.280
But not, not a lot stronger than that.

53:25.280 --> 53:28.280
But also, it's not just compute, it's also storage, right?

53:28.280 --> 53:30.280
That's the other thing.

53:30.280 --> 53:35.280
If you have a cache, it better being super fast and expensive memory.

53:35.280 --> 53:36.280
Yeah.

53:36.280 --> 53:41.280
So, but also recall, Kerberos was designed, did I say when it was designed?

53:41.280 --> 53:42.280
1987.

53:42.280 --> 53:43.280
Okay?

53:43.280 --> 53:48.280
Your parents were in kindergarten.

53:48.280 --> 53:50.280
So, the internet already existed.

53:50.280 --> 53:55.280
But, you know, it wasn't like this, like it is today.

53:55.280 --> 54:02.280
But, so, considering that something like Kerberos aged relatively well, I would say, it's still being used.

54:02.280 --> 54:11.280
And it still kind of resembles its original, it's not exactly the same, but it looks very much like what was there in the early 90s at least.

54:11.280 --> 54:13.280
That's a long time ago.

54:13.280 --> 54:16.280
There are very few products you can say this about.

54:16.280 --> 54:21.280
Right, so, authentication forwarding means that you can forward the ticket.

54:21.280 --> 54:29.280
Like for example, if you're, if you're accessing a file server, it needs to access, and it needs to access your box.

54:29.280 --> 54:33.280
If you're accessing a mail server, it needs to access a file server.

54:33.280 --> 54:38.280
So, in the original Kerberos, you would have to get two separate tickets.

54:38.280 --> 54:39.280
And it was clumsy.

54:39.280 --> 54:45.280
And now, the ticket that the file server gets can be forwarded to the mail server.

54:45.280 --> 54:46.280
And it can honor it.

54:46.280 --> 54:50.280
So, there's like some games to give you from that.

54:50.280 --> 54:57.280
There are, the Kerberos 5 supports hierarchies of realms.

54:57.280 --> 55:03.280
So, what I described to you about inter-realm thing and splitting things in Kerberos realms.

55:03.280 --> 55:09.280
Kerberos V5, if I'm not mistaken, I think I'm not, supports hierarchies.

55:09.280 --> 55:18.280
Where you don't have just like multiple realms as peers, but you have some super realms.

55:18.280 --> 55:20.280
Alright, and there's other stuff.

55:20.280 --> 55:23.280
Oh, it also supports multiple description schemes.

55:23.280 --> 55:28.280
The original Kerberos used the DES with some weird mode of operation that was not standard.

55:28.280 --> 55:30.280
And there were some problems because of it.

55:30.280 --> 55:39.280
Now, you can configure Kerberos to use pretty much any decent encryption function in the hash function or MAC function.

55:39.280 --> 55:43.280
But just to give you an idea about pre-authentication, coming back to that feature.

55:43.280 --> 55:56.280
So, as I said, anyone in Kerberos version 4, the way you, the one you sort of described, can use the initial packet as a vehicle for obtaining, you know, gifts.

55:56.280 --> 55:57.280
Right?

55:57.280 --> 55:59.280
Things encrypted with passwords and so on.

55:59.280 --> 56:01.280
So, it makes password guessing easy.

56:01.280 --> 56:11.280
In Kerberos V5, the first message, the AS request message that you saw earlier, requires another field called PA data.

56:11.280 --> 56:18.280
And basically, it's like, you can think of it as a timestamp, client's timestamp, encrypted under the client's key.

56:18.280 --> 56:28.280
It just says, look, this is my timestamp, my current time, encrypted under my key, presumably only I know the key.

56:28.280 --> 56:31.280
Well, the AS.

56:31.280 --> 56:38.280
So, the AS only replies if it can be encrypted.

56:38.280 --> 56:39.280
Okay?

56:39.280 --> 56:44.280
But in reality, it's done more like this.

56:44.280 --> 56:53.280
Typical configuration is, the client will send an AS request, normal one, without any authentication.

56:53.280 --> 56:59.280
And the server will reply, the AS will reply with like a special error code.

56:59.280 --> 57:00.280
It's an error.

57:00.280 --> 57:02.280
Pre-authentication required.

57:02.280 --> 57:07.280
Don't come back to me until you demonstrate the knowledge of the KC.

57:07.280 --> 57:15.280
And so, that's number three is AS request with the PA data that I showed you before.

57:15.280 --> 57:20.280
And now, AS is happy if it issues a tissue.

57:20.280 --> 57:23.280
Everything else is the same.

57:23.280 --> 57:25.280
Come on.

57:25.280 --> 57:30.280
So, re-authentication is one new thing, but there are extensions.

57:30.280 --> 57:37.280
For example, today, Kerberos can be 45 with something called pkinit, which, if I remember correctly,

57:37.280 --> 57:46.280
allows a user to securely fetch his public key.

57:46.280 --> 57:48.280
So, the user can be registered with a public key.

57:48.280 --> 57:52.280
But the user does not need to remember their public key.

57:52.280 --> 57:56.280
So, the idea is that the user tries to walk in.

57:56.280 --> 58:02.280
The user's public key will come back and allow, sorry, private key.

58:02.280 --> 58:07.280
The private key will come back from the AS and will allow the user to use that private key

58:07.280 --> 58:11.280
for all subsequent exchanges, so that Kerberos is fortifying it.

58:11.280 --> 58:16.280
The other extension is for public key based cross domain authentication, not important.

58:16.280 --> 58:18.280
So, what is Kerberos used for?

58:18.280 --> 58:23.280
For many things, like I said, Windows Enterprise Networking uses it.

58:23.280 --> 58:32.280
And if you've used Windows on an enterprise scale, even like here in ICS, you probably

58:32.280 --> 58:35.280
used Kerberos without knowing it.

58:35.280 --> 58:41.280
You may have occasionally seen some errors that will tell you, that will leak information

58:41.280 --> 58:43.280
that you are using Kerberos.

58:43.280 --> 58:45.280
Anybody seen those?

58:45.280 --> 58:48.280
Anything starting with KRB?

58:48.280 --> 58:49.280
All right.

58:49.280 --> 58:57.280
So, it's also used for securing, if you are a Unix person, and you remember these Unix commands,

58:57.280 --> 59:01.280
like remote shell, remote exec, RCP remote copy.

59:01.280 --> 59:02.280
Right?

59:02.280 --> 59:05.280
So, these are insecure commands.

59:05.280 --> 59:06.280
Right?

59:06.280 --> 59:08.280
Natively insecure commands.

59:08.280 --> 59:10.280
FTP, right?

59:10.280 --> 59:15.280
If you secure them, you can do so, if you want to secure them, you can do so with Kerberos.

59:15.280 --> 59:20.280
And then it becomes essentially Kerberized, RCP, Kerberized, RXAC, Kerberized shell, etc.

59:20.280 --> 59:23.280
You can also Kerberize the superuser command.

59:23.280 --> 59:24.280
Yeah, that's, Jesus.

59:24.280 --> 59:36.280
Let's see quickly what we're going to look at next.

59:36.280 --> 59:37.280
Okay.

59:37.280 --> 59:49.280
So, that concludes Kerberos, and next we're going to go and look at web security.

59:49.280 --> 59:50.280
Oh.

59:50.280 --> 59:51.280
Well.

59:51.280 --> 59:52.280
SSL TLS.

59:52.280 --> 59:56.280
Any questions about Kerberos at all?

59:56.280 --> 59:57.280
Okay.

59:57.280 --> 01:00:18.280
Okay.

01:00:18.280 --> 01:00:20.280
So, everybody knows SSL.

01:00:20.280 --> 01:00:22.280
Everybody knows SSL.

01:00:22.280 --> 01:00:27.280
TLS is kind of the same, sort of, kind of.

01:00:27.280 --> 01:00:30.280
Anybody know what they stand for?

01:00:30.280 --> 01:00:31.280
Ask them.

01:00:31.280 --> 01:00:32.280
Ask them.

01:00:32.280 --> 01:00:33.280
Ask them.

01:00:33.280 --> 01:00:34.280
Google.

01:00:34.280 --> 01:00:37.280
Or your favorite chat to be.

01:00:37.280 --> 01:00:39.280
Secure sockets layer.

01:00:39.280 --> 01:00:41.280
That's SSL.

01:00:41.280 --> 01:00:42.280
Transactional layer security.

01:00:42.280 --> 01:00:44.280
That's TLS.

01:00:44.280 --> 01:00:47.280
And SSH is secure shell.

01:00:47.280 --> 01:00:50.280
Okay.

01:00:50.280 --> 01:00:51.280
Okay.

01:00:51.280 --> 01:00:53.280
So, we're going to go through the part.

01:00:53.280 --> 01:00:55.280
The particle is complicated.

01:00:55.280 --> 01:01:00.280
But I figure if you know anything, if you want to know anything about today's security

01:01:00.280 --> 01:01:03.280
landscape in the real world, you do need to know about Kerberos.

01:01:03.280 --> 01:01:05.280
You do need to know about SSL TLS.

01:01:05.280 --> 01:01:08.280
And you probably need to know about something called IPsec.

01:01:08.280 --> 01:01:09.280
Does anybody know what that is?

01:01:09.280 --> 01:01:10.280
Okay.

01:01:10.280 --> 01:01:11.280
Two people.

01:01:11.280 --> 01:01:12.280
Okay.

01:01:12.280 --> 01:01:13.280
That's IP security.

01:01:13.280 --> 01:01:15.280
To be covered later.

01:01:15.280 --> 01:01:22.280
So, these are all sort of standards of sorts.

01:01:22.280 --> 01:01:24.280
Kerberos is actually a standard.

01:01:24.280 --> 01:01:27.280
Does anybody know what internet standard means?

01:01:27.280 --> 01:01:32.280
Does anybody know what IETF is?

01:01:32.280 --> 01:01:34.280
Very few people.

01:01:34.280 --> 01:01:37.280
How do you live in computer science world and not know this?

01:01:37.280 --> 01:01:40.280
IETF is Internet Engineering Task Force.

01:01:40.280 --> 01:01:46.280
It's an organization run by volunteers that essentially governs how the internet works.

01:01:46.280 --> 01:01:48.280
Everything about the internet.

01:01:48.280 --> 01:01:49.280
Well, not the web, essentially.

01:01:49.280 --> 01:01:52.280
The web is a web consortium.

01:01:52.280 --> 01:02:01.280
But the internet, essentially, and just above the transport layer, is governed by ATF.

01:02:01.280 --> 01:02:03.280
Internet Engineering Task Force.

01:02:03.280 --> 01:02:05.280
It's an international organization.

01:02:05.280 --> 01:02:06.280
They have working groups.

01:02:06.280 --> 01:02:12.280
And these working groups are concerned with everything from, like, network layer.

01:02:12.280 --> 01:02:14.280
I mean, they don't work on Wi-Fi.

01:02:14.280 --> 01:02:16.280
So, they don't work with data link layer.

01:02:16.280 --> 01:02:17.280
Because that's not interesting.

01:02:17.280 --> 01:02:21.280
They don't work on radio jamming or physical layer.

01:02:21.280 --> 01:02:23.280
Radars and microwaves.

01:02:23.280 --> 01:02:24.280
No.

01:02:24.280 --> 01:02:26.280
IP and IP.

01:02:26.280 --> 01:02:27.280
Right?

01:02:27.280 --> 01:02:31.280
Actually, between IP and, let's say, a session layer.

01:02:31.280 --> 01:02:36.280
Everything there is subject to IETF approval.

01:02:36.280 --> 01:02:40.280
And they publish official documents that are called RFCs.

01:02:40.280 --> 01:02:44.280
Funny enough, it stands for request for comments.

01:02:44.280 --> 01:02:46.280
But it's not really request for comments.

01:02:46.280 --> 01:02:48.280
It's usually an internet standard.

01:02:48.280 --> 01:02:49.280
Okay?

01:02:49.280 --> 01:02:52.280
So, Kerberos has an internet standard.

01:02:52.280 --> 01:02:55.280
If you go look, RFC, Kerberos, you'll find it.

01:02:55.280 --> 01:02:58.280
It tells you exactly how Kerberos works.

01:02:58.280 --> 01:03:03.280
If you look at IP, V6, for example, it has V4.

01:03:03.280 --> 01:03:04.280
They all have RFCs.

01:03:04.280 --> 01:03:06.280
And they tell you exactly how IP works.

01:03:06.280 --> 01:03:13.280
Which means that if you follow the standard, you can implement that protocol, that format,

01:03:13.280 --> 01:03:16.280
in whatever language you want, in whatever platform you want.

01:03:16.280 --> 01:03:20.280
From a smart toaster to a supercomputer.

01:03:20.280 --> 01:03:22.280
And they will be able to interoperate.

01:03:22.280 --> 01:03:24.280
If you implement correctly.

01:03:24.280 --> 01:03:25.280
Okay?

01:03:25.280 --> 01:03:27.280
So, Kerberos is a standard.

01:03:27.280 --> 01:03:29.280
So is SSL TLS.

01:03:29.280 --> 01:03:32.280
And so is that inside.

01:03:32.280 --> 01:03:34.280
All right.

01:03:34.280 --> 01:03:35.280
So, history.

01:03:35.280 --> 01:03:38.280
SSL goes back to the 90s.

01:03:38.280 --> 01:03:41.280
I remember version 2.

01:03:41.280 --> 01:03:43.280
It was like late 90s.

01:03:43.280 --> 01:03:47.280
Version 3 is what we kind of use today.

01:03:47.280 --> 01:03:48.280
Right?

01:03:48.280 --> 01:03:50.280
Because version 3 is essentially TLS.

01:03:50.280 --> 01:03:54.280
Don't ask me why they switched the names from SSL to TLS.

01:03:54.280 --> 01:03:57.280
It had something to do with trademark dispute.

01:03:57.280 --> 01:03:58.280
Okay?

01:03:58.280 --> 01:04:01.280
But there is an RFC 22.6.

01:04:01.280 --> 01:04:11.280
So if you just search on RFC 22.46, you will find a very detailed specification of SSL.

01:04:11.280 --> 01:04:12.280
Sorry, TLS.

01:04:12.280 --> 01:04:16.280
And if you want to look at the open sources limitation, there are many.

01:04:16.280 --> 01:04:18.280
The most popular one is this, open SSL.

01:04:18.280 --> 01:04:19.280
Okay?

01:04:19.280 --> 01:04:22.280
It also implements a lot of crypto stuff.

01:04:22.280 --> 01:04:27.280
So if you're ever dealing with crypto stuff, and you want to dig, and you should not be

01:04:27.280 --> 01:04:31.280
baking anything on your own, because you will mess up royally.

01:04:31.280 --> 01:04:33.280
You should use that.

01:04:33.280 --> 01:04:35.280
Because it's been around for a long time.

01:04:35.280 --> 01:04:39.280
And although occasionally there are bugs, there are fewer bugs in that library than there

01:04:39.280 --> 01:04:42.280
are in most others.

01:04:42.280 --> 01:04:46.280
So, SSL TLS, you secure it in the transport layer.

01:04:46.280 --> 01:04:49.280
It sits just above TCP.

01:04:49.280 --> 01:04:50.280
Okay?

01:04:50.280 --> 01:04:56.280
Although these days, there are also to sell versions for UDP, but we will not do something

01:04:56.280 --> 01:04:57.280
else.

01:04:57.280 --> 01:04:59.280
That's a separate topic.

01:04:59.280 --> 01:05:02.280
So, think about TCP.

01:05:02.280 --> 01:05:06.280
Everybody knows transaction control protocol, transmission control protocol, depending on

01:05:06.280 --> 01:05:07.280
who you ask.

01:05:07.280 --> 01:05:09.280
On top of it, it's going to be TLSSL.

01:05:09.280 --> 01:05:10.280
It's optional.

01:05:10.280 --> 01:05:12.280
It's not always present.

01:05:12.280 --> 01:05:13.280
Okay?

01:05:13.280 --> 01:05:15.280
But it's secure socket, right?

01:05:15.280 --> 01:05:22.280
That's where on top of TCP you have sockets.

01:05:22.280 --> 01:05:23.280
Okay?

01:05:23.280 --> 01:05:32.280
If you want to TLSSize your applications, like with parameters, you need to change them.

01:05:32.280 --> 01:05:33.280
Okay?

01:05:33.280 --> 01:05:38.280
Now it says here, because originally it is worth my slides, that it's a thin layer between

01:05:38.280 --> 01:05:39.280
TCP and HTTP.

01:05:39.280 --> 01:05:40.280
That's not actually true.

01:05:40.280 --> 01:05:42.280
It's not just for HTTP.

01:05:42.280 --> 01:05:50.280
Yes, most things that use, or the biggest user of TLS is the HTTP protocol.

01:05:50.280 --> 01:05:51.280
Okay?

01:05:51.280 --> 01:05:57.280
So whenever you have HTTPS, right, and you see HTTPS in your browser window, you are using

01:05:57.280 --> 01:05:58.280
SSL.

01:05:58.280 --> 01:06:02.280
Or if you use some godforsaken browser, maybe they'll have like some little lock symbol,

01:06:02.280 --> 01:06:05.280
like they used two years ago, instead of HTTPS.

01:06:05.280 --> 01:06:07.280
So that might not be spelled out.

01:06:07.280 --> 01:06:13.280
But if you see a lock symbol or HTTPS explicitly, of course, you are using TLSS.

01:06:13.280 --> 01:06:19.280
It comes with support, right?

01:06:19.280 --> 01:06:28.280
So most reputable browsers, clients, and of course, HTTP servers come with SSL TLS support.

01:06:28.280 --> 01:06:30.280
So it's built in.

01:06:30.280 --> 01:06:34.280
There are two layers in the TLS SSL.

01:06:34.280 --> 01:06:37.280
The layers should not be confused with particles.

01:06:37.280 --> 01:06:38.280
Okay?

01:06:38.280 --> 01:06:42.280
There is called the record layer for just transmitting packets.

01:06:42.280 --> 01:06:43.280
Okay?

01:06:43.280 --> 01:06:47.280
And the upper layer where you do what's called protocols, right?

01:06:47.280 --> 01:06:56.280
And basically record layer is just treating one SSL segment or packet at a time.

01:06:56.280 --> 01:06:59.280
And at the upper layer, you do all this kind of management.

01:06:59.280 --> 01:07:01.280
You will see what I mean in a second.

01:07:01.280 --> 01:07:04.280
So it kind of looks like this.

01:07:04.280 --> 01:07:05.280
Okay?

01:07:05.280 --> 01:07:09.280
So you have this TCP and you have SSL record protocol.

01:07:09.280 --> 01:07:12.280
And then on top, you have these other protocols.

01:07:12.280 --> 01:07:13.280
Okay?

01:07:13.280 --> 01:07:16.280
So it looks weird, I understand.

01:07:16.280 --> 01:07:22.280
Because HTTP, you see HTTP is shown as being on top of the record layer.

01:07:22.280 --> 01:07:27.280
And SSL itself, as the N-shaped protocol, is shown at the same layer.

01:07:27.280 --> 01:07:31.280
Well, it doesn't make sense yet, but it will.

01:07:31.280 --> 01:07:41.280
So you just read this.

01:07:41.280 --> 01:07:46.280
My throat is getting raspy.

01:07:46.280 --> 01:08:05.280
In some ways, you will see some of the same concepts as you saw in Termverse, but SSL TLS is not a symmetric, sorry, it's not using symmetric cryptography throughout.

01:08:05.280 --> 01:08:18.280
It uses, like many other products or software, it uses public cryptography initially to establish, to help establish the secure connection between the client browser.

01:08:18.280 --> 01:08:21.280
I say that because that's the biggest application.

01:08:21.280 --> 01:08:24.280
But keep in mind, SSL TLS is not just for browsing.

01:08:24.280 --> 01:08:25.280
Okay?

01:08:25.280 --> 01:08:30.280
But I will use browsing as an episode between your client browser and the web server on the other end of the world.

01:08:30.280 --> 01:08:31.280
All right?

01:08:31.280 --> 01:08:39.280
It's using public cryptography to establish, just in the very beginning, it minimizes, in fact, the use of public cryptography, but it does not avoid it.

01:08:39.280 --> 01:08:40.280
Okay?

01:08:40.280 --> 01:08:46.280
And once the initial connection is established, public cryptography is no longer used.

01:08:46.280 --> 01:08:47.280
All right?

01:08:47.280 --> 01:08:52.280
So, but there's no trusted third party.

01:08:52.280 --> 01:08:53.280
Okay?

01:08:53.280 --> 01:08:59.280
No KVC, no AS, no TGS.

01:08:59.280 --> 01:09:03.280
There's just a big, bad world out there.

01:09:03.280 --> 01:09:04.280
Okay?

01:09:04.280 --> 01:09:09.280
Where innocent little clients talk to potentially dangerous servers.

01:09:09.280 --> 01:09:10.280
All right.

01:09:10.280 --> 01:09:23.280
Let's look at the actual protocol.

01:09:23.280 --> 01:09:24.280
Okay.

01:09:24.280 --> 01:09:27.280
So, we're going to use terminology client and server.

01:09:27.280 --> 01:09:32.280
So, I know it's a little bit confusing, but it's actually not because if you think in Kerberos, client and server, where?

01:09:32.280 --> 01:09:35.280
Well, user and client and server.

01:09:35.280 --> 01:09:36.280
So, here are two.

01:09:36.280 --> 01:09:39.280
We just don't have KDC, AS, TGS anymore.

01:09:39.280 --> 01:09:42.280
Let's see.

01:09:42.280 --> 01:09:51.280
In TLS SSL, 99.9% of the time, only the server is authenticated.

01:09:51.280 --> 01:09:52.280
Okay?

01:09:52.280 --> 01:09:55.280
So, that's the philosophy also that is different from Kerberos.

01:09:55.280 --> 01:09:57.280
Only the web server, right?

01:09:57.280 --> 01:09:58.280
Think of the web.

01:09:58.280 --> 01:10:01.280
Only the web server is authenticated.

01:10:01.280 --> 01:10:06.280
Have you ever, has anybody ever seen mutual authentication in CSL TLS?

01:10:06.280 --> 01:10:09.280
Assuming you know what I mean.

01:10:09.280 --> 01:10:10.280
No?

01:10:10.280 --> 01:10:14.280
I've seen it twice, three times in the last one year.

01:10:14.280 --> 01:10:26.280
So, TLS does support mutual authentication, but generally does not do it because it actually has little justification.

01:10:26.280 --> 01:10:27.280
And the reason is like this.

01:10:27.280 --> 01:10:41.280
When you are sitting in front of your browser and you type in or paste a URL, think about what happens, right?

01:10:41.280 --> 01:10:44.280
Something gets parsed by your request.

01:10:44.280 --> 01:10:50.280
And there's like three parts really to, well, four parts to the URL.

01:10:50.280 --> 01:10:54.280
There's the protocol identifier, which is the first part, right?

01:10:54.280 --> 01:10:56.280
Doesn't have to be HTTP, by the way.

01:10:56.280 --> 01:10:57.280
But usually it is, right?

01:10:57.280 --> 01:10:58.280
SSL is HTTP, yes.

01:10:58.280 --> 01:10:59.280
Then there's like delimiters.

01:10:59.280 --> 01:11:00.280
Then there's something called the domain name.

01:11:00.280 --> 01:11:01.280
Right?

01:11:01.280 --> 01:11:15.280
It's actually an address, sorry, a host name or a name that can be used to resolve to, you

01:11:15.280 --> 01:11:16.280
know, be resolved by DNS, right?

01:11:16.280 --> 01:11:17.280
Domain name service to produce an IP address.

01:11:17.280 --> 01:11:22.280
So it actually refers to an entity.

01:11:22.280 --> 01:11:24.280
And what follows it?

01:11:24.280 --> 01:11:27.280
There's a slash what?

01:11:27.280 --> 01:11:34.280
What happens after www.uci.edu slash what?

01:11:34.280 --> 01:11:35.280
Maybe nothing.

01:11:35.280 --> 01:11:38.280
Maybe nothing, right?

01:11:38.280 --> 01:11:40.280
Well, wait.

01:11:40.280 --> 01:11:42.280
The domain name is where you want to go.

01:11:42.280 --> 01:11:43.280
What's after that?

01:11:43.280 --> 01:11:44.280
What is it called?

01:11:44.280 --> 01:11:45.280
Path.

01:11:45.280 --> 01:11:46.280
Path, yes.

01:11:46.280 --> 01:11:47.280
It's the path.

01:11:47.280 --> 01:11:48.280
It looks like a Unix path, right?

01:11:48.280 --> 01:11:49.280
It might even be.

01:11:49.280 --> 01:11:50.280
It doesn't have to be.

01:11:50.280 --> 01:11:51.280
Could be interpreted differently, but could be a Unix path, right?

01:11:51.280 --> 01:12:07.280
Like go to that machine, go to that web server, that physical host, and go slash, et cetera,

01:12:07.280 --> 01:12:09.280
slash password, blah, okay?

01:12:09.280 --> 01:12:12.280
And then what?

01:12:12.280 --> 01:12:16.280
And then there might be another component after that.

01:12:16.280 --> 01:12:17.280
Yeah.

01:12:17.280 --> 01:12:18.280
Frequently overloaded.

01:12:18.280 --> 01:12:22.280
That's why you see these URLs that spread for miles.

01:12:22.280 --> 01:12:30.280
Right, so what are we concerned with when we browse the web?

01:12:30.280 --> 01:12:31.280
Fishing?

01:12:31.280 --> 01:12:32.280
Squatting?

01:12:32.280 --> 01:12:35.280
Anybody know about squatting?

01:12:35.280 --> 01:12:36.280
Mistyping?

01:12:36.280 --> 01:12:41.280
You mistyped one letter or one number in the URL and suddenly you are in a God knows where?

01:12:41.280 --> 01:12:42.280
Might pretend?

01:12:42.280 --> 01:12:48.280
Yeah, you type wellsbargo.com and you might wind up in a site that looks like Wells Fargo,

01:12:48.280 --> 01:12:50.280
but it ain't.

01:12:50.280 --> 01:12:58.280
And here you are entering your username and password and your account is toast within minutes.

01:12:58.280 --> 01:13:04.280
Without SSL TLS, it would be.

01:13:04.280 --> 01:13:12.280
So, what's important for you, the user, for us all, is to go to the right website, right?

01:13:12.280 --> 01:13:16.280
When we click on the bookmarks, a lot of times smart people, right?

01:13:16.280 --> 01:13:17.280
People care.

01:13:17.280 --> 01:13:23.280
If they go to particular websites more often than once or regularly, they'll put them in bookmarks.

01:13:23.280 --> 01:13:24.280
So, you click on the website, right?

01:13:24.280 --> 01:13:25.280
You don't actually enter it, right?

01:13:25.280 --> 01:13:30.280
How often do we actually enter it?

01:13:30.280 --> 01:13:33.280
Yeah, basically, enter it.

01:13:33.280 --> 01:13:38.280
So, we're concerned with the authenticity of the website.

01:13:38.280 --> 01:13:40.280
There's no human there, usually, right?

01:13:40.280 --> 01:13:41.280
It's a website.

01:13:41.280 --> 01:13:43.280
There's no human on the other side.

01:13:43.280 --> 01:13:44.280
There's no Bob.

01:13:44.280 --> 01:13:45.280
Right?

01:13:45.280 --> 01:13:46.280
It's a website.

01:13:46.280 --> 01:13:50.280
So, we want to make sure we're going to the right website, the authentic website.

01:13:50.280 --> 01:13:55.280
That's why the website authenticating to us, to our browser, is important.

01:13:55.280 --> 01:14:00.280
How important is this to authenticate us to the service?

01:14:00.280 --> 01:14:07.280
Well, yeah, this is like a social network or another bank where you have an account, yeah?

01:14:07.280 --> 01:14:08.280
Clearly.

01:14:08.280 --> 01:14:09.280
Yes?

01:14:09.280 --> 01:14:11.280
It's important.

01:14:11.280 --> 01:14:14.280
But does your browser know how to authenticate as you?

01:14:14.280 --> 01:14:15.280
No.

01:14:15.280 --> 01:14:16.280
No.

01:14:16.280 --> 01:14:21.280
You authenticate the human using a password, a PIN, an MFA, or something like that.

01:14:21.280 --> 01:14:22.280
A YubiKey.

01:14:22.280 --> 01:14:30.280
So, client, the real client to web server authentication happens at a higher level, or higher level.

01:14:30.280 --> 01:14:31.280
Userless.

01:14:31.280 --> 01:14:34.280
For the client, stay outside, please.

01:14:34.280 --> 01:14:40.280
For the client, it doesn't make sense to authenticate to the server, the same way the

01:14:40.280 --> 01:14:41.280
server authenticate the client.

01:14:41.280 --> 01:14:47.280
Moreover, a lot of web servers we use don't have user accounts, or at least don't require.

01:14:47.280 --> 01:14:52.280
If I go to WWCIDU, I'm going to require an account.

01:14:52.280 --> 01:14:53.280
Does it say you log in?

01:14:53.280 --> 01:14:54.280
No.

01:14:54.280 --> 01:14:55.280
There's a lot of public information out there.

01:14:55.280 --> 01:15:01.280
If I go to WWWhiteHouse.gov, a lot of public info.

01:15:01.280 --> 01:15:09.280
But I care that I go to WWWhiteHouse.gov, not WWWhiteHouse.com, because that used to be a porn site.

01:15:09.280 --> 01:15:10.280
I don't know what it is now.

01:15:10.280 --> 01:15:14.280
So, yeah, I want to make sure I go to the right place.

01:15:14.280 --> 01:15:15.280
Right?

01:15:15.280 --> 01:15:23.280
And so, UCI.edu, not UCI.org, which is United Cycling International, which exists.

01:15:23.280 --> 01:15:25.280
That's the other UCI.

01:15:25.280 --> 01:15:31.280
So, what I've said, that justifies the reason why SSL is so leaning on the security of web

01:15:31.280 --> 01:15:34.280
servers and much less concerned with the web client.

01:15:34.280 --> 01:15:35.280
Okay.

01:15:35.280 --> 01:15:37.280
See you Tuesday.

01:16:04.280 --> 01:16:05.280
I was wondering.

01:16:05.280 --> 01:16:06.280
Yeah.

01:16:06.280 --> 01:16:07.280
What did you decide?

01:16:07.280 --> 01:16:08.280
It's T8, no?

01:16:08.280 --> 01:16:09.280
Oh.

01:16:09.280 --> 01:16:10.280
It's T8.

01:16:10.280 --> 01:16:11.280
So, he asked the professor.

01:16:11.280 --> 01:16:12.280
That's the thing.

01:16:12.280 --> 01:16:13.280
Yeah.

01:16:13.280 --> 01:16:14.280
Last week.

01:16:14.280 --> 01:16:15.280
Yeah.

01:16:15.280 --> 01:16:16.280
Yeah.

01:16:16.280 --> 01:16:17.280
Oh, yeah.

01:16:17.280 --> 01:16:18.280
Right there.

01:16:18.280 --> 01:16:19.280
Yeah.

01:16:19.280 --> 01:16:21.280
Don't worry about it.

01:16:21.280 --> 01:16:22.280
You know.

01:16:22.280 --> 01:16:25.280
It's not their responsibility to worry about it.

01:16:25.280 --> 01:16:26.280
Okay.

01:16:26.280 --> 01:16:27.280
They're responsible.

01:16:27.280 --> 01:16:28.280
You know.

01:16:28.280 --> 01:16:29.280
Okay.

01:16:29.280 --> 01:16:30.280
They're responsible for funding.

01:16:30.280 --> 01:16:33.280
Because you have an awful lot of the states that are getting this.

01:16:33.280 --> 01:16:34.280
Yeah.

01:16:34.280 --> 01:16:35.280
But it is .

01:16:35.280 --> 01:16:36.280
Oh.

01:16:36.280 --> 01:16:37.280
Sorry.

01:16:37.280 --> 01:16:39.280
I didn't manage to pay attention to that.

01:16:39.280 --> 01:16:40.280
Oh.

01:16:40.280 --> 01:16:41.280
Yes, it is.

01:16:41.280 --> 01:16:42.280
You know.

01:16:42.280 --> 01:16:43.280
It's fine.

01:16:43.280 --> 01:16:44.280
Disprint's fine.

01:16:44.280 --> 01:16:45.280
I have WeChat.

01:16:45.280 --> 01:16:46.280
Oh, WeChat is easy.

01:16:46.280 --> 01:16:47.280
Yeah.

01:16:47.280 --> 01:16:50.280
I've used it for your projects before.

01:16:50.280 --> 01:16:51.280
Yeah.

01:16:51.280 --> 01:16:52.280
Okay.

01:16:52.280 --> 01:16:53.280
Let me .

01:16:53.280 --> 01:16:54.280
Yeah.

01:16:54.280 --> 01:16:55.280
Okay.

01:16:55.280 --> 01:16:56.280
Hey.

01:16:56.280 --> 01:16:57.280
You.

01:16:57.280 --> 01:16:58.280
You.

01:16:58.280 --> 01:16:59.280
You.

01:16:59.280 --> 01:17:00.280
Yeah.

01:17:00.280 --> 01:17:01.280
These are the two suspects that you want to work with?

01:17:01.280 --> 01:17:02.280
Yeah.

01:17:02.280 --> 01:17:03.280
Yeah.

01:17:03.280 --> 01:17:06.280
And figure out how you're going to make your project more substantial.

01:17:06.280 --> 01:17:07.280
Right?

01:17:07.280 --> 01:17:09.280
Now you have a trio rather than a duo.

01:17:09.280 --> 01:17:10.280
Okay?

01:17:10.280 --> 01:17:11.280
Right.

01:17:11.280 --> 01:17:12.280
Okay.

01:17:12.280 --> 01:17:13.280
All right.

01:17:13.280 --> 01:17:14.280
But.

01:17:14.280 --> 01:17:15.280
No.

01:17:15.280 --> 01:17:16.280
What I want is an actual update.

01:17:16.280 --> 01:17:17.280
So.

01:17:17.280 --> 01:17:18.280
Kind of like extend your proposal.

01:17:18.280 --> 01:17:19.280
ASAP.

01:17:19.280 --> 01:17:20.280
You know.

01:17:20.280 --> 01:17:21.280
Take you into account.

01:17:21.280 --> 01:17:22.280
Like.

01:17:22.280 --> 01:17:23.280
You know what I'm saying?

01:17:23.280 --> 01:17:24.280
No?

01:17:24.280 --> 01:17:25.280
Yeah.

01:17:25.280 --> 01:17:26.280
They send me a proposal.

01:17:26.280 --> 01:17:27.280
You are not part of it.

01:17:27.280 --> 01:17:28.280
Yeah.

01:17:28.280 --> 01:17:29.280
That's what I'm trying to do.

01:17:29.280 --> 01:17:30.280
Yeah.

01:17:30.280 --> 01:17:31.280
Now that there's you.

01:17:31.280 --> 01:17:32.280
There's more.

01:17:32.280 --> 01:17:33.280
It has to be done.

01:17:33.280 --> 01:17:34.280
Yeah.

01:17:34.280 --> 01:17:35.280
Okay.

01:17:35.280 --> 01:17:36.280
Right?

01:17:36.280 --> 01:17:37.280
You don't get them.

01:17:37.280 --> 01:17:38.280
You don't get a free bath.

01:17:38.280 --> 01:17:39.280
Yeah.

01:17:39.280 --> 01:17:40.280
Yeah.

01:17:40.280 --> 01:17:41.280
Yeah.

01:17:41.280 --> 01:17:42.280
So basically that's all I want.

01:17:42.280 --> 01:17:43.280
真的很 quick.

01:17:43.280 --> 01:17:45.280
So please like to let it go.

01:17:45.280 --> 01:17:46.280
Do it at number.

01:17:46.280 --> 01:17:47.280
Come on.

01:17:47.280 --> 01:17:48.280
Do it at number it Er.

01:17:48.280 --> 01:17:49.280
Good.

01:17:49.280 --> 01:17:50.280
Ummm.

01:17:50.280 --> 01:17:51.280
Yeah.

01:17:51.280 --> 01:17:52.280
I'd actually bring it over.

01:17:52.280 --> 01:17:53.280
The disc…

01:17:53.280 --> 01:17:54.280
Why don't you guys.

01:17:54.280 --> 01:17:55.280
Why don't you pop them up?

01:17:55.280 --> 01:17:56.280
No I don't.

01:17:56.280 --> 01:17:58.280
I don't want them on.

01:17:58.280 --> 01:17:59.280
They're doing so…

01:17:59.280 --> 01:18:01.280
damn it I don't showing them…

01:18:01.280 --> 01:18:02.280
…

01:18:03.280 --> 01:18:04.280
…

01:18:04.280 --> 01:18:05.280
…

01:18:05.280 --> 01:18:10.280
…

01:18:10.280 --> 01:18:40.260
Thank you.

01:18:40.280 --> 01:19:10.260
Thank you.

01:19:10.280 --> 01:19:40.260
Thank you.


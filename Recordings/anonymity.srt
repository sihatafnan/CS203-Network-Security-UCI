1
00:00:00,000 --> 00:00:07,320
right there's this single trusted benevolent mix that basically well

2
00:00:07,320 --> 00:00:14,460
batches and mixes all this traffic right and of course if only one person sends

3
00:00:14,460 --> 00:00:20,580
an email and only one person receives right it's clear who sent and who received

4
00:00:20,580 --> 00:00:28,880
if the adversary can observe all the links that are incident to the mix right

5
00:00:28,880 --> 00:00:41,540
that clear but anonymity loves company the more people use the mix the better

6
00:00:41,540 --> 00:00:48,500
right so popularity is good because the more traffic more people send mail then

7
00:00:48,500 --> 00:00:52,760
it's very difficult to map it the more difficult becomes to map incoming

8
00:00:52,760 --> 00:01:00,080
messages into outgoing messages okay even if you have like even in the worst case

9
00:01:00,080 --> 00:01:04,640
like a one sender right but if that one sender sends a lot of mail to different

10
00:01:04,640 --> 00:01:11,060
recipients even then mix can help because it can mix those messages and it would

11
00:01:11,060 --> 00:01:15,200
be difficult to see at what time did this sender send mail to this particular

12
00:01:15,200 --> 00:01:19,640
destination okay so you still get a little bit of help even if there's only one

13
00:01:19,640 --> 00:01:24,080
sender but of course in the real world you want mix to be heavily used by lots of

14
00:01:24,080 --> 00:01:26,400
people

15
00:01:32,400 --> 00:01:41,420
right so how do you reply if you send an anonymous mail message right previous

16
00:01:41,420 --> 00:01:48,560
slide really showed you how to do that right Alice knows Bob's address Alice

17
00:01:48,560 --> 00:01:53,000
encrypts a message for Bob obtains Bob's public key from some directory

18
00:01:53,000 --> 00:01:59,320
right here's Alice you know she knows Bob's public key she knows that Bob's

19
00:01:59,320 --> 00:02:05,000
existence otherwise why would she send email right so she has a secret message to send

20
00:02:05,000 --> 00:02:11,360
it and she doesn't want anybody to observe the fact that she sent a message to Bob but

21
00:02:11,360 --> 00:02:17,720
that's fine for one-way communication okay for example this is a whistleblower

22
00:02:17,720 --> 00:02:26,180
reporting on some abuse but what if this is a conversation what if Bob now needs to

23
00:02:26,180 --> 00:02:32,000
reply this doesn't solve that problem right there's no reply here because when Bob

24
00:02:32,000 --> 00:02:36,960
receives the message he doesn't know who sent it unless Alice explicitly tells him

25
00:02:36,960 --> 00:02:43,340
inside the message that she did but otherwise it's just a message destined for Bob from

26
00:02:43,340 --> 00:02:57,800
someone now how does Bob reply to that someone without knowing who that someone is so

27
00:02:57,800 --> 00:03:04,800
same idea as before right same idea Alice sends a message to Bob for the minute but now the message that

28
00:03:04,800 --> 00:03:13,260
Alice prepares has format has some structure inside that message well there's actual text whatever she wants to send

29
00:03:13,260 --> 00:03:20,720
but there is a preamble that has this stuff in pink all right there is that a key

30
00:03:20,720 --> 00:03:29,760
symmetric chosen by Alice at random Alice's name in this case she doesn't mind telling him

31
00:03:29,760 --> 00:03:38,220
I'm sorry sorry in Alice's name but it only cryptic under the public key of a mix so

32
00:03:38,220 --> 00:03:48,180
actually Bob won't find out who Alice is in this case now if you your eyesight is good you will see if it says

33
00:03:48,180 --> 00:03:58,140
it says mix try because Alice for the return correspondence for return email could choose a different mix

34
00:03:58,140 --> 00:04:08,420
doesn't have to be the same mix that she used on the way to Bob okay same idea but this she may choose a different

35
00:04:08,420 --> 00:04:22,380
right right and then k2 okay and k2 is a fresh public key okay and sorry k1 is a fresh public key and mix mix

36
00:04:22,380 --> 00:04:34,380
and he says prime is possibly different doesn't have to be the same thing

37
00:04:34,380 --> 00:04:40,920
so now how does uh how does Bob reply so the first message follows that first blue

38
00:04:40,920 --> 00:04:46,980
arrow second blue arrow just like in a previous slide the same thing the mix does the same thing

39
00:04:46,980 --> 00:04:51,540
I mean of course I don't show you other people who send mail right so of course you assume there's other

40
00:04:51,540 --> 00:04:57,300
people so but I'm just focusing on the communication between Alice and Bob so that's the message as

41
00:04:57,300 --> 00:05:05,760
before what's what makes sense to Bob is uh pretty much the same thing except Bob now knows that inside

42
00:05:05,760 --> 00:05:19,740
m there is that magenta part mk2 okay and so the reply message from Bob that has a different format

43
00:05:19,740 --> 00:05:25,500
it doesn't have the same format okay it's not it doesn't have the same format as the original

44
00:05:25,500 --> 00:05:35,740
initial message from Alice the reply message has two parts the pink part and that's taken verbatim from

45
00:05:35,740 --> 00:05:45,340
inside the message and the black part which is a you know the m prime that that message that that bob wants to

46
00:05:45,340 --> 00:05:52,220
reply to ask right he wants to say something back and that message doesn't need to have any structure

47
00:05:53,420 --> 00:06:00,140
it's just a message i'm proud and all that is encrypted on the k2 that's a public key

48
00:06:00,140 --> 00:06:08,220
so far so good

49
00:06:13,180 --> 00:06:19,020
so the mix knowing that this is the return message it treats returning messages or reply messages

50
00:06:19,020 --> 00:06:24,780
differently from the forward going messages right he knows that this message has two parts

51
00:06:24,780 --> 00:06:31,420
so what it does it decrypts this pink part right because it's encrypted with its public key

52
00:06:32,540 --> 00:06:36,940
and inside the pink part he sees a and a key k1

53
00:06:39,340 --> 00:06:43,980
and what he does and he does what he's instructed to do which means he takes

54
00:06:45,180 --> 00:06:50,940
k1 and takes r2 m prime the black part over there encrypts it with k1

55
00:06:50,940 --> 00:06:58,460
k1 is a symmetric key k2 is a public key okay so this is a symmetric encryption

56
00:06:59,260 --> 00:07:03,340
and addresses this to a so this a is visible in the clear text

57
00:07:07,580 --> 00:07:08,140
make sense

58
00:07:10,300 --> 00:07:16,060
so a gets it a knows k1 because she generated it originally

59
00:07:16,060 --> 00:07:25,180
okay okay she will decrypt the outer encryption and then because she also generated k2 right

60
00:07:25,180 --> 00:07:30,540
she knows the corresponding private key to decrypt this encryption so she will obtain him

61
00:07:34,060 --> 00:07:44,140
so what is this here right this is an anonymous two-way channel between alice and bob alice knows

62
00:07:44,140 --> 00:07:47,980
who bob is right somebody needs to know this in the beginning

63
00:07:49,580 --> 00:07:54,380
otherwise what's the point of communication but bob does not know who alice is

64
00:07:57,500 --> 00:08:01,020
just he knows it's someone but he doesn't know who

65
00:08:04,300 --> 00:08:09,100
so what is this good for well you know many types of interactions right

66
00:08:09,100 --> 00:08:17,100
like uh whistleblowing right it's also great for confession

67
00:08:19,180 --> 00:08:24,780
you want to make an anonymous confession kind of like certain religions allow you to go to a

68
00:08:25,420 --> 00:08:33,020
temple church and anonymously right go into a booth you've seen it in the movies and you have done

69
00:08:33,020 --> 00:08:39,820
yourself you go into a booth and there's a partition it's a dark little booth and you sit on a little

70
00:08:39,820 --> 00:08:48,300
leg there's a partition there's a mesh you know there's a person on the other side you can see the

71
00:08:48,300 --> 00:08:54,540
silhouette maybe but you don't know who they are and that person more importantly does not know who you

72
00:08:54,540 --> 00:08:59,900
are but generally they confess the person making the confession knows that it's a priest

73
00:09:00,700 --> 00:09:07,900
or some kind of other religious character right because when you go to church and make a confession

74
00:09:07,900 --> 00:09:13,420
generally not who the priests are in the church but the priest does not know who you are right

75
00:09:14,380 --> 00:09:17,020
ideally in the physical world

76
00:09:19,580 --> 00:09:24,460
not likely they probably know because you know they can open the door after confession see who walks out

77
00:09:24,460 --> 00:09:31,580
or they can recognize the person by voice right or by what they're confessing okay so but in the physical

78
00:09:31,580 --> 00:09:39,020
world we know how this works right so this is can be done much better in this world alice says i want to

79
00:09:39,020 --> 00:09:48,380
send a confession to bob bob is a religious character person who like a cleric she confesses her sins and

80
00:09:48,380 --> 00:09:55,340
she gets enough solutions back and bob learns nothing about alice other than her sins

81
00:09:57,900 --> 00:10:02,380
nope not compelling to all i'm sure there are other applications you can think about

82
00:10:03,500 --> 00:10:05,180
okay any questions

83
00:10:07,580 --> 00:10:15,820
fine now why would you want to rely on one mix one mix is nice because you're just wild you don't need to

84
00:10:15,820 --> 00:10:20,620
you know create any kind of big infrastructure you just dedicate a huge computing power

85
00:10:21,180 --> 00:10:27,100
and storage power to this giant mix and you presume that some benevolent entity runs it and it can never

86
00:10:27,100 --> 00:10:33,660
be hacked because boy if it can be hacked you know bad things will happen but what if you didn't want to

87
00:10:33,660 --> 00:10:39,900
rely on one single point of failure because the other problem is that if the mix just like goes down

88
00:10:39,900 --> 00:10:48,140
or subject to a massive denial of service attack well then the buy anonymous mail uh but more importantly

89
00:10:48,140 --> 00:10:56,220
it's difficult to find one entity one organization that will run a global mix so for that reason one

90
00:10:56,780 --> 00:11:01,820
what child that same character that designed this thing and back in the early 80s suggested using what's

91
00:11:01,820 --> 00:11:07,340
called a mixed cascade or a mixed network this is basically what the word suggests right it's just

92
00:11:07,340 --> 00:11:15,420
a sequence of mixes and generally operated by different entities like one operated by an electronic

93
00:11:15,420 --> 00:11:23,420
frontiers foundation one by aclu one by you know uh say the whales and one by you know icelandic whale

94
00:11:23,420 --> 00:11:28,780
hunters i don't know and whatever whatever whatever so mutually like suspicious entities but they're all

95
00:11:28,780 --> 00:11:34,620
interested in operating at least one of those so you can imagine them sending your messages through not

96
00:11:34,620 --> 00:11:43,500
one but one but several okay one immediate benefit is that that first mix is compromised or controlled

97
00:11:43,500 --> 00:11:52,860
by the adversary you're still okay because the second mix is now in fact even if both here the first and

98
00:11:52,860 --> 00:11:58,060
the last are controlled by the adversary you're still okay because the middle mix is not controlled by the

99
00:11:58,060 --> 00:12:07,660
others and because mail is by its very nature not a real time not a synchronous protocol right it's

100
00:12:07,660 --> 00:12:15,500
what's called stored and forward in other words asynchronous meaning that you do not expect mail to arrive

101
00:12:15,500 --> 00:12:23,580
the second you sent it yes yes we do sometimes we do when we wait for those second factor

102
00:12:23,580 --> 00:12:30,220
one-time code notifications right we expect email to arrive very quickly and sometimes it doesn't

103
00:12:30,220 --> 00:12:37,260
because it gives you no guarantees okay text messages that's another story right what's up text etc

104
00:12:37,260 --> 00:12:43,660
they usually try to make things very fast and they don't guarantee but you assume that things unless

105
00:12:43,660 --> 00:12:49,180
you are disconnected from the internet or cellular network you expect uh like these kind of instant

106
00:12:49,180 --> 00:12:56,140
messages right with sms apple i message what's up signal telegram etc they arrive quick but email

107
00:12:56,140 --> 00:13:05,900
makes no guarantees because it is stored and forward yes so if that one mix in the middle is still honest

108
00:13:05,900 --> 00:13:13,260
well you can mix enough messages to cause confusion essentially prevent the compromise or the adversarially

109
00:13:13,260 --> 00:13:20,700
control basis from learning who is sending messages to whom right in other words it will try to foil

110
00:13:20,700 --> 00:13:24,860
this correlation attack which incoming message corresponds to which outgoing message

111
00:13:30,860 --> 00:13:33,660
but as you can imagine

112
00:13:33,660 --> 00:13:44,140
there's a lot of overhead here okay because public key encryption especially like the layer because

113
00:13:44,140 --> 00:13:53,100
what we need to do in a mixed cascade you solve it you do it with one mix right this but if you have

114
00:13:53,100 --> 00:14:00,380
multiple mixes you see those encryptions that have that alice and charlie and david perform here

115
00:14:00,380 --> 00:14:07,180
here well if you hop through three mixes then each message needs to be encrypted three times

116
00:14:10,300 --> 00:14:16,380
which is expensive it's expensive for senders but it's also expensive for mixes now they have to

117
00:14:16,380 --> 00:14:17,500
that they have to decrypt

118
00:14:17,500 --> 00:14:31,980
and so it's expensive and high latency is encouraged because well as i said messages are not instantaneous but

119
00:14:31,980 --> 00:14:40,620
still even for something like email latency can be high because every mix on the path to the destination

120
00:14:41,420 --> 00:14:52,140
needs to batch enough incoming messages to mix them right if it's if a mix receives and sends immediately

121
00:14:53,660 --> 00:15:01,180
that's not very good right because anyone eavesdropping on that mix will see a correlation between incoming and outgoing message

122
00:15:02,380 --> 00:15:06,540
so that's the whole point is that there isn't mixing right now there are other things you can do

123
00:15:06,540 --> 00:15:15,500
i mentioned earlier that you can uh generate spurious traffic meaning chaff right garbage

124
00:15:16,220 --> 00:15:20,780
you confuse the needs dropping out your certain stuff that looks like it's an encrypted message

125
00:15:20,780 --> 00:15:25,500
but in fact when they make when they're receiving mix decrypt it you realize the garbage throws away

126
00:15:27,020 --> 00:15:32,460
so every mix could always generate a lot of that kind of chaff but that's expensive too

127
00:15:32,460 --> 00:15:37,660
and generating is not but receiving it is expensive because you have to decrypt try to decrypt it

128
00:15:38,540 --> 00:15:46,860
in order to realize it's got it so in uh today's world uh mix nets are still useful

129
00:15:47,660 --> 00:15:53,900
somewhat and there are um actually operational mix nets out there that you can use

130
00:15:53,900 --> 00:16:07,260
uh even for free but they're not very popular okay most people today want anonymity for other things

131
00:16:07,900 --> 00:16:15,980
and primarily they want anonymity for web browsing okay not so much from watching movies but because they

132
00:16:15,980 --> 00:16:22,140
are small but even for watching movies sometimes right accessing let's say uh well everybody's favorite

133
00:16:22,140 --> 00:16:28,380
of course is porn but then there is like streaming services that uh are not always accessible from

134
00:16:28,380 --> 00:16:34,620
where you are or being on your local provider does not allow you to connect to some let's say streaming

135
00:16:34,620 --> 00:16:39,980
services so people often want to use an anonymous communication for that purpose okay

136
00:16:42,300 --> 00:16:49,500
so if you're a whistleblower or something like that email is fine right if you want to send an anonymous

137
00:16:49,500 --> 00:16:54,860
denunciation message and complain about something you know it's fine to use anonymous mail but if you want

138
00:16:54,860 --> 00:17:03,260
to browse the web if you want to use uh a remote terminal right like a remote login you can't use makes that

139
00:17:03,900 --> 00:17:15,740
too slow right so today that the preeminent uh means of anonymous communication on the internet is torn

140
00:17:15,740 --> 00:17:28,060
the onion browser and uh basically it works like this so pretty much all anonymous communication methods for

141
00:17:28,780 --> 00:17:35,020
low latency or synchronous traffic what that is they use public key cryptography kind of like makes it but

142
00:17:35,020 --> 00:17:41,340
only in the beginning and so they use it to establish what's called a circuit the virtual circuit

143
00:17:41,340 --> 00:17:49,900
for a sequence of anonymous routers for a sequence of anonymous routers and then once the circuit is

144
00:17:49,900 --> 00:17:56,940
established the traffic the bulk traffic flows through that circuit but no longer using uh public

145
00:17:56,940 --> 00:18:06,300
key control it then uses symmetric which is much cheaper make sense all right so you pay a cost to start

146
00:18:06,300 --> 00:18:12,620
anybody here ever use a tor browser or any tor application yeah so you know that when you start it

147
00:18:13,500 --> 00:18:20,140
there's a delay right why is there a delay exactly because your core browser is probably as

148
00:18:20,140 --> 00:18:23,900
any of you modify any configurations on the program so you just use the default

149
00:18:26,300 --> 00:18:31,820
okay use the default but the default is i think three pops right if i remember correctly

150
00:18:31,820 --> 00:18:39,500
one well i'll tell you more about it but essentially it has to pick three routers from some directory

151
00:18:39,500 --> 00:18:45,900
which we'll talk about later and it has to establish these public key based initially circuits through

152
00:18:45,900 --> 00:18:50,700
those three routers and once you establish a circuit it will tell you on your browser right

153
00:18:51,580 --> 00:18:57,900
connection established right remember that when you start to store browser it says connection established

154
00:18:57,900 --> 00:19:03,260
then when you when you type in a website or click on something it's reasonably fast right it's not terrible

155
00:19:04,780 --> 00:19:09,260
not terrible slower than your normal graph for sure but it's not terrible

156
00:19:10,780 --> 00:19:15,260
okay and that's another connection and it doesn't matter how many websites you go to

157
00:19:15,260 --> 00:19:21,500
you're probably using the same circuit unless you specifically call for like there's an option say

158
00:19:21,500 --> 00:19:27,260
new tor circuit for this website and if you just use a default no matter how many websites you go to

159
00:19:27,260 --> 00:19:37,020
it goes for one circuit okay and so at every hop in that circuit there is encryption there's decryption and

160
00:19:37,020 --> 00:19:43,820
re-encryption decryption and re-encryption why because just like in the next example if anybody is

161
00:19:43,820 --> 00:19:50,780
listening eavesdropping on our on an anonymous router sees what comes in what comes out they should not be

162
00:19:50,780 --> 00:19:59,500
able to correlate incoming to outgoing okay but if you listen to be careful you might be wondering how

163
00:19:59,500 --> 00:20:09,500
is it that asynchronous communication right how do we can't delay it right so he comes in and out comes

164
00:20:09,500 --> 00:20:14,460
in and out you must must do so right cannot be sitting there waiting for enough other traffic right

165
00:20:14,460 --> 00:20:21,100
so that's that's that if you're thinking about that that would be an interesting issue an interesting

166
00:20:21,100 --> 00:20:27,420
question so the way that these routers work is they also rely on many simultaneous connections

167
00:20:29,740 --> 00:20:37,100
that is many users using every single router and if many users are using every single router or

168
00:20:37,100 --> 00:20:42,300
synchronous communication browsing the web we won't log in whatever then there's always packets coming

169
00:20:42,300 --> 00:20:50,620
into that router so in other words it does not retard them or mix them in any way it tries to process

170
00:20:50,620 --> 00:20:57,900
it as fast as possible but it but the way that it achieves a lack of correlation between incoming and outgoing

171
00:20:57,900 --> 00:21:03,340
traffic is by expecting to receive a lot of stuff okay

172
00:21:03,340 --> 00:21:21,500
so the design of uh under routing goes back to mid to late 70s 90s and there's a it's kind of a seminal

173
00:21:21,500 --> 00:21:28,940
paper called uh by under routers by beat cyberson galschlag and uh basically it's it's what you expect

174
00:21:29,580 --> 00:21:38,060
you have a set of routers represented by circles here some of those routers are malicious

175
00:21:39,180 --> 00:21:48,140
untrustworthy okay and some are transporting but you don't know which ones okay so you as a

176
00:21:49,180 --> 00:21:54,940
some as as alice a user who wants to use a design of routing you just pick three

177
00:21:54,940 --> 00:22:03,580
out of the set some directory of anonymous routers in this case r1 r2 r4 sorry r1 and 2 r3 r4 sorry

178
00:22:03,580 --> 00:22:12,220
four hops here and uh the pink ones of these r's are just regular routers you didn't pick the red one

179
00:22:12,220 --> 00:22:17,260
the red circles represent the ones that are uh controlled by the address so you also it so happened

180
00:22:18,140 --> 00:22:26,300
alice obviously did not know this but it so happens that r3 is malicious so she sets up her circuit

181
00:22:27,980 --> 00:22:33,980
and she can't know which ones are malicious which ones are not all she expects is that at least one

182
00:22:35,660 --> 00:22:36,860
is not malicious

183
00:22:36,860 --> 00:22:44,140
okay of course alice controls the length she could say you know i just want to go for one router it

184
00:22:44,140 --> 00:22:48,620
it would be stupid kind of not recommended or she can say i want to go for 10. that's all stuff

185
00:22:48,620 --> 00:22:54,460
done you could configure uh core to get on any other one in routing you need to go for as many

186
00:22:54,460 --> 00:23:00,460
routers as you want the more you go through the slower your connection will be clearly because

187
00:23:00,460 --> 00:23:10,460
only routing is not routing in the internet sense of the world remember we talked about bgb and like internet routing

188
00:23:14,060 --> 00:23:18,780
nobody has any recollection there was a full system reset since then

189
00:23:20,700 --> 00:23:28,780
new version of software was installed no uh remember routing for ip right when i say routing here i don't

190
00:23:28,780 --> 00:23:35,660
mean that that that onion routing works at the application level so you install like a software

191
00:23:35,660 --> 00:23:41,660
package and it does this kind of routing it's essentially what's called an overlay right everybody

192
00:23:41,660 --> 00:23:48,860
heard that word before it's an overlay so it runs way above id okay and one of the reasons it does so is

193
00:23:48,860 --> 00:23:54,780
because if you want community participation right they strengthen numbers the more onion runners that there

194
00:23:54,780 --> 00:24:03,340
the better you don't need to have good people just to run an application program make sense so you

195
00:24:03,340 --> 00:24:09,100
can install tor and on let's say you don't want to start in your laptop that would be really foolish

196
00:24:10,060 --> 00:24:18,940
for many reasons but if you have a desktop machine not in student house they'll they'll crack down on you

197
00:24:18,940 --> 00:24:26,140
like immediately uh they monitor that stuff but if you have i don't know in your home off campus or your

198
00:24:26,140 --> 00:24:32,060
parents home or whatever you have a desktop machine or at least a laptop that's pretty powerful you can

199
00:24:32,060 --> 00:24:43,660
install tor yourself and become a tor relay or tor router not difficult right clearly you'll be sacrificing

200
00:24:43,660 --> 00:24:50,540
something right so your your your device will slow down not right away because actually tor routers are

201
00:24:50,540 --> 00:24:55,420
not trusted right away because if you're a newbie nobody trusts you very little by little it's reputation

202
00:24:55,420 --> 00:25:03,420
based anyway back to our regular schedule broadcast so you control the power and uh that's pretty much

203
00:25:03,420 --> 00:25:10,780
it how onion routing works but why is it called an onion routing is it because it's smelly spicy

204
00:25:10,780 --> 00:25:15,820
edible any idea

205
00:25:18,540 --> 00:25:23,100
layers layers of encryption layers

206
00:25:25,500 --> 00:25:31,900
because if you go through four routers here and alice has to hop for one one or two or three or four

207
00:25:31,900 --> 00:25:41,180
four she better encrypt whatever message she sends first in our fourth public key then in our fourth key

208
00:25:41,980 --> 00:25:53,100
then on top of that r3 key r2 key r1 key okay then she sends message to r1 r1 peels off the outermost layer

209
00:25:53,100 --> 00:25:58,860
you see why onion then okay good

210
00:26:04,380 --> 00:26:05,340
better illustration

211
00:26:07,980 --> 00:26:15,660
now this is around establishment but this is uh hypothetical only this is with public key this is not

212
00:26:15,660 --> 00:26:25,420
how four works this is how it works it it's a good illustration of uh uh on your right so here is a message

213
00:26:27,020 --> 00:26:33,740
that alice wants to send to bob that message is encrypted under bob's public key

214
00:26:33,740 --> 00:26:44,700
why well because eventually that message should reach r4 and r4 is what's called exit node right

215
00:26:44,700 --> 00:26:50,620
exit the network the overlay network and so if you don't encrypt it then the message will be in clear

216
00:26:50,620 --> 00:27:00,620
text right arriving to bob sometimes may be okay but generally not a good idea so next layer see here

217
00:27:00,620 --> 00:27:13,660
k4 that message on the public key is encrypted with k4 what is k4 the message sorry the key that alice shares with r4

218
00:27:17,580 --> 00:27:26,060
the last part what is this here this part that right is encrypted on the public key of our board

219
00:27:26,060 --> 00:27:34,460
okay okay and it contains k4 okay and it contains k4 so this is a little bit this is like a header to do

220
00:27:34,460 --> 00:27:45,100
a little header and this is the actual body so let's follow again then all that that up blob gets encrypted

221
00:27:45,100 --> 00:27:55,580
out with k3 but k3 itself with r4 is here okay and so on and so on so it's one two

222
00:27:56,060 --> 00:27:59,180
three four five layers of encryption

223
00:28:07,500 --> 00:28:17,980
okay so let's remember animation here yeah okay so let's consider this to be the big onion big fat onion

224
00:28:17,980 --> 00:28:19,100
five layers of encryption

225
00:28:22,300 --> 00:28:28,620
alice sends it to r1 r1 removes that layer you see why because r1 sees this

226
00:28:29,420 --> 00:28:41,900
he decrypt this he decrypt this with his private key learns r2 learns k1 okay now he's gonna decrypt

227
00:28:43,500 --> 00:28:46,300
that k1 get rid of this encryption

228
00:28:48,780 --> 00:28:50,460
okay and send it to r2

229
00:28:53,500 --> 00:28:53,820
bam

230
00:28:53,820 --> 00:29:09,420
okay okay r2 decrypts this with his private key finds r3 and k2 and now decrypts the rest of the message

231
00:29:09,420 --> 00:29:17,020
with k2 so the onion gets smaller bam okay r3

232
00:29:17,020 --> 00:29:28,460
r3 well same thing right rinse repeat bam r4 and bob receives the innermost message

233
00:29:30,060 --> 00:29:36,940
now yeah the r3 is still adversarial right it's still an adversary controlling it but what does the

234
00:29:36,940 --> 00:29:37,740
adversary learn

235
00:29:37,740 --> 00:29:51,500
when r2 who is honest processes the message sends it to r3 r3 receives it and sees what he might know

236
00:29:51,500 --> 00:29:57,660
who forwarded it he probably does it's r2 forwarded it he knows they received it from r2 and he knows the

237
00:29:57,660 --> 00:30:03,260
next top is r4 does he know that r4 is the last top you know

238
00:30:03,260 --> 00:30:14,860
r2 maybe maybe not so all he learns all the adversary learns is that okay uh i received it from r2

239
00:30:16,460 --> 00:30:17,900
and i'm sending it to r4

240
00:30:20,220 --> 00:30:20,540
so

241
00:30:22,940 --> 00:30:32,060
right you see that still doesn't learn anything useful now if it was r1 that was uh adversarial

242
00:30:33,260 --> 00:30:39,340
right if r1 was malicious instead of r3 then r1 would learn that alice is sending a message to

243
00:30:39,340 --> 00:30:44,220
somebody and the next top is r2 but that's it

244
00:30:46,940 --> 00:30:52,140
the adversary could control r1 of course would know that he's an m3 node the first top

245
00:30:55,420 --> 00:31:02,700
if the adversary controls controls r2 instead of r3 exactly the same situation as r3

246
00:31:04,220 --> 00:31:08,540
knows the previous top does the next top does not know if he's first or last

247
00:31:09,740 --> 00:31:15,420
if the adversary controls r4 he knows he's last he knows he's last because the next destination is not

248
00:31:15,420 --> 00:31:17,980
an onion runner okay

249
00:31:20,300 --> 00:31:24,940
but he doesn't know how many hops before and he doesn't know where it comes from of course

250
00:31:25,580 --> 00:31:33,900
so tor today doesn't quite work like that that was how it used to be

251
00:31:35,420 --> 00:31:38,460
uh it's what's called second generation

252
00:31:38,460 --> 00:31:43,500
on the routing network uh first generation used what we saw before

253
00:31:43,500 --> 00:31:53,260
uh this one uses what's called a telescopic round setup okay uh i'll explain what that means uh if you

254
00:31:53,260 --> 00:32:01,580
want to read about it download stuff uh from uh related to tor it has uh plugins it has uh

255
00:32:01,580 --> 00:32:14,140
uh the the the self-standing tor browser that there are apps for um ios and android uh all kinds of uh

256
00:32:14,140 --> 00:32:21,420
notebook so there's plenty of platforms supported by tor okay so if you want to use it doesn't matter

257
00:32:21,420 --> 00:32:32,540
what device you can always install um it is designed for anonymous low latency communication and it's

258
00:32:32,540 --> 00:32:41,340
been running since 2003 it's quite a long time and there have been many attacks but there have been few

259
00:32:41,340 --> 00:32:46,940
successful actually no no real successful attacks on tor this is not that i've heard of and that would

260
00:32:46,940 --> 00:32:55,180
have been probably publicized well if there had been um there are thousands of tor nodes like maybe

261
00:32:55,180 --> 00:33:03,740
10 000 tor nodes worldwide there are hundreds on every continent uh there are as of three years ago

262
00:33:03,740 --> 00:33:10,140
between three to four million regular users now regular users are people who use for like daily basis

263
00:33:11,180 --> 00:33:16,620
there are surveys done um but there are probably 10 times as many occasional users

264
00:33:16,620 --> 00:33:25,820
um it is easy to use actually i don't know i wouldn't even use quotes it is reasonably easy to use if

265
00:33:25,820 --> 00:33:32,140
you just take the default if you want to dig into the guts and configure it yourself you could also shoot

266
00:33:32,140 --> 00:33:39,340
yourself in the foot by doing something silly or you could slow it you could slow yourself down tremendously so

267
00:33:39,340 --> 00:33:43,500
most people just leave it deep there are situations when

268
00:33:43,500 --> 00:33:55,100
uh you go to certain countries that uh don't like anonymous communication and they will block tor

269
00:33:57,020 --> 00:34:01,020
okay and so in those countries you need to use what's called door bridges

270
00:34:01,820 --> 00:34:09,820
which is additional like very temporary relays for relays that are too short-lived to be blacklisted

271
00:34:10,540 --> 00:34:15,260
by the authorities so i've been in that situation myself in countries where

272
00:34:16,780 --> 00:34:24,220
let's say freedom is a little tough to come by and then the tool works right you just need to use

273
00:34:24,220 --> 00:34:30,860
what's called bridges and it slows it down all right so the proxies plugins it's free it's great

274
00:34:30,860 --> 00:34:36,940
uh the only piece of software that i will advertise in this class if you are ever want to do anything

275
00:34:36,940 --> 00:34:43,500
i don't understand how does it work well it it is still kind of an onion network

276
00:34:44,700 --> 00:34:52,780
and it imagines all these uh multitude of uh tor nodes right onto these properties now because it's an

277
00:34:52,780 --> 00:35:00,700
overlay right it does not correspond to geography or internet connectivity you see what i'm saying

278
00:35:01,820 --> 00:35:09,180
what overlay means is that overlay is essentially an any to any network that's why you see lines drawn

279
00:35:09,180 --> 00:35:12,940
into a different light so these are virtual connections virtual lines these are not physical

280
00:35:13,500 --> 00:35:17,420
lines obviously right it's not like this node is connected to this node there could be like they could be

281
00:35:17,420 --> 00:35:26,140
a different content but logically they can communicate directly because of the application of layer

282
00:35:27,500 --> 00:35:31,020
so the client alice who uses tor

283
00:35:31,020 --> 00:35:40,780
in order in order to set up a circuit she picks today three nodes the default so she picks the first

284
00:35:40,780 --> 00:35:50,140
entry node and she establishes a connection and that connection is established because you public it

285
00:35:52,220 --> 00:35:58,220
okay public it because she well i'll show you later but there's a directory of tor nodes that is the

286
00:35:58,220 --> 00:36:03,980
download from the distribution from the software distribution side as a directory and you select

287
00:36:04,780 --> 00:36:08,700
the tornadoes the three tornadoes you want to use randomly from that directory

288
00:36:10,940 --> 00:36:16,460
and so one of them will be the first and it could be very far away from you or it could be very close

289
00:36:17,820 --> 00:36:24,860
doesn't really matter so you establish a tor connection right a direct connection between here and there

290
00:36:24,860 --> 00:36:32,220
so think of it as a kind of an asset if it helps you think about it as like a tls on ip set connection

291
00:36:32,220 --> 00:36:37,980
like a pipe secure pipe but it's not that the network layer or or or session it's at the application

292
00:36:38,860 --> 00:36:49,020
okay so anybody who observes this right who is dropping on alice here will know that she's connecting to some tor

293
00:36:49,020 --> 00:37:05,580
or no no no right somewhere but they cannot see the traffic now the second hop right the second router

294
00:37:05,580 --> 00:37:11,740
alice is going to use the already established connection the the red line as a kind of a secure

295
00:37:11,740 --> 00:37:18,940
pipe for which to insert an extension to the second round that's why it's called

296
00:37:18,940 --> 00:37:24,700
telescopic telescopic like like a you know like an antenna that you stretch out an old-fashioned

297
00:37:24,700 --> 00:37:30,460
old-fashioned radio tv kind of like that or old-fashioned pointer that you start position

298
00:37:32,860 --> 00:37:37,820
so she basically does this so the second

299
00:37:37,820 --> 00:37:47,260
one

300
00:37:49,740 --> 00:37:52,140
router two i think i'm missing the router two here

301
00:37:53,580 --> 00:37:58,060
oops so anyway the point is i'll just get so she uses

302
00:37:59,900 --> 00:38:05,500
the green key you see protects well the green key corresponds to the security of this connection

303
00:38:05,500 --> 00:38:13,580
here okay the magenta key is the second connection that is established and through this now to this

304
00:38:13,580 --> 00:38:22,700
second half and then the green key sorry this mustard the brown color key is the one that is used to

305
00:38:22,700 --> 00:38:31,500
establish through here to this so they are like one inside the other right the only the first connection

306
00:38:31,500 --> 00:38:40,540
is established directly from alice all the others are established through other nodes and then you see

307
00:38:40,540 --> 00:38:48,140
those red things going to two different places and why because once a tor circuit is established

308
00:38:48,940 --> 00:38:55,580
you can use it for many sessions like on the web it doesn't it doesn't be used just on the web but mainly

309
00:38:55,580 --> 00:39:02,140
it's used for the web so if you're using tor browser you could have two different tabs or two different

310
00:39:02,140 --> 00:39:10,620
windows and one could be going on to cnn.com and one could be going to whitehouse.gov it's the same tor

311
00:39:10,620 --> 00:39:16,140
circuit right that's carrying traffic from all and it's only demultiplexed here

312
00:39:16,140 --> 00:39:21,580
and the last hop or exit does that make sense

313
00:39:24,300 --> 00:39:26,940
the telescopic nature of the route is attached

314
00:39:29,580 --> 00:39:29,820
no

315
00:39:33,420 --> 00:39:35,420
yes i'm sure

316
00:39:35,420 --> 00:39:47,580
but once the route is established that packets are encrypted and re-encrypted additionally right so

317
00:39:50,060 --> 00:39:57,100
alice encrypts here it's decrypted re-encrypted so in here decrypted re-encrypted here decrypted re-encrypted

318
00:39:57,740 --> 00:39:59,820
boom destination

319
00:39:59,820 --> 00:40:11,100
so what does the adversary see if the adversary is there while yoni i can say before sees that alice

320
00:40:11,100 --> 00:40:17,420
is talking to a tor node right so uh the adversary might be able to decide if the adversary looks at

321
00:40:17,420 --> 00:40:26,220
the ip address of the of that node right that yellow node with which that is uh the first hop because

322
00:40:26,220 --> 00:40:30,460
the adversary can also download tor and look at the directory and say ah this is a tor node

323
00:40:32,140 --> 00:40:33,980
okay yeah

324
00:40:38,220 --> 00:40:42,940
yeah there's denial of services i mean tor nodes can come down i mean it's a power object

325
00:40:43,580 --> 00:40:47,660
yeah you just reestablish a server for a different set of nodes

326
00:40:48,380 --> 00:40:51,660
but you don't know that the message didn't get delivered

327
00:40:52,220 --> 00:40:57,820
you have no idea but it doesn't matter because i mean this is your graph like if you're browsing

328
00:40:57,820 --> 00:41:03,420
the web it just the pre-establish connection wait a few more seconds be all right i mean yes there is

329
00:41:03,420 --> 00:41:09,740
a tor node can always be performed analysis yeah it can drop back well in that case your connection

330
00:41:09,740 --> 00:41:13,420
will be unstable you can just always click on like new tor circuit

331
00:41:13,420 --> 00:41:22,460
if the adversary is here all you learn is that it's in the middle of the tor connection so between

332
00:41:22,460 --> 00:41:30,060
two tor routers and uh that's all so somebody is using tor but there's no idea who or how many people

333
00:41:30,060 --> 00:41:39,420
are here same thing here is the worst part right because here if especially if alice does not include

334
00:41:39,420 --> 00:41:45,500
it right for bob this would be a problem because that would actually reveal that it's out right

335
00:41:46,780 --> 00:41:52,620
like if there's some kind of a web form right the post an http post where she fills in the name and

336
00:41:52,620 --> 00:41:59,820
address right so obviously if you're using like tor browser you should be using only https

337
00:41:59,820 --> 00:42:04,700
right right right or tls ssl right

338
00:42:07,980 --> 00:42:14,860
well you can use http but then you don't enter any information okay you have to make sure not to enter

339
00:42:14,860 --> 00:42:15,420
any information

340
00:42:19,660 --> 00:42:26,540
so as i said before many applications can share one circuit uh that's also true but you know if you're

341
00:42:26,540 --> 00:42:31,820
using different applications not just web browsing then it's a little difficult right so maybe on the

342
00:42:31,820 --> 00:42:38,860
on the phone that's more possible uh tor router as i said doesn't have root privileges so any one of you

343
00:42:38,860 --> 00:42:45,500
any one of us can install a tor router and register it in uh in a directory there's a slow reputation

344
00:42:45,500 --> 00:42:51,900
building process you won't be used right away but after a while you know if you if you basically

345
00:42:51,900 --> 00:42:59,260
reputation is based on like where you are what your speed is like performance and also like uh what

346
00:42:59,260 --> 00:43:04,300
is your hours of operation like are you reliable you 24 hours are you only available at night so on

347
00:43:04,300 --> 00:43:11,980
some some routers have restrictions on timing uh directory service so this is

348
00:43:13,420 --> 00:43:17,180
a bit of an issue right so you need to know who the tor routers are

349
00:43:17,180 --> 00:43:25,420
and um today there is this foundation right the electronic frontiers foundation which is a

350
00:43:25,420 --> 00:43:31,660
a non-profit organization that essentially kind of like it's a little bit like aclu but it's not a

351
00:43:31,660 --> 00:43:37,820
it's not a legal defense fund i mean like aclu it's really just about privacy like supposed to promote

352
00:43:38,780 --> 00:43:44,620
the right to privacy right so it's all about it's not only about privacy but if you go to efr.org you can

353
00:43:44,620 --> 00:43:51,580
read all on your own uh they also distribute torn right so the door is mainly distributed through

354
00:43:51,580 --> 00:43:56,460
that website it's like if you want to get chrome you go to google right if you want to get tor you go

355
00:43:56,460 --> 00:44:02,380
here um you want to get firefox you go to mozilla right you don't go somewhere you know to some other

356
00:44:02,380 --> 00:44:10,460
place so it is one place so if somebody mounts an attack against dff that would be a problem

357
00:44:11,180 --> 00:44:20,060
um directory servers right identities and and keys public keys of the of the of the routers and uh and

358
00:44:20,060 --> 00:44:30,140
sorry let me let me back up sorry the routers are identified by some ids and ip addresses and

359
00:44:31,900 --> 00:44:36,620
the way you found out about find out about short routers is from what's called port directory

360
00:44:36,620 --> 00:44:44,540
servers and these are special nodes that its only purpose is to provide the directory of tor routers

361
00:44:45,420 --> 00:44:49,980
now why does the ff not do it because the population changes it's too dynamic right so the directory

362
00:44:49,980 --> 00:44:57,420
servers are supposed to maintain up-to-date lists of like reputation ranked uh tor routers there are not

363
00:44:57,420 --> 00:45:03,100
that many there are some i guess thousands of these directories but here's the pov the point of

364
00:45:03,100 --> 00:45:11,100
vulnerability if somebody hacks directory servers and compromising those keys it's possible to poison

365
00:45:11,100 --> 00:45:19,980
the directory and distribute identities of tor routers that are malicious so if some let's say state level

366
00:45:19,980 --> 00:45:29,100
actor decides to mount us for a civil attack and creates hundreds of malicious tor routers and introduces

367
00:45:29,100 --> 00:45:35,900
them into a compromised directory tor will fold and will be a major problem it hasn't happened yet

368
00:45:35,900 --> 00:45:40,540
but it could happen and that's it that's the main uh issue with tor

369
00:45:44,060 --> 00:45:49,100
now tor also allows you for something very nifty or very dangerous depending on the point of view

370
00:45:49,100 --> 00:46:04,060
you anybody heard of this one person used it or just heard of it it's okay listen i won't i won't i won't tell

371
00:46:05,900 --> 00:46:12,620
uh so location hidden services you'll see why they're locking in a minute um so you wanted to you want to

372
00:46:12,620 --> 00:46:22,620
deploy a service on the internet right without a which offers a service of some sort maybe it's a digital

373
00:46:22,620 --> 00:46:30,540
service maybe it's a conversation service maybe it's a service that sells physical goods like analog

374
00:46:32,460 --> 00:46:37,180
but you don't want anybody to know who you are and you don't want anybody to know where it is

375
00:46:37,180 --> 00:46:51,820
it could be that this is an information service for example you live in an oppressive society and you

376
00:46:51,820 --> 00:47:00,380
want to publish something as a service that is uh like a subversive in its nature goes against the

377
00:47:00,380 --> 00:47:08,540
regime and of course the regime wants to silence you and censor you but if they cannot know if they

378
00:47:08,540 --> 00:47:15,180
cannot know where you are they cannot censor you right they can't find you they can't do anything

379
00:47:15,980 --> 00:47:21,420
so it's not just for selling stuff all right it's also for publishing stuff

380
00:47:23,820 --> 00:47:28,380
so there was a infamous marketplace called the silk road anybody remember it no

381
00:47:28,380 --> 00:47:40,620
it was an example a mega example of a of a hidden service on on tour

382
00:47:42,940 --> 00:47:47,980
so the idea about not silver but in general hidden services they should be accessible from anywhere

383
00:47:48,620 --> 00:47:55,820
resistant to censorship survivable against like even a full-blown denial of service and resistance to

384
00:47:55,820 --> 00:48:00,380
the physical attacks because if you don't know where it is you get physically damaging or harm

385
00:48:03,020 --> 00:48:07,580
so silk road was uh yeah this is actually a uh a screenshot

386
00:48:12,460 --> 00:48:17,020
this is some years ago but yeah uh you see lots of good stuff beautiful good

387
00:48:17,020 --> 00:48:25,660
draft paraphernalia electronics probably stolen uh apparel computer equipment likely stolen too

388
00:48:25,660 --> 00:48:31,820
psychedelic stimulants opioids ecstasy cannabis cannabis not exactly like they

389
00:48:32,620 --> 00:48:39,820
drugs lots of different drugs right so uh yeah good stuff all right even pictures

390
00:48:45,660 --> 00:48:50,300
so how do you create a location hidden server right so how do you how do you make this happen

391
00:48:50,300 --> 00:48:56,380
if you want something like this you want an enterprising person uh so you let's say your name is bob and

392
00:48:56,380 --> 00:49:05,420
you want to serve set this up so you use uh tor right to create these kind of uh uh let's call them

393
00:49:05,420 --> 00:49:10,860
semi-permanent circuits tor circuits so you need to have a stable connection to the internet right

394
00:49:11,980 --> 00:49:16,300
that's that's that's important and you need to set up these by the way tor does not

395
00:49:16,300 --> 00:49:22,620
uh i don't believe it dictates how long the connections can last so you can keep the connection

396
00:49:22,620 --> 00:49:28,220
up it stays right so you set up in this case three different connections to one tor service

397
00:49:29,100 --> 00:49:36,460
three different tor circuits to three different places okay called introduction points and these are

398
00:49:36,460 --> 00:49:41,420
themselves uh services they're computers somewhere they could also be tor routers themselves

399
00:49:41,420 --> 00:49:47,820
okay but in general that they don't have to right so these are just like some computers somewhere

400
00:49:47,820 --> 00:49:54,140
that grants them software that will quite fresh so you set up these semi-permanent software

401
00:49:56,620 --> 00:50:00,940
step one okay then

402
00:50:11,420 --> 00:50:24,940
step one okay you're not seeing what i want you to see

403
00:50:24,940 --> 00:50:46,860
yeah what you're not seeing here is that now once these once these things are set up the server bob

404
00:50:47,500 --> 00:50:52,780
gives these descriptors what's called that they're called dot onion addresses have anybody ever seen

405
00:50:52,780 --> 00:51:00,620
dot onion addresses that's hidden service if you ever encountered a url that has a dot onion that's a tor

406
00:51:00,620 --> 00:51:09,340
hidden server uh so this is done in the beginning only right so the server the server bob gives to this

407
00:51:10,140 --> 00:51:16,780
lookup service lookup directory which is a well-known detective place on tor uh the description right points for

408
00:51:16,780 --> 00:51:24,220
these introduction so they're essentially a bunch of x digits with dot onion so i have a random looking

409
00:51:24,220 --> 00:51:29,660
addresses with dot onion at the end and they are published in this directory which you don't see

410
00:51:29,660 --> 00:51:36,620
then you also don't see i don't know why because it looks fine on my laptop there's client alice here in that

411
00:51:36,620 --> 00:51:44,460
white box and alice she looks at this this public directory of our service descriptor and says oh

412
00:51:44,460 --> 00:51:57,260
oh ecstasy cheap i'm going to buy some ecstasy i'm going to rain yo okay so she gets the address of those

413
00:51:57,260 --> 00:51:59,980
interpoids that's one of those dot onion addresses

414
00:51:59,980 --> 00:52:14,940
okay what you don't see is she also ah this is maddening she sets up another circuit to something

415
00:52:14,940 --> 00:52:21,580
called a rendezvous point which you don't see don't see here okay that's point four there is a she picks

416
00:52:21,580 --> 00:52:27,740
just like just like bob picked introduction point she picks some other place on the tor network and she

417
00:52:27,740 --> 00:52:36,700
calls it a rendezvous point rendezvous and sets up a four circuit there okay so this is in real time

418
00:52:36,700 --> 00:52:43,100
right she looked up the service directory fished out an introduction point address for bob's ecstasy

419
00:52:43,100 --> 00:52:49,580
selling service and then she creates the four circuit to a day rendezvous point which you do not see

420
00:52:51,580 --> 00:52:57,420
that's step four step five once that rendezvous point circuit is set up she sends the

421
00:52:57,420 --> 00:53:04,300
address of the address of the rendezvous point okay to one of bob's introduction points

422
00:53:06,380 --> 00:53:11,500
you following me don't look so much at the picture just try to because it's not it's missing some of the

423
00:53:11,500 --> 00:53:12,780
graphics that it's supposed to show

424
00:53:16,780 --> 00:53:20,060
okay so far so good now the introduction point

425
00:53:20,060 --> 00:53:32,140
informs bob yo you have a customer potential customer bob wake up bob says i don't work in these hours so

426
00:53:32,140 --> 00:53:40,620
he might say no way not interested uh or if he's interested to perform the service he

427
00:53:42,540 --> 00:53:47,020
he basically connects to the rendezvous point which you don't see that's the end of the blue arrow there

428
00:53:47,020 --> 00:53:54,700
should be a rendezvous point there just imagine but you see what's happening now so the rendezvous

429
00:53:54,700 --> 00:54:01,980
point which you don't see matches bob's incoming that blue circuit with alice's

430
00:54:03,180 --> 00:54:08,220
circuit that she previously established again you don't see it right and says oh this

431
00:54:08,220 --> 00:54:15,500
thing that somebody she doesn't know the rendezvous point doesn't know it's alice this thing from the

432
00:54:15,500 --> 00:54:24,380
buyer or from the user matches this thing from the service and she you know connects the two okay

433
00:54:25,020 --> 00:54:34,140
so now you have essentially two tour circuits one from serve above to the rendezvous point and one from

434
00:54:34,140 --> 00:54:42,860
client alice to the rendezvous point make sense again don't believe the lying guys don't look at that picture

435
00:54:45,100 --> 00:54:48,620
so you have a concatenation of two tour circuits managed by that random point

436
00:54:49,340 --> 00:54:52,700
and now the transaction can proceed okay

437
00:54:52,700 --> 00:55:02,540
and this is the ross umbrick that was the guy i mean i guess he moved then he doesn't look so happy today

438
00:55:03,500 --> 00:55:08,460
he spent time in federal prison until our president recently pardoned him

439
00:55:10,140 --> 00:55:16,860
but yeah that guy ross umbrick was the operator of the of the uh so-called marketplace and was arrested

440
00:55:16,860 --> 00:55:21,420
from 2013 and i think a couple of years later was convinced convicted and sent to federal jail

441
00:55:21,980 --> 00:55:27,740
um it's a nifty operation you you could also what you didn't see there you could also buy murder for

442
00:55:27,740 --> 00:55:34,780
hire yeah you can get somebody's like busted kneecaps puncture tires anything lighter than murder too

443
00:55:34,780 --> 00:55:41,500
but murders are fine uh nobody knows how many were bought and sold through that uh so throughout the site

444
00:55:41,500 --> 00:55:51,340
um one of the interesting uh uh posters there is that nobody knows really how it was how he was

445
00:55:51,340 --> 00:55:58,860
trapped right because it's a it's a hidden service right so it wasn't torn at least most people in the

446
00:55:58,860 --> 00:56:03,820
security community believe that it was not a weakness of tor that the federal government despite all of its

447
00:56:03,820 --> 00:56:09,580
power could not penetrate tor partly because they have no jurisdiction over torn notes overseas outside the

448
00:56:09,580 --> 00:56:18,620
united states right no jurisdiction whatsoever uh so there are three speakers only the last one makes

449
00:56:18,620 --> 00:56:24,060
sense makes more sense there was a package of peccadees from canada that was traced to an apartment in

450
00:56:24,060 --> 00:56:31,900
san francisco where he lived that was one theory there was a fake uh murder for hire that was arranged by

451
00:56:31,900 --> 00:56:39,500
law enforcement and apparently trapped him again no no proof for that more likely the last one

452
00:56:40,140 --> 00:56:48,380
familiar with stack overflow right so somebody accidentally under the name olbrick ross olbrick posted a

453
00:56:48,380 --> 00:56:48,780
question

454
00:56:51,580 --> 00:56:57,580
before like way before how can i connect to a torn hidden services in curling php and then a few

455
00:56:57,580 --> 00:57:02,060
seconds later they changed the name because realized he'll you know revealed his real name change the name to

456
00:57:02,060 --> 00:57:11,900
frosty too late right stuck uh you know stack overflow like elephants never forgets so somebody took a

457
00:57:11,900 --> 00:57:18,940
snapshot of that oh yeah and uh this last bit helped the encryption key of the server ends with

458
00:57:18,940 --> 00:57:28,540
substrate frosty a frosty so that's another catch right uh tor is not the only thing out there but by far

459
00:57:28,540 --> 00:57:36,460
the most popular there are others uh pre-handed has an excellent biography biography that you can read if

460
00:57:36,460 --> 00:57:43,500
you're interested in the field mixed minion mix master still exists uh but they're not very popular i mean you can use them

461
00:57:43,500 --> 00:57:50,700
there they're they're mostly uh they're quite slow right but they're different so slightly different

462
00:57:50,700 --> 00:57:58,620
interpretations of the challenge mixed cascade okay now let's see quickly i'm going to show you something

463
00:57:58,620 --> 00:58:05,740
that is a bit out in the left field uh there's pure cryptography or at least on the surface so the idea

464
00:58:05,740 --> 00:58:11,580
here is to show you that how to achieve the best anonymity possible like not relying on anything else

465
00:58:11,580 --> 00:58:17,500
and the idea is a little crazy and it's also due to the same person ciao that crazy guy from the 80s

466
00:58:19,100 --> 00:58:26,700
and it's called dining cryptography problem okay so but the idea behind it is to do this how to send a

467
00:58:26,700 --> 00:58:35,980
message in a message in a group without right without any kind of transibility you want to reveal a

468
00:58:35,980 --> 00:58:42,060
message send a message in a group let's say like our group here but nobody knows who sent the message

469
00:58:44,140 --> 00:58:52,220
okay imagine that so this paper from 1988 shows how to do it and they they kind of really interesting

470
00:58:52,220 --> 00:58:56,780
part about it is what's called information theoretic anonymity it gives you this information

471
00:58:56,780 --> 00:59:01,500
theoretic anonymity meaning that it's not based on any mathematical problem it's not based on any kind

472
00:59:01,500 --> 00:59:05,580
of assumptions okay that's uh question

473
00:59:08,380 --> 00:59:13,500
that's the most beautiful things it's difficult to make practical so here's the scenario three

474
00:59:13,500 --> 00:59:17,580
cryptographers we're gonna start with three because that's the easiest part right but it's generalizable

475
00:59:17,580 --> 00:59:22,300
to a groupie like as big as ours bigger or any of any size three cryptographers are having dinner

476
00:59:22,940 --> 00:59:31,740
okay in a restaurant now either nsa national security agency is paying for dinner or one of them is

477
00:59:31,740 --> 00:59:39,740
paying for dinner but if one of them is paying for dinner he wishes to remain anonymous he wants everybody

478
00:59:39,740 --> 00:59:46,620
to know like one of them is paying for dinner but he doesn't know want the other two to know who that

479
00:59:46,620 --> 00:59:55,260
is and he will deny of course okay let's assume they're all he just for ease of explanation so how

480
00:59:55,260 --> 01:00:01,100
does the particle work so imagine three people sitting around the table three people around the table

481
01:00:01,820 --> 01:00:07,100
finish dinner check comes somebody paid for the check so now they're trying to figure out who paid

482
01:00:07,100 --> 01:00:15,020
and a safe on one of them so each person flips a coin last time i checked most coins had two sides

483
01:00:15,020 --> 01:00:22,860
and scales and shows it to its neighbor on the left so everybody in a circular table has a neighbor

484
01:00:24,060 --> 01:00:30,060
right and left you flip a coin show it to your left-hand neighbor everybody does the same thing

485
01:00:30,060 --> 01:00:40,380
okay okay every diner right every cryptographer sees two points their own right and the right neighbors

486
01:00:41,260 --> 01:00:47,820
so if i'm one of those cryptographers i know my coin flip and the guy over here you're going to show me

487
01:00:47,820 --> 01:00:58,860
his that's the problem each person then publicly announces whether the two coins are the same

488
01:01:00,060 --> 01:01:05,660
both heads or both tails doesn't say which just says if they're the same like for example if i throw

489
01:01:07,340 --> 01:01:14,140
heads and the person on my right shows me tails i'll say different if i throw heads and that person

490
01:01:14,140 --> 01:01:24,380
shows me heads also i'll say same so here's the rule if the number now the all three all three of them

491
01:01:24,380 --> 01:01:30,700
say the same say say something right each one must say either same or different that's the only two

492
01:01:30,700 --> 01:01:37,980
words allowed if the number of same is one or three then nsa is paid no gathering

493
01:01:37,980 --> 01:01:45,980
if the number of same is zero or two then one of them paid and nobody knows who

494
01:01:48,460 --> 01:01:55,340
main thing is non-payer the person who did not pay does not know which one of the other two it is

495
01:01:56,140 --> 01:01:59,580
he knows one of them paid the non-payer knows he didn't pay right

496
01:01:59,580 --> 01:02:08,380
but he doesn't know which one of the other two paid yeah what's your question so if the parity of

497
01:02:08,380 --> 01:02:13,740
the guests changes instead of the parity of the answers let's see it's coming right

498
01:02:18,380 --> 01:02:23,900
so here we have pictures one thousand words three cryptographers first and on the side you have

499
01:02:23,900 --> 01:02:32,700
going to say who may have paid for dinner check all right somebody paid right think about what if

500
01:02:32,700 --> 01:02:39,580
you are not a payer you're one of the critographers who did not pay you know you didn't pay and you see

501
01:02:39,580 --> 01:02:45,500
the same point right meaning that meaning that you you basically threw heads that was your point

502
01:02:45,500 --> 01:02:58,300
and the guy over there showed your head right and that's so what's what's what's like one possibility

503
01:02:58,300 --> 01:03:04,220
is the guy over there declared same and the guy over there declared different right that's possible

504
01:03:06,780 --> 01:03:12,860
what could you say about this picture because remember this is yours right you are this guy

505
01:03:13,740 --> 01:03:19,980
this is your point you showed it to this person he said same

506
01:03:24,780 --> 01:03:28,620
what must the other one must have been heads right

507
01:03:30,940 --> 01:03:32,140
but if he threw heads

508
01:03:34,140 --> 01:03:38,220
if he threw heads and he showed the guy over there heads

509
01:03:38,220 --> 01:03:45,180
then that guy and that guy showed you him then that guy also should have said same

510
01:03:47,100 --> 01:03:47,900
somebody's lying

511
01:03:51,260 --> 01:03:53,100
the payer lies right

512
01:03:54,380 --> 01:04:04,700
but who is the payer are you following who is the payer right because this is obviously the case that one of

513
01:04:04,700 --> 01:04:05,260
them paid

514
01:04:07,740 --> 01:04:15,820
right again somebody showed you this you threw this means you have the view of the same you said same

515
01:04:15,820 --> 01:04:21,340
the guy on your on your left said same which means that if he's not lying he saw

516
01:04:22,300 --> 01:04:30,620
heads and he threw heads and he showed heads to the guy on his on his left which says different but wait he showed

517
01:04:30,620 --> 01:04:36,860
you this what the hell but you can't say that that guy is lying because it would be this guy who is lying

518
01:04:39,180 --> 01:04:41,100
they all look generic

519
01:04:41,100 --> 01:04:52,620
could be this right this could be a pair or could be this equally likely

520
01:04:55,900 --> 01:04:56,700
believe it right

521
01:04:56,700 --> 01:05:06,540
okay okay now if you are not a payer but you see different coins you threw tails and you saw heads so you announced

522
01:05:07,420 --> 01:05:12,060
different and the other people said same same

523
01:05:15,260 --> 01:05:15,500
well

524
01:05:18,060 --> 01:05:21,260
you showed him tails you showed him tails

525
01:05:21,260 --> 01:05:32,860
he showed head which means he is the payer if he's lying potentially or you showed him tails

526
01:05:33,980 --> 01:05:41,740
and he did have tails he showed the guy on his left tails but he is the payer who lied equally likely

527
01:05:43,420 --> 01:05:47,740
so you see in this case we're coming back to this rule

528
01:05:47,740 --> 01:05:57,020
that if the number of same is zero or two then one of them is paying because one of them lied

529
01:05:58,620 --> 01:06:02,140
in this case the number of same is two

530
01:06:04,780 --> 01:06:05,420
in this case

531
01:06:08,940 --> 01:06:11,980
different right the number of same is two

532
01:06:11,980 --> 01:06:19,900
now the idea is that this is a generalization something called super post setting never might

533
01:06:19,900 --> 01:06:25,500
this slide is too much but the idea is that you can send essentially a message that i paid

534
01:06:27,020 --> 01:06:32,620
in a group like it's a one-bit message that says i paid and nobody knows who you are

535
01:06:34,060 --> 01:06:40,060
so the same generalizes to a group of like our size or five or six cryptographers right it'll be the same

536
01:06:40,060 --> 01:06:41,980
okay

537
01:06:43,500 --> 01:06:47,900
just to extend the protocol a little bit but the idea is that if one of them paid they will announce

538
01:06:47,900 --> 01:06:52,700
the fact that they paid but nobody knows who paid and that's the best kind of anonymity you can achieve

539
01:06:55,180 --> 01:06:55,580
all right

540
01:06:58,460 --> 01:06:58,860
let's see

541
01:07:02,700 --> 01:07:04,140
yeah let's let's finish here

542
01:07:04,140 --> 01:07:20,780
we only have a few minutes no point in getting into the next exciting topic which is spam


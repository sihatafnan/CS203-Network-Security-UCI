1
00:00:00,000 --> 00:00:07,560
system, whereby you log in once per work session, a day, for example, at work, as in a typical

2
00:00:07,560 --> 00:00:16,420
office, and you don't have to supply your password again. Okay, everything else happens

3
00:00:16,420 --> 00:00:25,880
under the covers. Okay, transparent to the human user. All right, so Kerberos does this

4
00:00:25,880 --> 00:00:32,240
by introducing a trusted third party, TDB, which we call Kerberos, collectively a

5
00:00:32,240 --> 00:00:36,080
kid distribution center. Trusted third party is a generic name, but in Kerberos, the

6
00:00:36,080 --> 00:00:40,280
terminology is KDC, and inside KDC, there are two components. There is a

7
00:00:40,280 --> 00:00:47,900
authentication server and a ticket-granting service. Now, what I did not mention last

8
00:00:47,900 --> 00:00:53,660
time, and maybe I did, but I don't recall, is that the authentication service knows

9
00:00:53,660 --> 00:00:59,540
all users. Users clients all the humans, right, all the accounts, essentially, right,

10
00:00:59,540 --> 00:01:05,000
but it does not need to know, it does, but it does not need to know all the servers.

11
00:01:05,000 --> 00:01:11,000
The Ticket-granting service needs to know all the servers, and is less concerned

12
00:01:11,000 --> 00:01:16,420
about users, although it has access to the same user digits.

13
00:01:16,420 --> 00:01:23,260
All right, so this was the overview. User approves identity, requests a ticket, receives

14
00:01:23,260 --> 00:01:29,440
ticket, goes to access service. But that's a problem, right, because what we know is

15
00:01:29,440 --> 00:01:34,600
that it's not enough to just get a ticket for a service, right. You may not need the

16
00:01:34,600 --> 00:01:38,320
service right away. You may have to go to the particular service, like printing

17
00:01:38,320 --> 00:01:43,240
service, file service, many times a day. So that's why Kerberos separates these two

18
00:01:43,240 --> 00:01:48,120
tasks of, like, initial authentication that deals only with signal sign-on of the

19
00:01:48,120 --> 00:01:54,080
user when the user provides a password, etc., etc., and what follows later, which is

20
00:01:54,080 --> 00:01:59,520
user tries to access various services. Okay, let's go for that. We already did.

21
00:01:59,520 --> 00:02:09,360
Blah, blah, blah. Okay, I think, do we stop here? No? Roughly? Right, so you see here in

22
00:02:09,360 --> 00:02:15,240
the cloud. That key distribution center houses both functions. You can think of them in two

23
00:02:15,240 --> 00:02:22,540
processes running on the same highly secure computer. Okay? User logs in first, gets an

24
00:02:22,540 --> 00:02:29,240
encrypted TGS ticket. The TGS ticket actually is for the TGS server that it will use later.

25
00:02:29,240 --> 00:02:34,360
By the time it decrypts it, it has to decrypt it using knowledge of its password or password-derived

26
00:02:34,360 --> 00:02:40,740
key. You will go to the TGS and ask, I want to access a particular service. If the TGS

27
00:02:40,740 --> 00:02:45,440
decides to grant it, you will reply to the encrypted service ticket. The service ticket

28
00:02:45,440 --> 00:02:51,240
will then be decrypted, partially decrypted by the client, the encrypted portion that I'll

29
00:02:51,240 --> 00:02:57,640
explain later will be sent to the server, and then there's a brief authentication exchange

30
00:02:57,640 --> 00:03:06,020
between the client and the server. So there's really three phases in the Kerber's sort of

31
00:03:06,020 --> 00:03:09,020
protocol hierarchy.

32
00:03:13,020 --> 00:03:19,020
Okay, okay. So here, here I think actually what we almost got to get about that. I want you

33
00:03:19,020 --> 00:03:26,640
to understand this terminology. The client and the user are almost the same thing but not quite.

34
00:03:26,640 --> 00:03:36,020
The user is the human. The user knows the password. Okay? The user uses their laptop, smartphone,

35
00:03:36,020 --> 00:03:44,520
workstation, desktop, whatever, their device, where they log in and supply the password. That

36
00:03:44,520 --> 00:03:54,760
device, okay, let's call it device, user device, has Kerber's client-side software. Once the user

37
00:03:54,760 --> 00:04:00,900
provides the password, that client-side software is client from here on. User does not perform

38
00:04:00,900 --> 00:04:06,140
decryption, encryption in their head, right? Software does it for them. So that's why I use

39
00:04:06,140 --> 00:04:16,280
the word client to denote that user-side software, which is part of the purpose. Okay, so KC is

40
00:04:16,280 --> 00:04:23,720
the client's key, right? Client's key, but it's not the same thing as the user password. It's a key

41
00:04:23,720 --> 00:04:26,660
derived from a password. Okay?

42
00:04:26,660 --> 00:04:38,040
Known only to the client, to that client, and the key distribution center. Okay? Now, KTGS is a key of the TGS

43
00:04:38,040 --> 00:04:43,920
for the ticket-granting service. It is known only to the TGS, so you can think of it, it shares it with nobody

44
00:04:43,920 --> 00:05:09,300
but itself. And if you think, well, why are we using it like that? Because the reason is very simple. The TGS does not need to maintain or does not want to maintain a giant database of all outstanding tickets. Okay? That's a headache. The same way, the same way that on the web today, you have cookies.

45
00:05:09,300 --> 00:05:38,620
Why do you have cookies? Because the web server does not want to have the headache of maintaining state information about everybody who accesses that web server. So we have cookies. So when you come back to the web server, it can recognize you, spying you, etc. But also it has beneficial side effects. Okay? So it's for the same reason that the TGS is used. Alternative would have been for the

46
00:05:38,620 --> 00:05:48,620
the TGS for the TGS, sorry, the DGS ticket, the DGS is used. The alternative would be for the KDC to store all tickets locally. But then we have the headache of managing it.

47
00:05:50,940 --> 00:06:04,460
Okay, so, so therefore, it uses a key that it only shares with itself to essentially encrypt for itself the fact that you have a ticket as a user. And when you come back, you better bring that ticket.

48
00:06:04,460 --> 00:06:11,460
You don't have a ticket. You don't have a ticket. You don't have a ticket? Your problem. Not server setting. Or not, sorry, not TGS setting.

49
00:06:11,460 --> 00:06:31,460
KV, the one I think, is a long-term strong key of each server. Printer server, file server, mail server, etc. Okay? Every server has a name V, has a KV, long-term, not converted to anything. It is a key. A real key. Okay?

50
00:06:31,460 --> 00:06:52,460
Okay? Down to the server and the TGS. Okay. Next, KC TGS. That is a short-term session key that a client, C, okay, will share with the TGS when the ticket is issued.

51
00:06:52,460 --> 00:07:01,880
When the client first logs in, provides the password, does the authentication exchange. At the end of that exchange, the client will learn this key.

52
00:07:04,460 --> 00:07:14,300
Okay? It's issued by the AS, but it is for the client to share with the TGS because the client does not talk to the AS anymore after logging.

53
00:07:14,300 --> 00:07:26,300
Okay? Puzzled? Horrified? Excited? What? Okay? Everything understood.

54
00:07:26,300 --> 00:07:45,300
All right. Well, there is a shorter-term key. Okay? This is specific to a server. When a client already logged in and has this, wants to access a particular server, it goes to the TGS with its ticket-granting ticket and says,

55
00:07:45,300 --> 00:07:59,300
I am so-and-so, I want to access that server, please facilitate this. The TGS will reply with a service ticket, and that service ticket will have two parts, but in those two parts, there are some redundancies,

56
00:07:59,300 --> 00:08:13,300
redundancies, and this KCV is the key that is conveyed directly or indirectly to both the client and the server. So when a client is talking to the printer, or the printer driver,

57
00:08:13,300 --> 00:08:25,300
the rubberized printer driver on the printer, it will use this key. Okay? That's the hierarchy of key. Almost. There's a little more at the end.

58
00:08:25,300 --> 00:08:41,300
So, this KNIT program, client, that's the client-side software. It's not the only piece of software in the client, but KNIT is the one that handles this exchange. So there is a user entering a password.

59
00:08:41,300 --> 00:08:53,300
The password by the client-side software. The password by the client-side software is converted into the KC. But the message, when the user types in, in fact, username,

60
00:08:53,300 --> 00:09:05,300
Alice. The KNIT does not even have to wait for her to type in the password in order to already send to the key distribution center a message that says,

61
00:09:05,300 --> 00:09:18,300
hey, I'm Alice, I want to log in. And the reason is because that initial message is not authenticated. Right? It has the idea of the client,

62
00:09:18,300 --> 00:09:34,300
idea of the DGS, and it seems redundant, but you'll see what it's for, and the time. The current time on the client-side. The time has to be reasonably well synchronized.

63
00:09:34,300 --> 00:09:49,300
Kerberos, by default, I think, allows five-minute clocks, too. But it can be modified for installation. So the time tells this KDC, right?

64
00:09:49,300 --> 00:10:00,300
Well, the AS inside the KDC, that this is recent, right? And not a replay, not stale. Okay, so then it issues, then it says, okay, do I,

65
00:10:00,300 --> 00:10:09,300
the first thing it does, do I know this client? Is this client in my database? If not, no reply or error message. Okay?

66
00:10:09,300 --> 00:10:17,300
If the client is in a database, the client may be not allowed to log in. In fact, Kerberos has a policy database that I will not show you,

67
00:10:17,300 --> 00:10:26,300
because it's super boring, but it's necessary. It has a policy database that says, for each existing client, what is the policy for that client to log in?

68
00:10:26,300 --> 00:10:36,300
A night watchman does not log in in the middle of the day. Okay? A cashier does not log in at 2 AM. These kinds of requirements, policies.

69
00:10:36,300 --> 00:10:48,300
Who can log in when? A remote employee who works from home Thursday and Friday should not be logging in on Thursday and Friday. For example. Okay?

70
00:10:48,300 --> 00:10:59,300
Don't quote them, just randomly generated policies. So, then, when it finds the employer, or defines the user, the client, and it finds that the user is allowed to log in,

71
00:10:59,300 --> 00:11:11,300
it will issue this TGS ticket, or TGT, Ticket Granting Ticket. It's called Ticket Granting Ticket because it's not really a ticket in and of itself, it's a ticket to other tickets.

72
00:11:11,300 --> 00:11:31,300
All right. So, client obviously cannot forge that ticket. You'll see why. Client can, of course, if the client is a real user and knows the passwords and can compute KC,

73
00:11:31,300 --> 00:11:46,300
he can forge part of that ticket. But what he cannot do is forge something for the TGT. Sorry, for the TGS. Because he doesn't know the key of the TGS.

74
00:11:46,300 --> 00:11:59,300
What you see here in green is an encryption. It's essentially a two-layer encryption, but the outer layer is encrypted under the KC, the client's password-derived key.

75
00:11:59,300 --> 00:12:12,300
And inside, there is a blue KC TGS, right? This is the session key for this entire session, for the, until the client logs out, or the TGT expires, whichever comes first.

76
00:12:12,300 --> 00:12:23,300
Because you see there is also ID TGS, it better match what the client says. So when the client decrypts this, first of all, if the client cannot decrypt this, like he gets garbage, that means two things.

77
00:12:23,300 --> 00:12:35,300
Either the client is lying, meaning the user is not the right user, or the user mistyped the password, it happens, or somebody modified this green blob on the way between the KPC and the user.

78
00:12:35,300 --> 00:12:44,300
Totally possible. Could be innocuous, like a router is buggy, or could be malicious.

79
00:12:44,300 --> 00:13:00,300
Okay, so failure to decrypt can be any of those things. If the decryption succeeds, the client will make sure that ID TGS he sent in the blue is the same one that comes back in the green.

80
00:13:00,300 --> 00:13:07,300
It will also make sure that time KPC is reasonably near the time C that he sent earlier.

81
00:13:07,300 --> 00:13:23,300
And the reason is because time C is in fact acting as a challenge. Yeah? You see that? Time kicks up. So it's kind of acting as a challenge.

82
00:13:23,300 --> 00:13:24,300
Lifetime.

83
00:13:24,300 --> 00:13:33,300
Lifetime. Clearly, that's the ticket lifetime for that, for that, for that ticket granting ticket. After that lifetime, you have to re-login.

84
00:13:33,300 --> 00:13:45,300
And then the last, but definitely in all this, that's a big part, that red part is ticket TGS. That is encrypted using TGS's key.

85
00:13:45,300 --> 00:13:56,300
Client cannot read it. It just treats it as a block. But if the client decrypts, and everybody, by the way, trusts the KPC.

86
00:13:56,300 --> 00:14:04,300
KPC is called a trusted third party for a reason. You have no choice but to trust it. It's your big brother.

87
00:14:04,300 --> 00:14:14,300
If the client succeeds in decrypting the green part, right, the outer encryption, it knows the structure of the red part. It just cannot read it.

88
00:14:14,300 --> 00:14:24,300
But it knows its structure. It knows what should be inside. And inside, among other things, should be an exact copy of that blue KC TGS.

89
00:14:24,300 --> 00:14:34,300
And better be the same lifetime, too. Otherwise, the curve of simplification isn't correct.

90
00:14:34,300 --> 00:14:38,300
Right?

91
00:14:38,300 --> 00:14:44,300
That key is freshly generated, randomly generated by the AS.

92
00:14:44,300 --> 00:14:53,300
Right? And so what's inside? Roughly here, this is not an exact format. What is inside is that same blue P, as I said, the ID of the client, for good reason.

93
00:14:53,300 --> 00:15:03,300
Address of the client. Actually, it could be like a, depending on the version of the purpose, it's either an address, IP address, or a list of IP addresses.

94
00:15:03,300 --> 00:15:12,300
Okay? Or it could be like blank or like asterisk, which means any IP address. Not advised.

95
00:15:12,300 --> 00:15:13,300
ID TGS.

96
00:15:13,300 --> 00:15:14,300
ID TGS.

97
00:15:14,300 --> 00:15:15,300
ID TGS.

98
00:15:15,300 --> 00:15:18,300
Well, that's what TGS is going to allow, okay. It's neat.

99
00:15:18,300 --> 00:15:19,300
Time.

100
00:15:19,300 --> 00:15:22,300
KDC's time, which is the same as the time in the green.

101
00:15:22,300 --> 00:15:26,300
And lifetime, which is, again, the same as in the green.

102
00:15:26,300 --> 00:15:33,300
So there's a lot of duplicate information, and it has to agree, because that's what KDC always does.

103
00:15:33,300 --> 00:15:40,300
It makes sure that whatever is inside the red part is faithfully replicated inside the green part, okay?

104
00:15:40,300 --> 00:15:45,300
In fact, there's nothing really secret there. You see, the client can know what's inside.

105
00:15:45,300 --> 00:16:01,300
But he just cannot decrypt. So, client decrypts with, like I said, green part, the planes keeps TGS, gets the six tracks, the ticket TGS, bam.

106
00:16:01,300 --> 00:16:10,300
Now, it goes to the TGS, okay, with this TGT on, this ticket from before.

107
00:16:10,300 --> 00:16:13,300
But it only goes there if it needs to.

108
00:16:13,300 --> 00:16:22,300
If the client came to work, a user came to work, used the workstation to log in, and wants to, like I said before, take a break, no problem.

109
00:16:22,300 --> 00:16:27,300
He just wants to run something locally that requires no server access, no problem.

110
00:16:27,300 --> 00:16:33,300
Kerberis is not involved. The moment the client wants to use some server that is Kerberized, right?

111
00:16:33,300 --> 00:16:38,300
It's protected by Kerberis, like print something, alright?

112
00:16:38,300 --> 00:16:44,300
Or use some CAD package, or access a database, or whatever.

113
00:16:44,300 --> 00:16:49,300
So what it does is it sends the following thing.

114
00:16:49,300 --> 00:16:58,300
It encrypts, under the case TGS, which he just extracted, or earlier, not just, earlier extracted from the previous packet,

115
00:16:58,300 --> 00:17:08,300
to encrypt its identity, right, its address, where it's coming from, and the current time.

116
00:17:08,300 --> 00:17:11,300
And that becomes authentication token.

117
00:17:11,300 --> 00:17:12,300
Okay?

118
00:17:12,300 --> 00:17:14,300
Off C.

119
00:17:14,300 --> 00:17:17,300
In addition to that, it adds the ID of the service.

120
00:17:17,300 --> 00:17:20,300
It wants server, he wants to access ITV.

121
00:17:20,300 --> 00:17:25,300
And that red ticket TGS from before, which he cannot read.

122
00:17:25,300 --> 00:17:29,300
But we remember what's inside there, right?

123
00:17:29,300 --> 00:17:34,300
So he sends it to the TGS, and the TGS does what?

124
00:17:34,300 --> 00:17:43,300
It looks at ID and says, huh, well, actually, I'm missing something.

125
00:17:43,300 --> 00:17:46,300
There's, you'll see it when I give you a full format.

126
00:17:46,300 --> 00:17:49,300
There's, also, identity of the client is sent in that message.

127
00:17:49,300 --> 00:17:50,300
It's kind of implied.

128
00:17:50,300 --> 00:17:59,300
So the, the ticket granting service says, okay, client Alice wants to access server printering.

129
00:17:59,300 --> 00:18:02,300
So it's, is that allowed?

130
00:18:02,300 --> 00:18:05,300
So now there's a policy database, right?

131
00:18:05,300 --> 00:18:10,300
There's, like, a user, remember I said there's, like, a user database that lists users and when they can log in

132
00:18:10,300 --> 00:18:14,300
and all kinds of policy about when can they, can they get onto the system.

133
00:18:14,300 --> 00:18:19,300
And then there's a separate policy database that says, which is essentially an access control,

134
00:18:19,300 --> 00:18:29,300
a representation that says, does this user have the right to access this resource, this server, at this time?

135
00:18:29,300 --> 00:18:30,300
Okay?

136
00:18:30,300 --> 00:18:33,300
That is called access control.

137
00:18:33,300 --> 00:18:35,300
Okay?

138
00:18:35,300 --> 00:18:39,300
So, if that fails, the TGS doesn't bother.

139
00:18:39,300 --> 00:18:41,300
It just returns an error.

140
00:18:41,300 --> 00:18:43,300
Access denied.

141
00:18:43,300 --> 00:18:46,300
Maybe it was, I forget, maybe it was some code.

142
00:18:46,300 --> 00:18:58,300
The next thing it does, it authenticates, well, sorry, the next thing it does, it decrypts that red ticket.

143
00:18:58,300 --> 00:19:03,300
And because the red ticket is encrypted under its own key, it can't decrypt it.

144
00:19:03,300 --> 00:19:10,300
If it cannot, then, again, either the client is supplying something wrong, or somebody in transit modified it.

145
00:19:10,300 --> 00:19:11,300
Right?

146
00:19:11,300 --> 00:19:14,300
You have to always consider the possibility.

147
00:19:14,300 --> 00:19:23,300
But if it manages to decrypt that red or orange part, then inside it, you will find what we already saw.

148
00:19:23,300 --> 00:19:28,300
Inside it, you will find this.

149
00:19:28,300 --> 00:19:31,300
This, this, this, this, this.

150
00:19:31,300 --> 00:19:32,300
Okay?

151
00:19:32,300 --> 00:19:37,300
So, among other things, you see the first, the blue part is the KCTGS.

152
00:19:37,300 --> 00:19:38,300
He will extract it.

153
00:19:38,300 --> 00:19:39,300
Right?

154
00:19:39,300 --> 00:19:45,300
He will extract it, and then he will verify off C.

155
00:19:45,300 --> 00:19:50,300
Off C is computed with KCTGS.

156
00:19:50,300 --> 00:19:51,300
That's the key she would extract.

157
00:19:51,300 --> 00:19:57,300
If the off C does not verify, again, two things are possible.

158
00:19:57,300 --> 00:20:05,300
Either the ticket has been hijacked, and somebody is, or the client did something wrong, or somebody modified it in transit.

159
00:20:05,300 --> 00:20:15,300
For the message to be fully processed, the TGS has to be able to decrypt the ticket TGS and verify successfully off C.

160
00:20:15,300 --> 00:20:20,300
And, of course, the policy part, but can this client access this service?

161
00:20:20,300 --> 00:20:30,300
If all that succeeds, the TGS replies, okay, with, again, double encryption.

162
00:20:30,300 --> 00:20:35,300
That's a standard format inside, inside Kerberos, double encryption.

163
00:20:35,300 --> 00:20:40,300
Today, it doesn't do that, but this is canonical Kerberos.

164
00:20:40,300 --> 00:20:46,300
KCTGS encryption, which the client knows, or should know, right?

165
00:20:46,300 --> 00:20:51,300
KCV is the new key, randomly, freshly generated.

166
00:20:51,300 --> 00:20:55,300
That will be the key for the client to talk to that print server.

167
00:20:55,300 --> 00:20:58,300
Not yet, right, but to be.

168
00:20:58,300 --> 00:21:01,300
IDV, meaning the server ID.

169
00:21:01,300 --> 00:21:05,300
Time on the TGS side, and the ticket V.

170
00:21:05,300 --> 00:21:11,300
The ticket V, in whatever color that is, beige, is not, again, not decryptable by the client.

171
00:21:11,300 --> 00:21:14,300
But the client pretty much knows what's inside.

172
00:21:14,300 --> 00:21:18,300
You see, similar to what we saw on the previous slide.

173
00:21:18,300 --> 00:21:26,300
It's an encryption on the server V's key, long term, strong key.

174
00:21:26,300 --> 00:21:34,300
On the same KCV, ID of the client, address of the client, ID of the server, just for sanity.

175
00:21:34,300 --> 00:21:37,300
Time on the TGS side, and the lifetime of the ticket.

176
00:21:37,300 --> 00:21:43,300
This is how long can this user, Alice, use this particular printer,

177
00:21:43,300 --> 00:21:48,300
without having to go back to the TGS and get another ticket.

178
00:21:48,300 --> 00:21:53,300
This lifetime cannot be longer than the TGS ticket lifetime.

179
00:21:53,300 --> 00:21:55,300
Make sense?

180
00:21:55,300 --> 00:21:58,300
Otherwise, it would be really stupid.

181
00:21:58,300 --> 00:21:59,300
Right?

182
00:21:59,300 --> 00:22:09,300
You don't want to give somebody a right to say print past the time they should be logged back.

183
00:22:09,300 --> 00:22:14,300
Or, for example, access an employee database.

184
00:22:14,300 --> 00:22:15,300
Okay.

185
00:22:15,300 --> 00:22:19,300
So, the client does the same thing to do with TGS before.

186
00:22:19,300 --> 00:22:30,300
It will, because it knows KC TGS, it will decrypt that outer part, obtain KCV, obtain IDV.

187
00:22:30,300 --> 00:22:33,300
It will compare IDV to the one it sent in the first message.

188
00:22:33,300 --> 00:22:34,300
They better match.

189
00:22:34,300 --> 00:22:37,300
If they don't match, there's something wrong.

190
00:22:37,300 --> 00:22:43,300
It will check the time TGS to make sure it's a recent time.

191
00:22:43,300 --> 00:22:50,300
And, you cannot verify TKD, but it just caches it.

192
00:22:50,300 --> 00:22:51,300
Okay?

193
00:22:51,300 --> 00:22:54,300
Caches it because we need it again.

194
00:22:54,300 --> 00:22:56,300
Okay?

195
00:22:56,300 --> 00:22:59,300
Everybody gets it?

196
00:22:59,300 --> 00:23:03,300
And now it's time to go obtain CERNs.

197
00:23:03,300 --> 00:23:04,300
Okay.

198
00:23:04,300 --> 00:23:06,300
So, you want to actually print.

199
00:23:06,300 --> 00:23:07,300
Okay.

200
00:23:07,300 --> 00:23:09,300
So, now you have the client.

201
00:23:09,300 --> 00:23:12,300
Actually, what I said, the user just says, I want to print.

202
00:23:12,300 --> 00:23:17,300
But all of this other stuff, like going on the previous slide and this slide, that happens under coverage.

203
00:23:17,300 --> 00:23:19,300
The user, human, is not involved.

204
00:23:19,300 --> 00:23:20,300
Right?

205
00:23:20,300 --> 00:23:22,300
Unless there is an error, right?

206
00:23:22,300 --> 00:23:24,300
Like access denied or some sort.

207
00:23:24,300 --> 00:23:27,300
User is not bothered with anything.

208
00:23:27,300 --> 00:23:29,300
It all happens quickly.

209
00:23:29,300 --> 00:23:37,300
So, the user, client, excuse me, goes to the server directly now, finally, and says,

210
00:23:37,300 --> 00:23:40,300
Yo, I have a ticket for you.

211
00:23:40,300 --> 00:23:41,300
Okay?

212
00:23:41,300 --> 00:23:43,300
Here is the ticket.

213
00:23:43,300 --> 00:23:45,300
That pink thing.

214
00:23:45,300 --> 00:23:47,300
Came from the previous slide.

215
00:23:47,300 --> 00:23:48,300
Right?

216
00:23:48,300 --> 00:23:49,300
Here is an authenticator.

217
00:23:49,300 --> 00:23:50,300
And here is an authenticator.

218
00:23:50,300 --> 00:23:55,300
To prove that I know the same key that is included in the ticket.

219
00:23:55,300 --> 00:23:56,300
Why?

220
00:23:56,300 --> 00:24:01,300
Well, because if I don't know the key, then it's not my ticket.

221
00:24:01,300 --> 00:24:03,300
Or I'm not me.

222
00:24:03,300 --> 00:24:07,300
So, the server receives that ticket.

223
00:24:07,300 --> 00:24:13,300
The server, first, decrypts that ticket using KD.

224
00:24:13,300 --> 00:24:14,300
Right?

225
00:24:14,300 --> 00:24:16,300
Decrypts the ticket.

226
00:24:16,300 --> 00:24:20,300
And inside finds what we already saw.

227
00:24:20,300 --> 00:24:22,300
That pink thing.

228
00:24:22,300 --> 00:24:27,300
And it finds KCD, IDC.

229
00:24:27,300 --> 00:24:28,300
Right?

230
00:24:28,300 --> 00:24:33,300
It will make sure that the ID of the client is the same one that the message of the next

231
00:24:33,300 --> 00:24:34,300
slide comes from.

232
00:24:34,300 --> 00:24:35,300
The address.

233
00:24:35,300 --> 00:24:36,300
The IP address should be the same.

234
00:24:36,300 --> 00:24:37,300
Although those are fungible.

235
00:24:37,300 --> 00:24:38,300
We all know this.

236
00:24:38,300 --> 00:24:41,300
It will send it to check its own ID.

237
00:24:41,300 --> 00:24:44,300
Does my ID match what is inside the pink thing?

238
00:24:44,300 --> 00:24:47,300
The time TGS has to be recent.

239
00:24:47,300 --> 00:24:48,300
Right?

240
00:24:48,300 --> 00:24:51,300
But the important thing is the lifetime.

241
00:24:51,300 --> 00:24:53,300
Okay.

242
00:24:53,300 --> 00:24:54,300
Okay.

243
00:24:54,300 --> 00:25:00,300
Now, the interesting thing is time TGS has to be, does not have to be synchronized here.

244
00:25:00,300 --> 00:25:05,300
Does anybody see why that is?

245
00:25:05,300 --> 00:25:10,300
All the previous times, when you, all the previous times you saw time, it was like they have to

246
00:25:10,300 --> 00:25:11,300
be reasonably linear.

247
00:25:11,300 --> 00:25:15,300
This time TGS does not have to be reasonably linear.

248
00:25:15,300 --> 00:25:18,300
This has to be within like time.

249
00:25:18,300 --> 00:25:19,300
Exactly.

250
00:25:19,300 --> 00:25:30,300
So, if a printer server receives a ticket, a service ticket from some user, and the inside

251
00:25:30,300 --> 00:25:36,300
when it decrypts the ticket, it's part of the ticket, it says time TGS 8 AM, but it's

252
00:25:36,300 --> 00:25:39,300
now noon, that's okay.

253
00:25:39,300 --> 00:25:40,300
That's okay.

254
00:25:40,300 --> 00:25:45,300
Because the lifetime, right, as long as the lifetime is okay.

255
00:25:45,300 --> 00:25:55,300
Because it just gives it time TGS plus the lifetime, that's when the ticket expires.

256
00:25:55,300 --> 00:25:56,300
Okay.

257
00:25:56,300 --> 00:25:58,300
So now, we're almost done.

258
00:25:58,300 --> 00:25:59,300
All right?

259
00:25:59,300 --> 00:26:04,300
So the server extracts, extracts, decrypts the pink ticket, extracts the information, and

260
00:26:04,300 --> 00:26:06,300
then verifies off C. Why?

261
00:26:06,300 --> 00:26:13,300
Because the same Kcb better be inside there that was computed with, off C was computed

262
00:26:13,300 --> 00:26:19,300
with, checks the idea of decline, again, the rest of the time, fine, that time is better

263
00:26:19,300 --> 00:26:20,300
be timed.

264
00:26:20,300 --> 00:26:27,300
That off, right, that off C better include the time that's, like, near.

265
00:26:27,300 --> 00:26:28,300
Synchronized.

266
00:26:28,300 --> 00:26:34,300
Not perfectly synchronized, but somewhat synchronized.

267
00:26:34,300 --> 00:26:35,300
Okay.

268
00:26:35,300 --> 00:26:37,300
Last message.

269
00:26:37,300 --> 00:26:40,300
Strictly speaking, it's an optional message.

270
00:26:40,300 --> 00:26:46,300
You can configure curbers to just do one way authentication, like this, to client to

271
00:26:46,300 --> 00:26:47,300
the server.

272
00:26:47,300 --> 00:26:51,300
And the reason is you might want to send a print job to, let's say, to the printer, and

273
00:26:51,300 --> 00:26:53,300
you don't care if you hear anything back.

274
00:26:53,300 --> 00:26:54,300
Right?

275
00:26:54,300 --> 00:27:01,300
So the client can just take that, what is that color, lilac, that first message in lilac,

276
00:27:01,300 --> 00:27:08,300
and append a print job to it, like a PDF file, and say, here, let's print this one.

277
00:27:08,300 --> 00:27:11,300
So that last message might not always be necessary.

278
00:27:11,300 --> 00:27:14,300
But typically, I think, by default, it is.

279
00:27:14,300 --> 00:27:23,300
So it's an encryption on the KCV of the time, time C is from client off C, right?

280
00:27:23,300 --> 00:27:25,300
So it's kind of a challenge, right?

281
00:27:25,300 --> 00:27:27,300
Time C functions as a challenge.

282
00:27:27,300 --> 00:27:32,300
It proves to the client that the server received the previous message, right?

283
00:27:32,300 --> 00:27:35,300
And, of course, he knows KCV.

284
00:27:35,300 --> 00:27:39,300
Otherwise, nobody would compute that time C plus 1.

285
00:27:39,300 --> 00:27:44,300
That is actually one of the vulnerabilities of this version of Curveverse.

286
00:27:44,300 --> 00:27:48,300
But that's for another lecture.

287
00:27:48,300 --> 00:27:51,300
Anyway, for now, let's consider this reasonably secure.

288
00:27:51,300 --> 00:27:52,300
Right?

289
00:27:52,300 --> 00:27:53,300
That's the idea.

290
00:27:53,300 --> 00:27:54,300
Right?

291
00:27:54,300 --> 00:28:00,300
So you have essentially, for a given user who starts out fresh, comes into work, or just

292
00:28:00,300 --> 00:28:04,300
logs in for the first time, there are three exchanges.

293
00:28:04,300 --> 00:28:07,300
One is to log in initially.

294
00:28:07,300 --> 00:28:12,300
The next one is, every server you want to access, you have to get a ticket for that server.

295
00:28:12,300 --> 00:28:16,300
And then the third is, you do a handshake exchange with that server.

296
00:28:16,300 --> 00:28:27,300
Now, if the client has multiple jobs to print, let's say, the client gets the tickets for

297
00:28:27,300 --> 00:28:31,300
printer server at 9am, and then it prints something.

298
00:28:31,300 --> 00:28:34,300
And then at 10am, the client has something else to print.

299
00:28:34,300 --> 00:28:40,300
As long as the lifetime of this ticket is valid, the client does not need to go back to the DGS.

300
00:28:40,300 --> 00:28:41,300
Right?

301
00:28:41,300 --> 00:28:44,300
It can reuse the same ticket.

302
00:28:44,300 --> 00:28:46,300
And that's why we have the lifetime.

303
00:28:46,300 --> 00:28:48,300
Okay?

304
00:28:48,300 --> 00:28:49,300
Yes?

305
00:28:49,300 --> 00:28:51,300
Clear?

306
00:28:51,300 --> 00:28:58,300
So, let's just go through the reasoning.

307
00:28:58,300 --> 00:29:00,300
For the last, I forgot to mention this.

308
00:29:00,300 --> 00:29:01,300
Right?

309
00:29:01,300 --> 00:29:04,300
So, the server, let's look at it from the client perspective.

310
00:29:04,300 --> 00:29:08,300
The server can only produce this message if he knows the KCB.

311
00:29:08,300 --> 00:29:09,300
Because only the server.

312
00:29:09,300 --> 00:29:11,300
Client does not generate messages like that.

313
00:29:11,300 --> 00:29:12,300
Like this new message.

314
00:29:12,300 --> 00:29:13,300
Right?

315
00:29:13,300 --> 00:29:15,300
Because the client is not a server.

316
00:29:15,300 --> 00:29:17,300
It is not programmed to generate such messages.

317
00:29:17,300 --> 00:29:21,300
So, the only party that could generate such messages is the right server.

318
00:29:21,300 --> 00:29:23,300
Because it is the only other party.

319
00:29:23,300 --> 00:29:27,300
Well, except for the trusted third party who we trust not to do and interfere.

320
00:29:27,300 --> 00:29:29,300
So, only that server can do.

321
00:29:29,300 --> 00:29:36,300
Server, on his part, the server can only learn the KCB if he could have decrypted the ticket.

322
00:29:36,300 --> 00:29:40,300
There's no way he could learn the KCB without decrypting the pink ticket.

323
00:29:40,300 --> 00:29:41,300
Okay?

324
00:29:41,300 --> 00:29:44,300
And verifying everything.

325
00:29:44,300 --> 00:29:47,300
So, everything was A-OK.

326
00:29:47,300 --> 00:29:48,300
Alright?

327
00:29:48,300 --> 00:29:52,300
And the server can only decrypt that ticket if he knows KB.

328
00:29:52,300 --> 00:29:53,300
Right?

329
00:29:53,300 --> 00:29:56,300
Because that ticket, that pink one, was encrypted with KB.

330
00:29:56,300 --> 00:30:00,300
Well, then, if the server knows KB, then it must be the right server.

331
00:30:00,300 --> 00:30:02,300
So, therefore, it's authenticated.

332
00:30:02,300 --> 00:30:06,300
That's kind of the change of logic here.

333
00:30:06,300 --> 00:30:11,300
Here's the, sometimes the bird's eye view comes again.

334
00:30:11,300 --> 00:30:12,300
Okay?

335
00:30:12,300 --> 00:30:16,300
So, here's the high level of Rubio Athenians for the Stallings book.

336
00:30:16,300 --> 00:30:20,300
So, it's probably a different terminology but it may help you understand that.

337
00:30:20,300 --> 00:30:26,300
So, again, once per user login session, you have the request ticket, granting ticket,

338
00:30:26,300 --> 00:30:29,300
which is essentially login with authentication server.

339
00:30:29,300 --> 00:30:36,300
You see that all this blob is one machine running two processes or two functions.

340
00:30:36,300 --> 00:30:38,300
You get a ticket and a session key.

341
00:30:38,300 --> 00:30:42,300
Then, when you want to use a server, you request service granting ticket, service ticket.

342
00:30:42,300 --> 00:30:46,300
If successful, you get back a ticket and a session key.

343
00:30:46,300 --> 00:30:51,300
And then, when you actually use the service, you request service with that server.

344
00:30:51,300 --> 00:30:57,300
And, if it succeeds in authentication, it will return a mutually authentication.

345
00:30:57,300 --> 00:30:58,300
Okay?

346
00:30:58,300 --> 00:31:03,300
And, in another way, more specific.

347
00:31:03,300 --> 00:31:05,300
These are the messages in Kerberos.

348
00:31:05,300 --> 00:31:12,300
One day, if you work in the security industry or even for security, doing security function

349
00:31:12,300 --> 00:31:17,300
in a non-security company, you might have to deal with this.

350
00:31:17,300 --> 00:31:21,300
Because a lot of industry uses Kerberos in one way.

351
00:31:21,300 --> 00:31:22,300
Sometimes it's called Kerberos.

352
00:31:22,300 --> 00:31:29,300
It's integrated like in Windows Enterprise or some other larger software packages.

353
00:31:29,300 --> 00:31:32,300
But, underneath it is Kerberos.

354
00:31:32,300 --> 00:31:37,300
So, again, client, server, KDC.

355
00:31:37,300 --> 00:31:39,300
First message is called ASRequest.

356
00:31:39,300 --> 00:31:41,300
Authentication, service request.

357
00:31:41,300 --> 00:31:43,300
That's the login allowed by me.

358
00:31:43,300 --> 00:31:50,300
The reply with the TGT is ASReply because it comes from the AS file of the KDC.

359
00:31:50,300 --> 00:31:53,300
Next, when you want to use a service called TGSRequest,

360
00:31:53,300 --> 00:31:55,300
request from the ticket granting service.

361
00:31:55,300 --> 00:31:58,300
The reply, if always good, is TGSReplied.

362
00:31:58,300 --> 00:32:00,300
Then, finally, app.

363
00:32:00,300 --> 00:32:05,300
Application server request and application server reply.

364
00:32:05,300 --> 00:32:10,300
Ad nauseam added to that.

365
00:32:10,300 --> 00:32:19,300
And here's the gory detail of what's inside.

366
00:32:19,300 --> 00:32:20,300
Okay.

367
00:32:20,300 --> 00:32:24,300
Now, the terminology here is a little different because it's formal.

368
00:32:24,300 --> 00:32:25,300
Right?

369
00:32:25,300 --> 00:32:26,300
Formal from the spec.

370
00:32:26,300 --> 00:32:30,300
So, ASRequest, principle C is the name of the user.

371
00:32:30,300 --> 00:32:34,300
You can think of it as the client's name.

372
00:32:34,300 --> 00:32:41,300
The next one is around, and I'll jump ahead and say that Kerberos works for a single administrative entity.

373
00:32:41,300 --> 00:32:47,300
Meaning that you cannot have several organizations living under one Kerberos umbrella.

374
00:32:47,300 --> 00:32:48,300
That doesn't work.

375
00:32:48,300 --> 00:32:49,300
Each has its own.

376
00:32:49,300 --> 00:33:02,300
If you have different companies, different parts of the same company, you may want to have two or different multiple Kerberos installations.

377
00:33:02,300 --> 00:33:04,300
I'll say a few words by the way.

378
00:33:04,300 --> 00:33:08,300
But this is the, each Kerberos installation is called a round.

379
00:33:08,300 --> 00:33:10,300
And you need to specify.

380
00:33:10,300 --> 00:33:12,300
Like, Kerberos is reserved.

381
00:33:12,300 --> 00:33:17,300
It is, it's a, it's a request to Kerberos, for Kerberos ticket granting ticket.

382
00:33:17,300 --> 00:33:21,300
And then the uppercase realm, that's configurable.

383
00:33:21,300 --> 00:33:22,300
Right?

384
00:33:22,300 --> 00:33:24,300
That's whatever the name of your realm is.

385
00:33:24,300 --> 00:33:34,300
IP list is the list for potentially empty of IP addresses for which you are requesting a TGT.

386
00:33:34,300 --> 00:33:37,300
Now, the policy may disallow this.

387
00:33:37,300 --> 00:33:38,300
And only allow one.

388
00:33:38,300 --> 00:33:41,300
But, policy allows it to specify multiple.

389
00:33:41,300 --> 00:33:46,300
Say, for example, I'm going to use an IP address of my MacBook and my desktop and my smartphone.

390
00:33:46,300 --> 00:33:47,300
Okay.

391
00:33:47,300 --> 00:33:56,300
But, if the IP list is empty, that means I want a TGT that's independent of the IP address.

392
00:33:56,300 --> 00:33:57,300
I want it to be portable.

393
00:33:57,300 --> 00:33:59,300
Again, that might not be allowed.

394
00:33:59,300 --> 00:34:01,300
That depends on the installation.

395
00:34:01,300 --> 00:34:02,300
Lifetime.

396
00:34:02,300 --> 00:34:05,300
I want the ticket for this lifetime.

397
00:34:05,300 --> 00:34:12,300
That may not, may or may not agree with the lifetime the, the, the, the, the AS wants to issue a ticket for.

398
00:34:12,300 --> 00:34:13,300
Anyway.

399
00:34:13,300 --> 00:34:14,300
Okay.

400
00:34:14,300 --> 00:34:15,300
That's AS request.

401
00:34:15,300 --> 00:34:16,300
AS reply.

402
00:34:16,300 --> 00:34:20,300
Let's stick to that, let's stick to that second line.

403
00:34:20,300 --> 00:34:22,300
AS reply is the same, the realm.

404
00:34:22,300 --> 00:34:23,300
Right?

405
00:34:23,300 --> 00:34:24,300
Just echo it.

406
00:34:24,300 --> 00:34:25,300
Okay?

407
00:34:25,300 --> 00:34:26,300
Timestamp on AS.

408
00:34:26,300 --> 00:34:31,300
Lifetime, which cannot be longer than what the user asked for.

409
00:34:31,300 --> 00:34:32,300
Can be shorter.

410
00:34:32,300 --> 00:34:34,300
So, the user can ask for 24 hours but only got 8 hours.

411
00:34:34,300 --> 00:34:35,300
That's okay.

412
00:34:35,300 --> 00:34:36,300
Lifetime, and KC, TGS.

413
00:34:36,300 --> 00:34:37,300
Right?

414
00:34:37,300 --> 00:34:38,300
So, that's the key.

415
00:34:38,300 --> 00:34:39,300
Remember, we already talked about it.

416
00:34:39,300 --> 00:34:41,300
And all that curly brackets, curly brackets denote encryption.

417
00:34:41,300 --> 00:34:42,300
All that is encrypted under KC, which is the client's password or IP.

418
00:34:42,300 --> 00:34:49,300
And then, that little seeming little part in yellow is TGT and encrypted for TGS.

419
00:34:49,300 --> 00:34:50,300
Notice what's inside that.

420
00:34:50,300 --> 00:34:51,300
Okay?

421
00:34:51,300 --> 00:34:52,300
It's encrypted, right?

422
00:34:52,300 --> 00:34:53,300
So, I only show you the unencrypted part on second line.

423
00:34:53,300 --> 00:34:59,300
It has the name of the principle, which is the same, the name of the user, the round,

424
00:34:59,300 --> 00:35:02,300
the IP list, the timestamp of the AS, lifetime, and KC, TGS.

425
00:35:02,300 --> 00:35:07,300
So, it actually duplicates a lot of the fields you will see on the left side.

426
00:35:07,300 --> 00:35:08,300
So, it's encrypted.

427
00:35:08,300 --> 00:35:09,300
So, it's encrypted.

428
00:35:09,300 --> 00:35:10,300
So, it's encrypted.

429
00:35:10,300 --> 00:35:11,300
So, it's encrypted.

430
00:35:11,300 --> 00:35:12,300
So, it's encrypted.

431
00:35:12,300 --> 00:35:13,300
So, it's encrypted.

432
00:35:13,300 --> 00:35:14,300
So, it's encrypted.

433
00:35:14,300 --> 00:35:15,300
And the KC, which is encrypted.

434
00:35:15,300 --> 00:35:16,300
And the KC, which is the client's password or IP.

435
00:35:16,300 --> 00:35:17,300
And then, that little seeming little part in yellow is TGT and encrypted for TGS.

436
00:35:17,300 --> 00:35:18,300
Notice what's inside that.

437
00:35:18,300 --> 00:35:19,300
Okay?

438
00:35:19,300 --> 00:35:20,300
It's encrypted, right?

439
00:35:20,300 --> 00:35:23,300
It actually duplicates a lot of the fields you will see online.

440
00:35:23,300 --> 00:35:24,300
Great.

441
00:35:24,300 --> 00:35:25,300
All right.

442
00:35:25,300 --> 00:35:26,300
And TGS request.

443
00:35:26,300 --> 00:35:32,300
This is when this client goes to the TGS and says, I want a ticket for the printer.

444
00:35:32,300 --> 00:35:35,300
That contains principle V.

445
00:35:35,300 --> 00:35:39,300
Principle V is the name, official name of the printer service or whatever service you

446
00:35:39,300 --> 00:35:40,300
want access.

447
00:35:40,300 --> 00:35:41,300
Lifetime.

448
00:35:41,300 --> 00:35:42,300
For how long?

449
00:35:42,300 --> 00:35:47,300
Again, cannot be longer than the lifetime of your TGS ticket.

450
00:35:47,300 --> 00:35:49,300
And an authenticator, right?

451
00:35:49,300 --> 00:35:52,300
You don't come to the door without an authenticator.

452
00:35:52,300 --> 00:35:59,300
So, the authenticator one-off-one is an encryption of the principal C, meaning his own name, timestamp,

453
00:35:59,300 --> 00:36:04,300
current timestamp on C, the client, and checksides.

454
00:36:04,300 --> 00:36:05,300
Okay?

455
00:36:05,300 --> 00:36:08,300
It's an authenticated checksides.

456
00:36:08,300 --> 00:36:10,300
Very simple checksides.

457
00:36:10,300 --> 00:36:11,300
Okay?

458
00:36:11,300 --> 00:36:12,300
So, TGS request arrives.

459
00:36:12,300 --> 00:36:13,300
It is decrypted and verified.

460
00:36:13,300 --> 00:36:14,300
Okay?

461
00:36:14,300 --> 00:36:15,300
And when it's successful, everything goes well.

462
00:36:15,300 --> 00:36:16,300
The TGS replies with this, with the service ticket.

463
00:36:16,300 --> 00:36:17,300
And it contains two parts.

464
00:36:17,300 --> 00:36:18,300
Remember?

465
00:36:18,300 --> 00:36:19,300
The name of the server.

466
00:36:19,300 --> 00:36:20,300
The timestamp.

467
00:36:20,300 --> 00:36:21,300
The timestamp.

468
00:36:21,300 --> 00:36:22,300
The timestamp.

469
00:36:22,300 --> 00:36:23,300
The timestamp.

470
00:36:23,300 --> 00:36:24,300
The timestamp.

471
00:36:24,300 --> 00:36:25,300
The timestamp.

472
00:36:25,300 --> 00:36:26,300
The timestamp.

473
00:36:26,300 --> 00:36:27,300
The timestamp.

474
00:36:27,300 --> 00:36:28,300
The timestamp.

475
00:36:28,300 --> 00:36:29,300
And it contains two parts.

476
00:36:29,300 --> 00:36:30,300
Remember?

477
00:36:30,300 --> 00:36:31,300
The name of the server.

478
00:36:31,300 --> 00:36:32,300
The timestamp.

479
00:36:32,300 --> 00:36:33,320
The timestamp.

480
00:36:33,320 --> 00:36:34,320
The timestamp.

481
00:36:34,320 --> 00:36:35,320
The timestamp.

482
00:36:35,320 --> 00:36:36,320
The timestamp.

483
00:36:36,320 --> 00:36:37,320
The timestamp.

484
00:36:37,320 --> 00:36:38,320
And theuler of the przyst.

485
00:36:38,320 --> 00:36:40,320
As for the client.

486
00:36:40,320 --> 00:36:47,280
So, this part, this part is decrypted by the client.

487
00:36:47,280 --> 00:36:57,280
And then the next part is only decrypted by the server, when the client decides to go to the server.

488
00:36:57,280 --> 00:37:04,280
Okay, then these are where the last two messages when the client goes to the printer server and supplies an authenticator

489
00:37:04,280 --> 00:37:09,280
and then takes this from here, just per meter, copies it here.

490
00:37:09,280 --> 00:37:17,280
Okay? And yeah, this is time sample, 400 plus 1.

491
00:37:17,280 --> 00:37:25,280
Any other questions? Any questions at all?

492
00:37:25,280 --> 00:37:38,280
It's not as difficult as it might seem. The notation might be a little obscure, but stare at it for a while, and then for a while, everything will be clear.

493
00:37:38,280 --> 00:37:40,280
No question. Okay.

494
00:37:40,280 --> 00:37:47,280
Now, as I said before, Kerberos isn't made for large networks or administratively heterogeneous environment.

495
00:37:47,280 --> 00:37:55,280
So, you want to divide even if you have a large company, even if it is one administration, but you have different geographical locations

496
00:37:55,280 --> 00:38:01,280
and just very large installations, like maybe you have one building, but there are really different departments.

497
00:38:01,280 --> 00:38:10,280
If you have a product department and a sales department and marketing, maybe you want to separate and have two different Kerberos realms for those.

498
00:38:10,280 --> 00:38:23,280
It's just easier to do like that. But every realm has to have a KDC. And every realm has to register its own server and its own users, right?

499
00:38:23,280 --> 00:38:32,280
So, now, how do you interoperate? Well, that's done in a kind of very obvious or naive way.

500
00:38:32,280 --> 00:38:41,280
And so, one way to think about it is, like, imagine you are at UCI, and we run our Kerberos realm, which we actually do.

501
00:38:41,280 --> 00:38:48,280
And then we have, let's say, UC Riverside, about 50 miles away. It's another UC campus. They run their own.

502
00:38:48,280 --> 00:38:57,280
So, they'll have ROM at, you know, Kerberos at UCR, and we have Kerberos at UCI. Those are two different realms.

503
00:38:57,280 --> 00:39:02,280
But because we are all good UC citizens, we are allowed to access each other's resources.

504
00:39:02,280 --> 00:39:09,280
Okay? So, how do we do that? Well, you want to do that, you first need to log in locally, where you are known.

505
00:39:09,280 --> 00:39:20,280
Right? So, your UCI, your UCI denizen of sorts, right? You log in here, you get access, and then, you go to the TGT,

506
00:39:20,280 --> 00:39:33,280
to TGS, and you ask for a special TGT. For a special ticket. Not a TGT. So, you follow me, you log in, you get the ticket-granting ticket.

507
00:39:33,280 --> 00:39:44,280
And now you go to the TGS and say, I want a ticket for a server, but it's a special server, it's called KDC at UC Riverside.

508
00:39:44,280 --> 00:39:52,280
So, the way that it's treated is like another server, but it has to be explicitly registered locally.

509
00:39:52,280 --> 00:39:58,280
And it has to be bought. It doesn't have to be bilateral, but it makes sense if it was bilateral.

510
00:39:58,280 --> 00:40:05,280
Does that make sense? But you're not done. The process is more complicated than that.

511
00:40:05,280 --> 00:40:14,280
Because once you get a service ticket for a TGT, for a TGS in Riverside, you then have to, you don't need to log in.

512
00:40:14,280 --> 00:40:21,280
You don't need to log in. But you need to bring that service ticket and contact directly the KDC at Riverside.

513
00:40:21,280 --> 00:40:31,280
And it will say, oh, this is a foreign issue ticket, let me look in the database if I know of UCI KDCs.

514
00:40:31,280 --> 00:40:41,280
Oh, yes I do, in which case, you know, you can get an application ticket on me locally at UC Riverside,

515
00:40:41,280 --> 00:40:46,280
and then you can get, you know, printing access and file access and all that. Okay?

516
00:40:46,280 --> 00:40:56,280
So, it's not, like, trivial, right, in terms of, like, what's, the particles are trivial, given what you already saw.

517
00:40:56,280 --> 00:41:04,280
It's not really very different, but there are more of them required in order to support cross-ground functionality.

518
00:41:04,280 --> 00:41:12,280
And also, every KDC, then, has to share a key with every other KDC.

519
00:41:12,280 --> 00:41:22,280
So, if we have 10 UC campuses, right, and each UC campus runs, you know, its own Kerberos installation,

520
00:41:22,280 --> 00:41:30,280
there have to be 90 keys, right? And, you know, every UC campus has to share a key, right?

521
00:41:30,280 --> 00:41:36,280
A KDC, you know, every two KDCs have to share a key.

522
00:41:36,280 --> 00:41:45,280
And that has to be done manually.

523
00:41:45,280 --> 00:41:50,280
Now, one of the important things to take away from Kerberos is that it's not super scalable,

524
00:41:50,280 --> 00:41:56,280
it's not like using public key, you know, in the world of web browsing, okay,

525
00:41:56,280 --> 00:42:02,280
where things scale to the entire world with questionable security, of course.

526
00:42:02,280 --> 00:42:05,280
But we feel like they scale to the entire world.

527
00:42:05,280 --> 00:42:07,280
And Kerberos things don't scale that far.

528
00:42:07,280 --> 00:42:11,280
But they scale to reasonable size, medium-sized organization.

529
00:42:11,280 --> 00:42:16,280
And that's important, okay?

530
00:42:16,280 --> 00:42:20,280
The other interesting thing is Kerberos is basically a symmetric key.

531
00:42:20,280 --> 00:42:25,280
It does not use, by default, right?

532
00:42:25,280 --> 00:42:26,280
It's in its vanilla form.

533
00:42:26,280 --> 00:42:30,280
It does not use public key cryptography at all.

534
00:42:30,280 --> 00:42:35,280
Which, for example, if you know anything about what's going on in the world of tech today,

535
00:42:35,280 --> 00:42:41,280
of science, makes it kind of attractive for our quantum resistance.

536
00:42:41,280 --> 00:42:54,280
Because quantum technology will, sooner or later, make most public key techniques weak or obsolete.

537
00:42:54,280 --> 00:42:58,280
And that would leave us with either some very exotic public key techniques,

538
00:42:58,280 --> 00:43:00,280
of this security which we're still not sure about,

539
00:43:00,280 --> 00:43:04,280
or it would leave us essentially with symmetric key work.

540
00:43:04,280 --> 00:43:06,280
Like what Kerberos does.

541
00:43:06,280 --> 00:43:08,280
Anyway, so that's the detour.

542
00:43:08,280 --> 00:43:10,280
So that's a nice feature.

543
00:43:10,280 --> 00:43:13,280
The services that use these short-term session keys.

544
00:43:13,280 --> 00:43:17,280
For both, like, client login session.

545
00:43:17,280 --> 00:43:22,280
The session key lasts for as long as the TGT is valid.

546
00:43:22,280 --> 00:43:27,280
And even short-term client application key, right?

547
00:43:27,280 --> 00:43:29,280
Meaning client-server keys that are used per service.

548
00:43:29,280 --> 00:43:39,280
Now, current release, I think there was a version last year,

549
00:43:39,280 --> 00:43:41,280
right middle of last year was released.

550
00:43:41,280 --> 00:43:42,280
This is 1.13.

551
00:43:42,280 --> 00:43:45,280
You can, Kerberos is fully public domain.

552
00:43:45,280 --> 00:43:50,280
If I had a TA and this was a larger class, I may have,

553
00:43:50,280 --> 00:43:53,280
I would have had maybe some actual exercises with Kerberos.

554
00:43:53,280 --> 00:43:56,280
Because you can totally install it and play with it.

555
00:43:56,280 --> 00:43:58,280
It's not that difficult.

556
00:43:58,280 --> 00:44:02,280
It's reasonably well maintained and it has good documentation.

557
00:44:02,280 --> 00:44:05,280
In order to use it, you have to, of course,

558
00:44:05,280 --> 00:44:07,280
install the client-side software.

559
00:44:07,280 --> 00:44:10,280
Not only that, but the application service.

560
00:44:10,280 --> 00:44:12,280
So if you want to Kerberize your printing,

561
00:44:12,280 --> 00:44:15,280
you want to Kerberize a certain database access,

562
00:44:15,280 --> 00:44:22,280
you have to essentially reinforce every service, right?

563
00:44:22,280 --> 00:44:25,280
So it usually requires a bit of work.

564
00:44:25,280 --> 00:44:27,280
Not a huge amount of work,

565
00:44:27,280 --> 00:44:31,280
but you have to link Kerberos server-side libraries.

566
00:44:31,280 --> 00:44:33,280
And so you cannot just take a software,

567
00:44:33,280 --> 00:44:36,280
generally I don't think you can take a software package

568
00:44:36,280 --> 00:44:38,280
as it is and just plunk it into Kerberos shell

569
00:44:38,280 --> 00:44:39,280
and say it's Kerberized.

570
00:44:39,280 --> 00:44:42,280
It has to be Kerberized, Kerberos-friendly.

571
00:44:42,280 --> 00:44:45,280
It may come Kerberized already from the manufacturer,

572
00:44:45,280 --> 00:44:47,280
from the software provider.

573
00:44:47,280 --> 00:44:48,280
That may be.

574
00:44:48,280 --> 00:44:50,280
But if it doesn't, you have to do it yourself.

575
00:44:53,280 --> 00:44:54,280
Right.

576
00:44:54,280 --> 00:44:56,280
So the current version of Kerberized,

577
00:44:56,280 --> 00:44:58,280
like I said, it's released 1.3.

578
00:44:58,280 --> 00:44:59,280
Version is called 5.

579
00:44:59,280 --> 00:45:01,280
You can't see it over there.

580
00:45:01,280 --> 00:45:04,280
It's obscured by the zoom logger.

581
00:45:04,280 --> 00:45:07,280
But the version I described to you is more older

582
00:45:07,280 --> 00:45:09,280
and still in use.

583
00:45:09,280 --> 00:45:10,280
It's called version 4.

584
00:45:10,280 --> 00:45:15,280
This is where version 5 has certain interesting modifications.

585
00:45:15,280 --> 00:45:20,280
For once, it addresses one of the problems in Kerberos,

586
00:45:20,280 --> 00:45:22,280
which is the first message,

587
00:45:22,280 --> 00:45:24,280
the first login attempt message, right,

588
00:45:24,280 --> 00:45:27,280
by the user is in clear text.

589
00:45:27,280 --> 00:45:29,280
You recall that?

590
00:45:29,280 --> 00:45:34,280
The key, the password derived key is not used in the first message,

591
00:45:34,280 --> 00:45:36,280
from the user to the AS.

592
00:45:36,280 --> 00:45:40,280
And what that says is that if you're an adversary

593
00:45:40,280 --> 00:45:42,280
and you know the name of the user,

594
00:45:42,280 --> 00:45:46,280
then all you need to do is send a clear text message,

595
00:45:46,280 --> 00:45:48,280
pretending to be that user.

596
00:45:48,280 --> 00:45:50,280
And what you will get back is a nice present.

597
00:45:50,280 --> 00:45:55,280
And the nice present is, well, it's an AS reply.

598
00:45:55,280 --> 00:45:57,280
Remember, that's that message.

599
00:45:57,280 --> 00:45:59,280
But remember that nice present carries in it,

600
00:45:59,280 --> 00:46:12,280
AS reply carries in it this first part,

601
00:46:12,280 --> 00:46:14,280
which is encrypted in the KC.

602
00:46:14,280 --> 00:46:15,280
Yeah?

603
00:46:15,280 --> 00:46:18,280
That's a password derived key.

604
00:46:18,280 --> 00:46:21,280
So if you can brute force the password,

605
00:46:21,280 --> 00:46:23,280
you can decrypt it.

606
00:46:23,280 --> 00:46:24,280
Yeah?

607
00:46:24,280 --> 00:46:25,280
Oh.

608
00:46:25,280 --> 00:46:26,280
No.

609
00:46:26,280 --> 00:46:27,280
You just brute force.

610
00:46:27,280 --> 00:46:29,280
Basically, you just brute force the password, right?

611
00:46:29,280 --> 00:46:31,280
It gives you something to play with.

612
00:46:31,280 --> 00:46:33,280
It's essentially like you just got an entry

613
00:46:33,280 --> 00:46:35,280
from an Etsy password file.

614
00:46:35,280 --> 00:46:37,280
You can just try to decrypt it

615
00:46:37,280 --> 00:46:39,280
under every possible password derived key

616
00:46:39,280 --> 00:46:41,280
until you find inside the name of the principal, right?

617
00:46:41,280 --> 00:46:43,280
You'll know when you hit pay dirt.

618
00:46:43,280 --> 00:46:45,280
You'll know when you guessed the key correctly.

619
00:46:45,280 --> 00:46:46,280
Right?

620
00:46:46,280 --> 00:46:48,280
So it's subject to dictionary attacks.

621
00:46:52,280 --> 00:46:55,280
The alternative is very, very simple.

622
00:46:55,280 --> 00:46:57,280
You require what's called pre-authentication,

623
00:46:57,280 --> 00:47:00,280
which means you require the client to prove knowledge

624
00:47:00,280 --> 00:47:02,280
of the password or IP in the first message.

625
00:47:02,280 --> 00:47:09,280
And that's something that Kerber's 5 supports.

626
00:47:09,280 --> 00:47:12,280
That's called pre-authentication in the initial

627
00:47:12,280 --> 00:47:13,280
answer request.

628
00:47:13,280 --> 00:47:15,280
That's not without problems itself.

629
00:47:15,280 --> 00:47:16,280
Yes?

630
00:47:16,280 --> 00:47:18,280
The attacker receives that pre-authentication.

631
00:47:18,280 --> 00:47:19,280
Exactly.

632
00:47:19,280 --> 00:47:20,280
Exactly.

633
00:47:20,280 --> 00:47:22,280
Well, let's talk about it for a second.

634
00:47:22,280 --> 00:47:25,280
Does everybody understand what he just said?

635
00:47:25,280 --> 00:47:26,280
Are you following?

636
00:47:26,280 --> 00:47:27,280
No?

637
00:47:27,280 --> 00:47:28,280
No?

638
00:47:28,280 --> 00:47:29,280
Hello?

639
00:47:29,280 --> 00:47:30,280
Sign up with your phone?

640
00:47:30,280 --> 00:47:31,280
Laptop?

641
00:47:31,280 --> 00:47:32,280
Big thoughts?

642
00:47:32,280 --> 00:47:34,280
Worry about the economy?

643
00:47:34,280 --> 00:47:35,280
No?

644
00:47:35,280 --> 00:47:39,280
Does everybody understand what he just said?

645
00:47:39,280 --> 00:47:40,280
Yes.

646
00:47:40,280 --> 00:47:44,280
If you put, if you require the client to authenticate itself

647
00:47:44,280 --> 00:47:47,280
in the first message, then there will be something

648
00:47:47,280 --> 00:47:50,280
obviously computed with a password-derived key

649
00:47:50,280 --> 00:47:52,280
that is present in the first message.

650
00:47:52,280 --> 00:47:57,280
That means, yep, okay, that's an opportunity for a password attack,

651
00:47:57,280 --> 00:47:58,280
right?

652
00:47:58,280 --> 00:48:00,280
A brute force attack on a password or dictionary attack.

653
00:48:00,280 --> 00:48:01,280
But are they the same?

654
00:48:01,280 --> 00:48:02,280
No.

655
00:48:02,280 --> 00:48:08,280
The main difference is you can't just get an arbitrary

656
00:48:08,280 --> 00:48:10,280
You get, see, in the first case, right?

657
00:48:10,280 --> 00:48:13,280
With the current first version I showed you, you get something

658
00:48:13,280 --> 00:48:14,280
for nothing.

659
00:48:14,280 --> 00:48:15,280
Right?

660
00:48:15,280 --> 00:48:16,280
You get something for nothing.

661
00:48:16,280 --> 00:48:20,280
You just generate a clear text, Alice, blah, blah, blah,

662
00:48:20,280 --> 00:48:23,280
timestamp, how difficult to get the correct time, et cetera.

663
00:48:23,280 --> 00:48:25,280
And you get back to present.

664
00:48:25,280 --> 00:48:29,280
With pre-authentication, indeed, you are still subject to dictionary attack,

665
00:48:29,280 --> 00:48:33,280
but you got to be lucky and wait, you know, lie and wait, right?

666
00:48:33,280 --> 00:48:38,280
Lie and wait until the victim user logs in.

667
00:48:38,280 --> 00:48:40,280
You see what I mean?

668
00:48:40,280 --> 00:48:42,280
So it's not like, you know, oh, at your convenient time,

669
00:48:42,280 --> 00:48:44,280
at 3 a.m., we're going to generate a bunch of these

670
00:48:44,280 --> 00:48:45,280
and get back your class.

671
00:48:45,280 --> 00:48:46,280
No, no, no.

672
00:48:46,280 --> 00:48:48,280
You have to be there when Alice comes in, you know,

673
00:48:48,280 --> 00:48:50,280
and let's move that.

674
00:48:50,280 --> 00:48:53,280
But, so there is a difference.

675
00:48:53,280 --> 00:48:56,280
It's not a huge difference, but it is a difference.

676
00:48:56,280 --> 00:48:57,280
Right.

677
00:48:57,280 --> 00:49:05,280
So the other modification in Curves version 5, which is today's version,

678
00:49:05,280 --> 00:49:07,280
is this in client-server application.

679
00:49:07,280 --> 00:49:14,280
What I showed you before, the client and the server, application server,

680
00:49:14,280 --> 00:49:16,280
use the same KCV.

681
00:49:16,280 --> 00:49:17,280
Remember KCV?

682
00:49:17,280 --> 00:49:22,280
Like, you wanted to print, you used KCV, right?

683
00:49:22,280 --> 00:49:26,280
Or, you wanted to print again using the same ticket, you used again KCV.

684
00:49:26,280 --> 00:49:30,280
Well, that's considered poor cryptographic hygiene.

685
00:49:30,280 --> 00:49:36,280
To reuse the same key for different, like, let's say, server, client service sessions.

686
00:49:36,280 --> 00:49:46,280
So instead, Converse 5 derives, uses the KCV as a master key for the ticket,

687
00:49:46,280 --> 00:49:54,280
and then derives individual subkeys for each, like, short client-server session.

688
00:49:54,280 --> 00:49:55,280
Does that make sense?

689
00:49:55,280 --> 00:49:57,280
Shorter, shorter, shorter.

690
00:49:57,280 --> 00:49:58,280
Yeah, that's right.

691
00:49:58,280 --> 00:50:05,280
So you got your ticket to use the printer for the next 5 hours.

692
00:50:05,280 --> 00:50:08,280
During those 5 hours, let's say you printed 5 times.

693
00:50:08,280 --> 00:50:13,280
In Curves version 4, you would have used the same KCV to print.

694
00:50:13,280 --> 00:50:17,280
In Curves version 5, you would use 5 different subkeys.

695
00:50:17,280 --> 00:50:18,280
Okay?

696
00:50:18,280 --> 00:50:23,280
Now, it should be abundantly clear to you, right,

697
00:50:23,280 --> 00:50:31,280
that the way that the servers are treated in Curves version is as being stateless.

698
00:50:31,280 --> 00:50:34,280
Does everybody understand what I'm saying stateless?

699
00:50:34,280 --> 00:50:40,280
The same way that we don't want the TGS to keep track of the issued tickets

700
00:50:40,280 --> 00:50:47,280
for all the currently loading users, because it makes it heavyweight and unpleasant.

701
00:50:47,280 --> 00:50:52,280
Even so, even more so, it makes it unpleasant for the servers to keep track of tickets.

702
00:50:52,280 --> 00:50:55,280
Because imagine what would happen.

703
00:50:55,280 --> 00:50:59,280
All the users come in the morning, log in, and start printing, and accessing databases,

704
00:50:59,280 --> 00:51:05,280
so all the poor servers would have to remember all the tickets that the users brought to them, right?

705
00:51:05,280 --> 00:51:07,280
Cache them.

706
00:51:07,280 --> 00:51:09,280
That's overhead.

707
00:51:09,280 --> 00:51:11,280
You can lose things, isn't it?

708
00:51:11,280 --> 00:51:14,280
But instead, Curves is stateless.

709
00:51:14,280 --> 00:51:19,280
The server in Curves does not know any users.

710
00:51:19,280 --> 00:51:23,280
Does not know you from you from me.

711
00:51:23,280 --> 00:51:25,280
No idea.

712
00:51:25,280 --> 00:51:30,280
A Curves server only knows one thing.

713
00:51:30,280 --> 00:51:32,280
Its master.

714
00:51:32,280 --> 00:51:35,280
And its master is the KDCs.

715
00:51:35,280 --> 00:51:39,280
Or, more specifically, the Ticket Granting Service.

716
00:51:39,280 --> 00:51:44,280
And it shares only one key, long term, with that Ticket Granting Service, right?

717
00:51:44,280 --> 00:51:47,280
So whatever the master says, it obeys.

718
00:51:47,280 --> 00:51:49,280
Right?

719
00:51:49,280 --> 00:51:52,280
And keeps no state.

720
00:51:52,280 --> 00:51:53,280
Keeps no state.

721
00:51:53,280 --> 00:51:56,280
Which is very nice.

722
00:51:56,280 --> 00:52:02,280
Because otherwise imagine, you'll print, like a printer is a good example.

723
00:52:02,280 --> 00:52:04,280
Because printers are usually zanemic devices.

724
00:52:04,280 --> 00:52:05,280
Right?

725
00:52:05,280 --> 00:52:08,280
They're good at printing, they have fast mechanical parts and whatever.

726
00:52:08,280 --> 00:52:11,280
But, in terms of computing power, they're not very powerful.

727
00:52:11,280 --> 00:52:13,280
And they don't have a lot of storage.

728
00:52:13,280 --> 00:52:15,280
Because in some ways, printers are like embedded devices.

729
00:52:15,280 --> 00:52:20,280
So, you don't want to overload them with having to cash tickets.

730
00:52:20,280 --> 00:52:22,280
So, it's good.

731
00:52:22,280 --> 00:52:28,280
Now, the other thing is, what you can do in Carver's D5 is you can do what's called forwarding.

732
00:52:28,280 --> 00:52:29,280
Take that forwarding.

733
00:52:29,280 --> 00:52:30,280
Yeah?

734
00:52:30,280 --> 00:52:33,280
How much compute do the heavy duty printers have?

735
00:52:33,280 --> 00:52:40,280
Well, you know, if you pay $50,000 for a 3D printer, that one will definitely have compute

736
00:52:40,280 --> 00:52:41,280
power.

737
00:52:41,280 --> 00:52:43,280
But even there, it's such a precious resource.

738
00:52:43,280 --> 00:52:46,280
You don't want to overwhelm it with like caching tickets.

739
00:52:46,280 --> 00:52:47,280
Why?

740
00:52:47,280 --> 00:52:48,280
Right?

741
00:52:48,280 --> 00:52:49,280
I don't know.

742
00:52:49,280 --> 00:52:50,280
Well, it's like the ones we have in DBH.

743
00:52:50,280 --> 00:52:51,280
Yeah.

744
00:52:51,280 --> 00:52:53,280
Those are like connected to the internet and everything.

745
00:52:53,280 --> 00:52:54,280
They are.

746
00:52:54,280 --> 00:52:55,280
Right.

747
00:52:55,280 --> 00:52:58,280
That's going to be a lot more power than my printer.

748
00:52:58,280 --> 00:53:00,280
No, for sure it will have more power.

749
00:53:00,280 --> 00:53:02,280
But it's still not a full-blown computer, right?

750
00:53:02,280 --> 00:53:08,280
It will probably have, my guess is that something that we have in DBH will be a power of an iPad

751
00:53:08,280 --> 00:53:09,280
of some sort.

752
00:53:09,280 --> 00:53:12,280
Maybe a little better than an iPad, you know?

753
00:53:12,280 --> 00:53:18,280
Some kind of embedded like, like a, like a airplane entertainment system type, you know,

754
00:53:18,280 --> 00:53:19,280
device.

755
00:53:19,280 --> 00:53:22,280
Or a car, infotainment system in a car.

756
00:53:22,280 --> 00:53:25,280
But not, not a lot stronger than that.

757
00:53:25,280 --> 00:53:28,280
But also, it's not just compute, it's also storage, right?

758
00:53:28,280 --> 00:53:30,280
That's the other thing.

759
00:53:30,280 --> 00:53:35,280
If you have a cache, it better being super fast and expensive memory.

760
00:53:35,280 --> 00:53:36,280
Yeah.

761
00:53:36,280 --> 00:53:41,280
So, but also recall, Kerberos was designed, did I say when it was designed?

762
00:53:41,280 --> 00:53:42,280
1987.

763
00:53:42,280 --> 00:53:43,280
Okay?

764
00:53:43,280 --> 00:53:48,280
Your parents were in kindergarten.

765
00:53:48,280 --> 00:53:50,280
So, the internet already existed.

766
00:53:50,280 --> 00:53:55,280
But, you know, it wasn't like this, like it is today.

767
00:53:55,280 --> 00:54:02,280
But, so, considering that something like Kerberos aged relatively well, I would say, it's still being used.

768
00:54:02,280 --> 00:54:11,280
And it still kind of resembles its original, it's not exactly the same, but it looks very much like what was there in the early 90s at least.

769
00:54:11,280 --> 00:54:13,280
That's a long time ago.

770
00:54:13,280 --> 00:54:16,280
There are very few products you can say this about.

771
00:54:16,280 --> 00:54:21,280
Right, so, authentication forwarding means that you can forward the ticket.

772
00:54:21,280 --> 00:54:29,280
Like for example, if you're, if you're accessing a file server, it needs to access, and it needs to access your box.

773
00:54:29,280 --> 00:54:33,280
If you're accessing a mail server, it needs to access a file server.

774
00:54:33,280 --> 00:54:38,280
So, in the original Kerberos, you would have to get two separate tickets.

775
00:54:38,280 --> 00:54:39,280
And it was clumsy.

776
00:54:39,280 --> 00:54:45,280
And now, the ticket that the file server gets can be forwarded to the mail server.

777
00:54:45,280 --> 00:54:46,280
And it can honor it.

778
00:54:46,280 --> 00:54:50,280
So, there's like some games to give you from that.

779
00:54:50,280 --> 00:54:57,280
There are, the Kerberos 5 supports hierarchies of realms.

780
00:54:57,280 --> 00:55:03,280
So, what I described to you about inter-realm thing and splitting things in Kerberos realms.

781
00:55:03,280 --> 00:55:09,280
Kerberos V5, if I'm not mistaken, I think I'm not, supports hierarchies.

782
00:55:09,280 --> 00:55:18,280
Where you don't have just like multiple realms as peers, but you have some super realms.

783
00:55:18,280 --> 00:55:20,280
Alright, and there's other stuff.

784
00:55:20,280 --> 00:55:23,280
Oh, it also supports multiple description schemes.

785
00:55:23,280 --> 00:55:28,280
The original Kerberos used the DES with some weird mode of operation that was not standard.

786
00:55:28,280 --> 00:55:30,280
And there were some problems because of it.

787
00:55:30,280 --> 00:55:39,280
Now, you can configure Kerberos to use pretty much any decent encryption function in the hash function or MAC function.

788
00:55:39,280 --> 00:55:43,280
But just to give you an idea about pre-authentication, coming back to that feature.

789
00:55:43,280 --> 00:55:56,280
So, as I said, anyone in Kerberos version 4, the way you, the one you sort of described, can use the initial packet as a vehicle for obtaining, you know, gifts.

790
00:55:56,280 --> 00:55:57,280
Right?

791
00:55:57,280 --> 00:55:59,280
Things encrypted with passwords and so on.

792
00:55:59,280 --> 00:56:01,280
So, it makes password guessing easy.

793
00:56:01,280 --> 00:56:11,280
In Kerberos V5, the first message, the AS request message that you saw earlier, requires another field called PA data.

794
00:56:11,280 --> 00:56:18,280
And basically, it's like, you can think of it as a timestamp, client's timestamp, encrypted under the client's key.

795
00:56:18,280 --> 00:56:28,280
It just says, look, this is my timestamp, my current time, encrypted under my key, presumably only I know the key.

796
00:56:28,280 --> 00:56:31,280
Well, the AS.

797
00:56:31,280 --> 00:56:38,280
So, the AS only replies if it can be encrypted.

798
00:56:38,280 --> 00:56:39,280
Okay?

799
00:56:39,280 --> 00:56:44,280
But in reality, it's done more like this.

800
00:56:44,280 --> 00:56:53,280
Typical configuration is, the client will send an AS request, normal one, without any authentication.

801
00:56:53,280 --> 00:56:59,280
And the server will reply, the AS will reply with like a special error code.

802
00:56:59,280 --> 00:57:00,280
It's an error.

803
00:57:00,280 --> 00:57:02,280
Pre-authentication required.

804
00:57:02,280 --> 00:57:07,280
Don't come back to me until you demonstrate the knowledge of the KC.

805
00:57:07,280 --> 00:57:15,280
And so, that's number three is AS request with the PA data that I showed you before.

806
00:57:15,280 --> 00:57:20,280
And now, AS is happy if it issues a tissue.

807
00:57:20,280 --> 00:57:23,280
Everything else is the same.

808
00:57:23,280 --> 00:57:25,280
Come on.

809
00:57:25,280 --> 00:57:30,280
So, re-authentication is one new thing, but there are extensions.

810
00:57:30,280 --> 00:57:37,280
For example, today, Kerberos can be 45 with something called pkinit, which, if I remember correctly,

811
00:57:37,280 --> 00:57:46,280
allows a user to securely fetch his public key.

812
00:57:46,280 --> 00:57:48,280
So, the user can be registered with a public key.

813
00:57:48,280 --> 00:57:52,280
But the user does not need to remember their public key.

814
00:57:52,280 --> 00:57:56,280
So, the idea is that the user tries to walk in.

815
00:57:56,280 --> 00:58:02,280
The user's public key will come back and allow, sorry, private key.

816
00:58:02,280 --> 00:58:07,280
The private key will come back from the AS and will allow the user to use that private key

817
00:58:07,280 --> 00:58:11,280
for all subsequent exchanges, so that Kerberos is fortifying it.

818
00:58:11,280 --> 00:58:16,280
The other extension is for public key based cross domain authentication, not important.

819
00:58:16,280 --> 00:58:18,280
So, what is Kerberos used for?

820
00:58:18,280 --> 00:58:23,280
For many things, like I said, Windows Enterprise Networking uses it.

821
00:58:23,280 --> 00:58:32,280
And if you've used Windows on an enterprise scale, even like here in ICS, you probably

822
00:58:32,280 --> 00:58:35,280
used Kerberos without knowing it.

823
00:58:35,280 --> 00:58:41,280
You may have occasionally seen some errors that will tell you, that will leak information

824
00:58:41,280 --> 00:58:43,280
that you are using Kerberos.

825
00:58:43,280 --> 00:58:45,280
Anybody seen those?

826
00:58:45,280 --> 00:58:48,280
Anything starting with KRB?

827
00:58:48,280 --> 00:58:49,280
All right.

828
00:58:49,280 --> 00:58:57,280
So, it's also used for securing, if you are a Unix person, and you remember these Unix commands,

829
00:58:57,280 --> 00:59:01,280
like remote shell, remote exec, RCP remote copy.

830
00:59:01,280 --> 00:59:02,280
Right?

831
00:59:02,280 --> 00:59:05,280
So, these are insecure commands.

832
00:59:05,280 --> 00:59:06,280
Right?

833
00:59:06,280 --> 00:59:08,280
Natively insecure commands.

834
00:59:08,280 --> 00:59:10,280
FTP, right?

835
00:59:10,280 --> 00:59:15,280
If you secure them, you can do so, if you want to secure them, you can do so with Kerberos.

836
00:59:15,280 --> 00:59:20,280
And then it becomes essentially Kerberized, RCP, Kerberized, RXAC, Kerberized shell, etc.

837
00:59:20,280 --> 00:59:23,280
You can also Kerberize the superuser command.

838
00:59:23,280 --> 00:59:24,280
Yeah, that's, Jesus.

839
00:59:24,280 --> 00:59:36,280
Let's see quickly what we're going to look at next.

840
00:59:36,280 --> 00:59:37,280
Okay.

841
00:59:37,280 --> 00:59:49,280
So, that concludes Kerberos, and next we're going to go and look at web security.

842
00:59:49,280 --> 00:59:50,280
Oh.

843
00:59:50,280 --> 00:59:51,280
Well.

844
00:59:51,280 --> 00:59:52,280
SSL TLS.

845
00:59:52,280 --> 00:59:56,280
Any questions about Kerberos at all?

846
00:59:56,280 --> 00:59:57,280
Okay.

847
00:59:57,280 --> 01:00:18,280
Okay.

848
01:00:18,280 --> 01:00:20,280
So, everybody knows SSL.

849
01:00:20,280 --> 01:00:22,280
Everybody knows SSL.

850
01:00:22,280 --> 01:00:27,280
TLS is kind of the same, sort of, kind of.

851
01:00:27,280 --> 01:00:30,280
Anybody know what they stand for?

852
01:00:30,280 --> 01:00:31,280
Ask them.

853
01:00:31,280 --> 01:00:32,280
Ask them.

854
01:00:32,280 --> 01:00:33,280
Ask them.

855
01:00:33,280 --> 01:00:34,280
Google.

856
01:00:34,280 --> 01:00:37,280
Or your favorite chat to be.

857
01:00:37,280 --> 01:00:39,280
Secure sockets layer.

858
01:00:39,280 --> 01:00:41,280
That's SSL.

859
01:00:41,280 --> 01:00:42,280
Transactional layer security.

860
01:00:42,280 --> 01:00:44,280
That's TLS.

861
01:00:44,280 --> 01:00:47,280
And SSH is secure shell.

862
01:00:47,280 --> 01:00:50,280
Okay.

863
01:00:50,280 --> 01:00:51,280
Okay.

864
01:00:51,280 --> 01:00:53,280
So, we're going to go through the part.

865
01:00:53,280 --> 01:00:55,280
The particle is complicated.

866
01:00:55,280 --> 01:01:00,280
But I figure if you know anything, if you want to know anything about today's security

867
01:01:00,280 --> 01:01:03,280
landscape in the real world, you do need to know about Kerberos.

868
01:01:03,280 --> 01:01:05,280
You do need to know about SSL TLS.

869
01:01:05,280 --> 01:01:08,280
And you probably need to know about something called IPsec.

870
01:01:08,280 --> 01:01:09,280
Does anybody know what that is?

871
01:01:09,280 --> 01:01:10,280
Okay.

872
01:01:10,280 --> 01:01:11,280
Two people.

873
01:01:11,280 --> 01:01:12,280
Okay.

874
01:01:12,280 --> 01:01:13,280
That's IP security.

875
01:01:13,280 --> 01:01:15,280
To be covered later.

876
01:01:15,280 --> 01:01:22,280
So, these are all sort of standards of sorts.

877
01:01:22,280 --> 01:01:24,280
Kerberos is actually a standard.

878
01:01:24,280 --> 01:01:27,280
Does anybody know what internet standard means?

879
01:01:27,280 --> 01:01:32,280
Does anybody know what IETF is?

880
01:01:32,280 --> 01:01:34,280
Very few people.

881
01:01:34,280 --> 01:01:37,280
How do you live in computer science world and not know this?

882
01:01:37,280 --> 01:01:40,280
IETF is Internet Engineering Task Force.

883
01:01:40,280 --> 01:01:46,280
It's an organization run by volunteers that essentially governs how the internet works.

884
01:01:46,280 --> 01:01:48,280
Everything about the internet.

885
01:01:48,280 --> 01:01:49,280
Well, not the web, essentially.

886
01:01:49,280 --> 01:01:52,280
The web is a web consortium.

887
01:01:52,280 --> 01:02:01,280
But the internet, essentially, and just above the transport layer, is governed by ATF.

888
01:02:01,280 --> 01:02:03,280
Internet Engineering Task Force.

889
01:02:03,280 --> 01:02:05,280
It's an international organization.

890
01:02:05,280 --> 01:02:06,280
They have working groups.

891
01:02:06,280 --> 01:02:12,280
And these working groups are concerned with everything from, like, network layer.

892
01:02:12,280 --> 01:02:14,280
I mean, they don't work on Wi-Fi.

893
01:02:14,280 --> 01:02:16,280
So, they don't work with data link layer.

894
01:02:16,280 --> 01:02:17,280
Because that's not interesting.

895
01:02:17,280 --> 01:02:21,280
They don't work on radio jamming or physical layer.

896
01:02:21,280 --> 01:02:23,280
Radars and microwaves.

897
01:02:23,280 --> 01:02:24,280
No.

898
01:02:24,280 --> 01:02:26,280
IP and IP.

899
01:02:26,280 --> 01:02:27,280
Right?

900
01:02:27,280 --> 01:02:31,280
Actually, between IP and, let's say, a session layer.

901
01:02:31,280 --> 01:02:36,280
Everything there is subject to IETF approval.

902
01:02:36,280 --> 01:02:40,280
And they publish official documents that are called RFCs.

903
01:02:40,280 --> 01:02:44,280
Funny enough, it stands for request for comments.

904
01:02:44,280 --> 01:02:46,280
But it's not really request for comments.

905
01:02:46,280 --> 01:02:48,280
It's usually an internet standard.

906
01:02:48,280 --> 01:02:49,280
Okay?

907
01:02:49,280 --> 01:02:52,280
So, Kerberos has an internet standard.

908
01:02:52,280 --> 01:02:55,280
If you go look, RFC, Kerberos, you'll find it.

909
01:02:55,280 --> 01:02:58,280
It tells you exactly how Kerberos works.

910
01:02:58,280 --> 01:03:03,280
If you look at IP, V6, for example, it has V4.

911
01:03:03,280 --> 01:03:04,280
They all have RFCs.

912
01:03:04,280 --> 01:03:06,280
And they tell you exactly how IP works.

913
01:03:06,280 --> 01:03:13,280
Which means that if you follow the standard, you can implement that protocol, that format,

914
01:03:13,280 --> 01:03:16,280
in whatever language you want, in whatever platform you want.

915
01:03:16,280 --> 01:03:20,280
From a smart toaster to a supercomputer.

916
01:03:20,280 --> 01:03:22,280
And they will be able to interoperate.

917
01:03:22,280 --> 01:03:24,280
If you implement correctly.

918
01:03:24,280 --> 01:03:25,280
Okay?

919
01:03:25,280 --> 01:03:27,280
So, Kerberos is a standard.

920
01:03:27,280 --> 01:03:29,280
So is SSL TLS.

921
01:03:29,280 --> 01:03:32,280
And so is that inside.

922
01:03:32,280 --> 01:03:34,280
All right.

923
01:03:34,280 --> 01:03:35,280
So, history.

924
01:03:35,280 --> 01:03:38,280
SSL goes back to the 90s.

925
01:03:38,280 --> 01:03:41,280
I remember version 2.

926
01:03:41,280 --> 01:03:43,280
It was like late 90s.

927
01:03:43,280 --> 01:03:47,280
Version 3 is what we kind of use today.

928
01:03:47,280 --> 01:03:48,280
Right?

929
01:03:48,280 --> 01:03:50,280
Because version 3 is essentially TLS.

930
01:03:50,280 --> 01:03:54,280
Don't ask me why they switched the names from SSL to TLS.

931
01:03:54,280 --> 01:03:57,280
It had something to do with trademark dispute.

932
01:03:57,280 --> 01:03:58,280
Okay?

933
01:03:58,280 --> 01:04:01,280
But there is an RFC 22.6.

934
01:04:01,280 --> 01:04:11,280
So if you just search on RFC 22.46, you will find a very detailed specification of SSL.

935
01:04:11,280 --> 01:04:12,280
Sorry, TLS.

936
01:04:12,280 --> 01:04:16,280
And if you want to look at the open sources limitation, there are many.

937
01:04:16,280 --> 01:04:18,280
The most popular one is this, open SSL.

938
01:04:18,280 --> 01:04:19,280
Okay?

939
01:04:19,280 --> 01:04:22,280
It also implements a lot of crypto stuff.

940
01:04:22,280 --> 01:04:27,280
So if you're ever dealing with crypto stuff, and you want to dig, and you should not be

941
01:04:27,280 --> 01:04:31,280
baking anything on your own, because you will mess up royally.

942
01:04:31,280 --> 01:04:33,280
You should use that.

943
01:04:33,280 --> 01:04:35,280
Because it's been around for a long time.

944
01:04:35,280 --> 01:04:39,280
And although occasionally there are bugs, there are fewer bugs in that library than there

945
01:04:39,280 --> 01:04:42,280
are in most others.

946
01:04:42,280 --> 01:04:46,280
So, SSL TLS, you secure it in the transport layer.

947
01:04:46,280 --> 01:04:49,280
It sits just above TCP.

948
01:04:49,280 --> 01:04:50,280
Okay?

949
01:04:50,280 --> 01:04:56,280
Although these days, there are also to sell versions for UDP, but we will not do something

950
01:04:56,280 --> 01:04:57,280
else.

951
01:04:57,280 --> 01:04:59,280
That's a separate topic.

952
01:04:59,280 --> 01:05:02,280
So, think about TCP.

953
01:05:02,280 --> 01:05:06,280
Everybody knows transaction control protocol, transmission control protocol, depending on

954
01:05:06,280 --> 01:05:07,280
who you ask.

955
01:05:07,280 --> 01:05:09,280
On top of it, it's going to be TLSSL.

956
01:05:09,280 --> 01:05:10,280
It's optional.

957
01:05:10,280 --> 01:05:12,280
It's not always present.

958
01:05:12,280 --> 01:05:13,280
Okay?

959
01:05:13,280 --> 01:05:15,280
But it's secure socket, right?

960
01:05:15,280 --> 01:05:22,280
That's where on top of TCP you have sockets.

961
01:05:22,280 --> 01:05:23,280
Okay?

962
01:05:23,280 --> 01:05:32,280
If you want to TLSSize your applications, like with parameters, you need to change them.

963
01:05:32,280 --> 01:05:33,280
Okay?

964
01:05:33,280 --> 01:05:38,280
Now it says here, because originally it is worth my slides, that it's a thin layer between

965
01:05:38,280 --> 01:05:39,280
TCP and HTTP.

966
01:05:39,280 --> 01:05:40,280
That's not actually true.

967
01:05:40,280 --> 01:05:42,280
It's not just for HTTP.

968
01:05:42,280 --> 01:05:50,280
Yes, most things that use, or the biggest user of TLS is the HTTP protocol.

969
01:05:50,280 --> 01:05:51,280
Okay?

970
01:05:51,280 --> 01:05:57,280
So whenever you have HTTPS, right, and you see HTTPS in your browser window, you are using

971
01:05:57,280 --> 01:05:58,280
SSL.

972
01:05:58,280 --> 01:06:02,280
Or if you use some godforsaken browser, maybe they'll have like some little lock symbol,

973
01:06:02,280 --> 01:06:05,280
like they used two years ago, instead of HTTPS.

974
01:06:05,280 --> 01:06:07,280
So that might not be spelled out.

975
01:06:07,280 --> 01:06:13,280
But if you see a lock symbol or HTTPS explicitly, of course, you are using TLSS.

976
01:06:13,280 --> 01:06:19,280
It comes with support, right?

977
01:06:19,280 --> 01:06:28,280
So most reputable browsers, clients, and of course, HTTP servers come with SSL TLS support.

978
01:06:28,280 --> 01:06:30,280
So it's built in.

979
01:06:30,280 --> 01:06:34,280
There are two layers in the TLS SSL.

980
01:06:34,280 --> 01:06:37,280
The layers should not be confused with particles.

981
01:06:37,280 --> 01:06:38,280
Okay?

982
01:06:38,280 --> 01:06:42,280
There is called the record layer for just transmitting packets.

983
01:06:42,280 --> 01:06:43,280
Okay?

984
01:06:43,280 --> 01:06:47,280
And the upper layer where you do what's called protocols, right?

985
01:06:47,280 --> 01:06:56,280
And basically record layer is just treating one SSL segment or packet at a time.

986
01:06:56,280 --> 01:06:59,280
And at the upper layer, you do all this kind of management.

987
01:06:59,280 --> 01:07:01,280
You will see what I mean in a second.

988
01:07:01,280 --> 01:07:04,280
So it kind of looks like this.

989
01:07:04,280 --> 01:07:05,280
Okay?

990
01:07:05,280 --> 01:07:09,280
So you have this TCP and you have SSL record protocol.

991
01:07:09,280 --> 01:07:12,280
And then on top, you have these other protocols.

992
01:07:12,280 --> 01:07:13,280
Okay?

993
01:07:13,280 --> 01:07:16,280
So it looks weird, I understand.

994
01:07:16,280 --> 01:07:22,280
Because HTTP, you see HTTP is shown as being on top of the record layer.

995
01:07:22,280 --> 01:07:27,280
And SSL itself, as the N-shaped protocol, is shown at the same layer.

996
01:07:27,280 --> 01:07:31,280
Well, it doesn't make sense yet, but it will.

997
01:07:31,280 --> 01:07:41,280
So you just read this.

998
01:07:41,280 --> 01:07:46,280
My throat is getting raspy.

999
01:07:46,280 --> 01:08:05,280
In some ways, you will see some of the same concepts as you saw in Termverse, but SSL TLS is not a symmetric, sorry, it's not using symmetric cryptography throughout.

1000
01:08:05,280 --> 01:08:18,280
It uses, like many other products or software, it uses public cryptography initially to establish, to help establish the secure connection between the client browser.

1001
01:08:18,280 --> 01:08:21,280
I say that because that's the biggest application.

1002
01:08:21,280 --> 01:08:24,280
But keep in mind, SSL TLS is not just for browsing.

1003
01:08:24,280 --> 01:08:25,280
Okay?

1004
01:08:25,280 --> 01:08:30,280
But I will use browsing as an episode between your client browser and the web server on the other end of the world.

1005
01:08:30,280 --> 01:08:31,280
All right?

1006
01:08:31,280 --> 01:08:39,280
It's using public cryptography to establish, just in the very beginning, it minimizes, in fact, the use of public cryptography, but it does not avoid it.

1007
01:08:39,280 --> 01:08:40,280
Okay?

1008
01:08:40,280 --> 01:08:46,280
And once the initial connection is established, public cryptography is no longer used.

1009
01:08:46,280 --> 01:08:47,280
All right?

1010
01:08:47,280 --> 01:08:52,280
So, but there's no trusted third party.

1011
01:08:52,280 --> 01:08:53,280
Okay?

1012
01:08:53,280 --> 01:08:59,280
No KVC, no AS, no TGS.

1013
01:08:59,280 --> 01:09:03,280
There's just a big, bad world out there.

1014
01:09:03,280 --> 01:09:04,280
Okay?

1015
01:09:04,280 --> 01:09:09,280
Where innocent little clients talk to potentially dangerous servers.

1016
01:09:09,280 --> 01:09:10,280
All right.

1017
01:09:10,280 --> 01:09:23,280
Let's look at the actual protocol.

1018
01:09:23,280 --> 01:09:24,280
Okay.

1019
01:09:24,280 --> 01:09:27,280
So, we're going to use terminology client and server.

1020
01:09:27,280 --> 01:09:32,280
So, I know it's a little bit confusing, but it's actually not because if you think in Kerberos, client and server, where?

1021
01:09:32,280 --> 01:09:35,280
Well, user and client and server.

1022
01:09:35,280 --> 01:09:36,280
So, here are two.

1023
01:09:36,280 --> 01:09:39,280
We just don't have KDC, AS, TGS anymore.

1024
01:09:39,280 --> 01:09:42,280
Let's see.

1025
01:09:42,280 --> 01:09:51,280
In TLS SSL, 99.9% of the time, only the server is authenticated.

1026
01:09:51,280 --> 01:09:52,280
Okay?

1027
01:09:52,280 --> 01:09:55,280
So, that's the philosophy also that is different from Kerberos.

1028
01:09:55,280 --> 01:09:57,280
Only the web server, right?

1029
01:09:57,280 --> 01:09:58,280
Think of the web.

1030
01:09:58,280 --> 01:10:01,280
Only the web server is authenticated.

1031
01:10:01,280 --> 01:10:06,280
Have you ever, has anybody ever seen mutual authentication in CSL TLS?

1032
01:10:06,280 --> 01:10:09,280
Assuming you know what I mean.

1033
01:10:09,280 --> 01:10:10,280
No?

1034
01:10:10,280 --> 01:10:14,280
I've seen it twice, three times in the last one year.

1035
01:10:14,280 --> 01:10:26,280
So, TLS does support mutual authentication, but generally does not do it because it actually has little justification.

1036
01:10:26,280 --> 01:10:27,280
And the reason is like this.

1037
01:10:27,280 --> 01:10:41,280
When you are sitting in front of your browser and you type in or paste a URL, think about what happens, right?

1038
01:10:41,280 --> 01:10:44,280
Something gets parsed by your request.

1039
01:10:44,280 --> 01:10:50,280
And there's like three parts really to, well, four parts to the URL.

1040
01:10:50,280 --> 01:10:54,280
There's the protocol identifier, which is the first part, right?

1041
01:10:54,280 --> 01:10:56,280
Doesn't have to be HTTP, by the way.

1042
01:10:56,280 --> 01:10:57,280
But usually it is, right?

1043
01:10:57,280 --> 01:10:58,280
SSL is HTTP, yes.

1044
01:10:58,280 --> 01:10:59,280
Then there's like delimiters.

1045
01:10:59,280 --> 01:11:00,280
Then there's something called the domain name.

1046
01:11:00,280 --> 01:11:01,280
Right?

1047
01:11:01,280 --> 01:11:15,280
It's actually an address, sorry, a host name or a name that can be used to resolve to, you

1048
01:11:15,280 --> 01:11:16,280
know, be resolved by DNS, right?

1049
01:11:16,280 --> 01:11:17,280
Domain name service to produce an IP address.

1050
01:11:17,280 --> 01:11:22,280
So it actually refers to an entity.

1051
01:11:22,280 --> 01:11:24,280
And what follows it?

1052
01:11:24,280 --> 01:11:27,280
There's a slash what?

1053
01:11:27,280 --> 01:11:34,280
What happens after www.uci.edu slash what?

1054
01:11:34,280 --> 01:11:35,280
Maybe nothing.

1055
01:11:35,280 --> 01:11:38,280
Maybe nothing, right?

1056
01:11:38,280 --> 01:11:40,280
Well, wait.

1057
01:11:40,280 --> 01:11:42,280
The domain name is where you want to go.

1058
01:11:42,280 --> 01:11:43,280
What's after that?

1059
01:11:43,280 --> 01:11:44,280
What is it called?

1060
01:11:44,280 --> 01:11:45,280
Path.

1061
01:11:45,280 --> 01:11:46,280
Path, yes.

1062
01:11:46,280 --> 01:11:47,280
It's the path.

1063
01:11:47,280 --> 01:11:48,280
It looks like a Unix path, right?

1064
01:11:48,280 --> 01:11:49,280
It might even be.

1065
01:11:49,280 --> 01:11:50,280
It doesn't have to be.

1066
01:11:50,280 --> 01:11:51,280
Could be interpreted differently, but could be a Unix path, right?

1067
01:11:51,280 --> 01:12:07,280
Like go to that machine, go to that web server, that physical host, and go slash, et cetera,

1068
01:12:07,280 --> 01:12:09,280
slash password, blah, okay?

1069
01:12:09,280 --> 01:12:12,280
And then what?

1070
01:12:12,280 --> 01:12:16,280
And then there might be another component after that.

1071
01:12:16,280 --> 01:12:17,280
Yeah.

1072
01:12:17,280 --> 01:12:18,280
Frequently overloaded.

1073
01:12:18,280 --> 01:12:22,280
That's why you see these URLs that spread for miles.

1074
01:12:22,280 --> 01:12:30,280
Right, so what are we concerned with when we browse the web?

1075
01:12:30,280 --> 01:12:31,280
Fishing?

1076
01:12:31,280 --> 01:12:32,280
Squatting?

1077
01:12:32,280 --> 01:12:35,280
Anybody know about squatting?

1078
01:12:35,280 --> 01:12:36,280
Mistyping?

1079
01:12:36,280 --> 01:12:41,280
You mistyped one letter or one number in the URL and suddenly you are in a God knows where?

1080
01:12:41,280 --> 01:12:42,280
Might pretend?

1081
01:12:42,280 --> 01:12:48,280
Yeah, you type wellsbargo.com and you might wind up in a site that looks like Wells Fargo,

1082
01:12:48,280 --> 01:12:50,280
but it ain't.

1083
01:12:50,280 --> 01:12:58,280
And here you are entering your username and password and your account is toast within minutes.

1084
01:12:58,280 --> 01:13:04,280
Without SSL TLS, it would be.

1085
01:13:04,280 --> 01:13:12,280
So, what's important for you, the user, for us all, is to go to the right website, right?

1086
01:13:12,280 --> 01:13:16,280
When we click on the bookmarks, a lot of times smart people, right?

1087
01:13:16,280 --> 01:13:17,280
People care.

1088
01:13:17,280 --> 01:13:23,280
If they go to particular websites more often than once or regularly, they'll put them in bookmarks.

1089
01:13:23,280 --> 01:13:24,280
So, you click on the website, right?

1090
01:13:24,280 --> 01:13:25,280
You don't actually enter it, right?

1091
01:13:25,280 --> 01:13:30,280
How often do we actually enter it?

1092
01:13:30,280 --> 01:13:33,280
Yeah, basically, enter it.

1093
01:13:33,280 --> 01:13:38,280
So, we're concerned with the authenticity of the website.

1094
01:13:38,280 --> 01:13:40,280
There's no human there, usually, right?

1095
01:13:40,280 --> 01:13:41,280
It's a website.

1096
01:13:41,280 --> 01:13:43,280
There's no human on the other side.

1097
01:13:43,280 --> 01:13:44,280
There's no Bob.

1098
01:13:44,280 --> 01:13:45,280
Right?

1099
01:13:45,280 --> 01:13:46,280
It's a website.

1100
01:13:46,280 --> 01:13:50,280
So, we want to make sure we're going to the right website, the authentic website.

1101
01:13:50,280 --> 01:13:55,280
That's why the website authenticating to us, to our browser, is important.

1102
01:13:55,280 --> 01:14:00,280
How important is this to authenticate us to the service?

1103
01:14:00,280 --> 01:14:07,280
Well, yeah, this is like a social network or another bank where you have an account, yeah?

1104
01:14:07,280 --> 01:14:08,280
Clearly.

1105
01:14:08,280 --> 01:14:09,280
Yes?

1106
01:14:09,280 --> 01:14:11,280
It's important.

1107
01:14:11,280 --> 01:14:14,280
But does your browser know how to authenticate as you?

1108
01:14:14,280 --> 01:14:15,280
No.

1109
01:14:15,280 --> 01:14:16,280
No.

1110
01:14:16,280 --> 01:14:21,280
You authenticate the human using a password, a PIN, an MFA, or something like that.

1111
01:14:21,280 --> 01:14:22,280
A YubiKey.

1112
01:14:22,280 --> 01:14:30,280
So, client, the real client to web server authentication happens at a higher level, or higher level.

1113
01:14:30,280 --> 01:14:31,280
Userless.

1114
01:14:31,280 --> 01:14:34,280
For the client, stay outside, please.

1115
01:14:34,280 --> 01:14:40,280
For the client, it doesn't make sense to authenticate to the server, the same way the

1116
01:14:40,280 --> 01:14:41,280
server authenticate the client.

1117
01:14:41,280 --> 01:14:47,280
Moreover, a lot of web servers we use don't have user accounts, or at least don't require.

1118
01:14:47,280 --> 01:14:52,280
If I go to WWCIDU, I'm going to require an account.

1119
01:14:52,280 --> 01:14:53,280
Does it say you log in?

1120
01:14:53,280 --> 01:14:54,280
No.

1121
01:14:54,280 --> 01:14:55,280
There's a lot of public information out there.

1122
01:14:55,280 --> 01:15:01,280
If I go to WWWhiteHouse.gov, a lot of public info.

1123
01:15:01,280 --> 01:15:09,280
But I care that I go to WWWhiteHouse.gov, not WWWhiteHouse.com, because that used to be a porn site.

1124
01:15:09,280 --> 01:15:10,280
I don't know what it is now.

1125
01:15:10,280 --> 01:15:14,280
So, yeah, I want to make sure I go to the right place.

1126
01:15:14,280 --> 01:15:15,280
Right?

1127
01:15:15,280 --> 01:15:23,280
And so, UCI.edu, not UCI.org, which is United Cycling International, which exists.

1128
01:15:23,280 --> 01:15:25,280
That's the other UCI.

1129
01:15:25,280 --> 01:15:31,280
So, what I've said, that justifies the reason why SSL is so leaning on the security of web

1130
01:15:31,280 --> 01:15:34,280
servers and much less concerned with the web client.

1131
01:15:34,280 --> 01:15:35,280
Okay.

1132
01:15:35,280 --> 01:15:37,280
See you Tuesday.

1133
01:16:04,280 --> 01:16:05,280
I was wondering.

1134
01:16:05,280 --> 01:16:06,280
Yeah.

1135
01:16:06,280 --> 01:16:07,280
What did you decide?

1136
01:16:07,280 --> 01:16:08,280
It's T8, no?

1137
01:16:08,280 --> 01:16:09,280
Oh.

1138
01:16:09,280 --> 01:16:10,280
It's T8.

1139
01:16:10,280 --> 01:16:11,280
So, he asked the professor.

1140
01:16:11,280 --> 01:16:12,280
That's the thing.

1141
01:16:12,280 --> 01:16:13,280
Yeah.

1142
01:16:13,280 --> 01:16:14,280
Last week.

1143
01:16:14,280 --> 01:16:15,280
Yeah.

1144
01:16:15,280 --> 01:16:16,280
Yeah.

1145
01:16:16,280 --> 01:16:17,280
Oh, yeah.

1146
01:16:17,280 --> 01:16:18,280
Right there.

1147
01:16:18,280 --> 01:16:19,280
Yeah.

1148
01:16:19,280 --> 01:16:21,280
Don't worry about it.

1149
01:16:21,280 --> 01:16:22,280
You know.

1150
01:16:22,280 --> 01:16:25,280
It's not their responsibility to worry about it.

1151
01:16:25,280 --> 01:16:26,280
Okay.

1152
01:16:26,280 --> 01:16:27,280
They're responsible.

1153
01:16:27,280 --> 01:16:28,280
You know.

1154
01:16:28,280 --> 01:16:29,280
Okay.

1155
01:16:29,280 --> 01:16:30,280
They're responsible for funding.

1156
01:16:30,280 --> 01:16:33,280
Because you have an awful lot of the states that are getting this.

1157
01:16:33,280 --> 01:16:34,280
Yeah.

1158
01:16:34,280 --> 01:16:35,280
But it is .

1159
01:16:35,280 --> 01:16:36,280
Oh.

1160
01:16:36,280 --> 01:16:37,280
Sorry.

1161
01:16:37,280 --> 01:16:39,280
I didn't manage to pay attention to that.

1162
01:16:39,280 --> 01:16:40,280
Oh.

1163
01:16:40,280 --> 01:16:41,280
Yes, it is.

1164
01:16:41,280 --> 01:16:42,280
You know.

1165
01:16:42,280 --> 01:16:43,280
It's fine.

1166
01:16:43,280 --> 01:16:44,280
Disprint's fine.

1167
01:16:44,280 --> 01:16:45,280
I have WeChat.

1168
01:16:45,280 --> 01:16:46,280
Oh, WeChat is easy.

1169
01:16:46,280 --> 01:16:47,280
Yeah.

1170
01:16:47,280 --> 01:16:50,280
I've used it for your projects before.

1171
01:16:50,280 --> 01:16:51,280
Yeah.

1172
01:16:51,280 --> 01:16:52,280
Okay.

1173
01:16:52,280 --> 01:16:53,280
Let me .

1174
01:16:53,280 --> 01:16:54,280
Yeah.

1175
01:16:54,280 --> 01:16:55,280
Okay.

1176
01:16:55,280 --> 01:16:56,280
Hey.

1177
01:16:56,280 --> 01:16:57,280
You.

1178
01:16:57,280 --> 01:16:58,280
You.

1179
01:16:58,280 --> 01:16:59,280
You.

1180
01:16:59,280 --> 01:17:00,280
Yeah.

1181
01:17:00,280 --> 01:17:01,280
These are the two suspects that you want to work with?

1182
01:17:01,280 --> 01:17:02,280
Yeah.

1183
01:17:02,280 --> 01:17:03,280
Yeah.

1184
01:17:03,280 --> 01:17:06,280
And figure out how you're going to make your project more substantial.

1185
01:17:06,280 --> 01:17:07,280
Right?

1186
01:17:07,280 --> 01:17:09,280
Now you have a trio rather than a duo.

1187
01:17:09,280 --> 01:17:10,280
Okay?

1188
01:17:10,280 --> 01:17:11,280
Right.

1189
01:17:11,280 --> 01:17:12,280
Okay.

1190
01:17:12,280 --> 01:17:13,280
All right.

1191
01:17:13,280 --> 01:17:14,280
But.

1192
01:17:14,280 --> 01:17:15,280
No.

1193
01:17:15,280 --> 01:17:16,280
What I want is an actual update.

1194
01:17:16,280 --> 01:17:17,280
So.

1195
01:17:17,280 --> 01:17:18,280
Kind of like extend your proposal.

1196
01:17:18,280 --> 01:17:19,280
ASAP.

1197
01:17:19,280 --> 01:17:20,280
You know.

1198
01:17:20,280 --> 01:17:21,280
Take you into account.

1199
01:17:21,280 --> 01:17:22,280
Like.

1200
01:17:22,280 --> 01:17:23,280
You know what I'm saying?

1201
01:17:23,280 --> 01:17:24,280
No?

1202
01:17:24,280 --> 01:17:25,280
Yeah.

1203
01:17:25,280 --> 01:17:26,280
They send me a proposal.

1204
01:17:26,280 --> 01:17:27,280
You are not part of it.

1205
01:17:27,280 --> 01:17:28,280
Yeah.

1206
01:17:28,280 --> 01:17:29,280
That's what I'm trying to do.

1207
01:17:29,280 --> 01:17:30,280
Yeah.

1208
01:17:30,280 --> 01:17:31,280
Now that there's you.

1209
01:17:31,280 --> 01:17:32,280
There's more.

1210
01:17:32,280 --> 01:17:33,280
It has to be done.

1211
01:17:33,280 --> 01:17:34,280
Yeah.

1212
01:17:34,280 --> 01:17:35,280
Okay.

1213
01:17:35,280 --> 01:17:36,280
Right?

1214
01:17:36,280 --> 01:17:37,280
You don't get them.

1215
01:17:37,280 --> 01:17:38,280
You don't get a free bath.

1216
01:17:38,280 --> 01:17:39,280
Yeah.

1217
01:17:39,280 --> 01:17:40,280
Yeah.

1218
01:17:40,280 --> 01:17:41,280
Yeah.

1219
01:17:41,280 --> 01:17:42,280
So basically that's all I want.

1220
01:17:42,280 --> 01:17:43,280
真的很 quick.

1221
01:17:43,280 --> 01:17:45,280
So please like to let it go.

1222
01:17:45,280 --> 01:17:46,280
Do it at number.

1223
01:17:46,280 --> 01:17:47,280
Come on.

1224
01:17:47,280 --> 01:17:48,280
Do it at number it Er.

1225
01:17:48,280 --> 01:17:49,280
Good.

1226
01:17:49,280 --> 01:17:50,280
Ummm.

1227
01:17:50,280 --> 01:17:51,280
Yeah.

1228
01:17:51,280 --> 01:17:52,280
I'd actually bring it over.

1229
01:17:52,280 --> 01:17:53,280
The disc…

1230
01:17:53,280 --> 01:17:54,280
Why don't you guys.

1231
01:17:54,280 --> 01:17:55,280
Why don't you pop them up?

1232
01:17:55,280 --> 01:17:56,280
No I don't.

1233
01:17:56,280 --> 01:17:58,280
I don't want them on.

1234
01:17:58,280 --> 01:17:59,280
They're doing so…

1235
01:17:59,280 --> 01:18:01,280
damn it I don't showing them…

1236
01:18:01,280 --> 01:18:02,280
…

1237
01:18:03,280 --> 01:18:04,280
…

1238
01:18:04,280 --> 01:18:05,280
…

1239
01:18:05,280 --> 01:18:10,280
…

1240
01:18:10,280 --> 01:18:40,260
Thank you.

1241
01:18:40,280 --> 01:19:10,260
Thank you.

1242
01:19:10,280 --> 01:19:40,260
Thank you.

